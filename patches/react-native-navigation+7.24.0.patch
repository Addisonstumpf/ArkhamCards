diff --git a/node_modules/react-native-navigation/.buildkite/pipeline.yml b/node_modules/react-native-navigation/.buildkite/pipeline.yml
index 33fe368..7b7e8ec 100644
--- a/node_modules/react-native-navigation/.buildkite/pipeline.yml
+++ b/node_modules/react-native-navigation/.buildkite/pipeline.yml
@@ -1,19 +1,59 @@
-env:
-  CI: true
-  ANDROID_HOME: /usr/local/share/android-sdk/
-  PATH: "$PATH:/usr/local/share/android-sdk/platform-tools/"
 steps:
-  - label: "Android :android:"
+  - block: ":rocket: Release!"
+    prompt: "Fill out the details for release"
+    if: 'build.message =~ /^release\$/i'
+    fields:
+      - text: "VERSION"
+        key: "version"
+      - text: "NPM_TAG"
+        key: "npm-tag"
+        default: 'null'
+        required: false
+      - text: "BUILD_DOCUMENTATION_VERSION"
+        key: "build-documentation-version"
+        default: 'null'
+        hint: 'Leave NULL if no version is specified'
+      - text: "REMOVE_DOCUMENTATION_VERSION"
+        key: "remove-documentation-version"
+        default: 'null'
+        hint: 'Leave NULL if no version is specified'
+  
+  - label: ":android: Android"
     command:
-    - "env"
+    - "nvm install"
     - "npm install"
-    - "npm run clean"
+    - "npm run test-js"
     - "npm run test-unit-android -- --release"
     - "npm run test-e2e-android-multi -- --release --headless --verbose --ci"
+    key: "android_build"
+    timeout_in_minutes: 90
+
+  - label: ":ios: iOS - Unit"
+    command:
+    - "nvm install"
+    - "npm install"
+    - "npm run test-unit-ios -- --release"
+    key: "ios_unit"
+    timeout_in_minutes: 90
 
-  - label: "IOS :ios:"
+  - label: ":ios: iOS - E2E"
     command:
-    - "env"
+    - "nvm install"
     - "npm install"
-    - "npm run clean"
+    - "npm run test-snapshot-ios -- --release"
     - "npm run test-e2e-ios -- --release --multi --ci"
+    key: "ios_e2e"
+    timeout_in_minutes: 90
+
+  - label: ":package: Publish"
+    env:
+    if: "build.pull_request.id == null"
+    command:
+    - "nvm install"
+    - "npm install"
+    - "npm run release"
+    depends_on:
+    - "android_build"
+    - "ios_unit"
+    - "ios_e2e"
+    timeout_in_minutes: 90
diff --git a/node_modules/react-native-navigation/.nvmrc b/node_modules/react-native-navigation/.nvmrc
new file mode 100644
index 0000000..8351c19
--- /dev/null
+++ b/node_modules/react-native-navigation/.nvmrc
@@ -0,0 +1 @@
+14
diff --git a/node_modules/react-native-navigation/Mock.d.ts b/node_modules/react-native-navigation/Mock.d.ts
new file mode 100644
index 0000000..96a78fa
--- /dev/null
+++ b/node_modules/react-native-navigation/Mock.d.ts
@@ -0,0 +1 @@
+export * from './lib/Mock';
diff --git a/node_modules/react-native-navigation/Mock.js b/node_modules/react-native-navigation/Mock.js
new file mode 100644
index 0000000..a03a050
--- /dev/null
+++ b/node_modules/react-native-navigation/Mock.js
@@ -0,0 +1,4 @@
+"use strict";
+Object.defineProperty(exports, "__esModule", { value: true });
+const tslib_1 = require("tslib");
+(0, tslib_1.__exportStar)(require("./lib/Mock"), exports);
diff --git a/node_modules/react-native-navigation/Mock.ts b/node_modules/react-native-navigation/Mock.ts
index c4cbf00..96a78fa 100644
--- a/node_modules/react-native-navigation/Mock.ts
+++ b/node_modules/react-native-navigation/Mock.ts
@@ -1 +1 @@
-export * from './lib/dist/Mock';
+export * from './lib/Mock';
diff --git a/node_modules/react-native-navigation/README.md b/node_modules/react-native-navigation/README.md
index 9173899..adf76a6 100644
--- a/node_modules/react-native-navigation/README.md
+++ b/node_modules/react-native-navigation/README.md
@@ -8,7 +8,6 @@
   <a href="https://www.npmjs.com/package/react-native-navigation"><img src="https://img.shields.io/npm/v/react-native-navigation/latest.svg?style=flat-square" alt="NPM latest version"></a>
   <a href="https://www.npmjs.com/package/react-native-navigation"><img src="https://img.shields.io/npm/v/react-native-navigation/snapshot.svg?style=flat-square" alt="NPM snapshot version"></a>
   <a href="https://jenkins-oss.wixpress.com/job/multi-react-native-navigation-master/"><img src="https://img.shields.io/jenkins/s/http/jenkins-oss.wixpress.com:8080/job/multi-react-native-navigation-master.svg?style=flat-square" alt="NPM snapshot version"></a>
-  <a href="https://github.com/wix/react-native-navigation/pulls"><img src="https://img.shields.io/endpoint?url=https%3A%2F%2Fmerge-chance.info%2Fbadge%3Frepo%3Dwix/react-native-navigation"></a>
 
 </p>
 <p align="center">
diff --git a/node_modules/react-native-navigation/jest.config.js b/node_modules/react-native-navigation/jest.config.js
new file mode 100644
index 0000000..5bc4d18
--- /dev/null
+++ b/node_modules/react-native-navigation/jest.config.js
@@ -0,0 +1,40 @@
+module.exports = {
+  preset: 'react-native',
+  transformIgnorePatterns: [
+    'node_modules/(?!(@react-native|react-native|react-native-ui-lib|react-native-animatable)/)',
+  ],
+  transform: {
+    '\\.[jt]sx?$': 'babel-jest',
+  },
+  roots: [
+    '<rootDir>/lib/src/',
+    '<rootDir>/playground/src/',
+    '<rootDir>/integration/',
+    '<rootDir>/scripts/',
+    '<rootDir>/e2e/',
+  ],
+  setupFilesAfterEnv: ['./jest-setup.js'],
+  testPathIgnorePatterns: ['/node_modules/'],
+  moduleNameMapper: {
+    'react-native-navigation/Mock': '<rootDir>/lib/Mock',
+    'react-native-navigation': '<rootDir>/lib/src',
+    '\\.(jpg|jpeg|png|gif|eot|otf|webp|svg|ttf|woff|woff2|mp4|webm|wav|mp3|m4a|aac|oga)$':
+      '<rootDir>/playground/img/layouts@2x.png',
+  },
+  collectCoverageFrom: [
+    'lib/src/**/*.ts',
+    'lib/src/**/*.tsx',
+    'integration/**/*.js',
+    '!lib/dist/index.js',
+    '!lib/dist/Navigation.js',
+    '!lib/dist/adapters/**/*',
+    '!lib/dist/interfaces/**/*',
+    '!lib/dist/**/*.test.*',
+    '!integration/**/*.test.*',
+    '!integration/*.test.*',
+    '!e2e/**/*test.js',
+  ],
+  resetMocks: true,
+  resetModules: true,
+  coverageReporters: ['json', 'lcov', 'text', 'html'],
+};
diff --git a/node_modules/react-native-navigation/lib/src/Mock/Application.tsx b/node_modules/react-native-navigation/lib/Mock/Application.tsx
similarity index 100%
rename from node_modules/react-native-navigation/lib/src/Mock/Application.tsx
rename to node_modules/react-native-navigation/lib/Mock/Application.tsx
diff --git a/node_modules/react-native-navigation/lib/src/Mock/ComponentProps.tsx b/node_modules/react-native-navigation/lib/Mock/ComponentProps.tsx
similarity index 100%
rename from node_modules/react-native-navigation/lib/src/Mock/ComponentProps.tsx
rename to node_modules/react-native-navigation/lib/Mock/ComponentProps.tsx
diff --git a/node_modules/react-native-navigation/lib/src/Mock/Components/BottomTabs.tsx b/node_modules/react-native-navigation/lib/Mock/Components/BottomTabs.tsx
similarity index 100%
rename from node_modules/react-native-navigation/lib/src/Mock/Components/BottomTabs.tsx
rename to node_modules/react-native-navigation/lib/Mock/Components/BottomTabs.tsx
diff --git a/node_modules/react-native-navigation/lib/src/Mock/Components/ComponentScreen.tsx b/node_modules/react-native-navigation/lib/Mock/Components/ComponentScreen.tsx
similarity index 79%
rename from node_modules/react-native-navigation/lib/src/Mock/Components/ComponentScreen.tsx
rename to node_modules/react-native-navigation/lib/Mock/Components/ComponentScreen.tsx
index 6c5eb8e..d513ba0 100644
--- a/node_modules/react-native-navigation/lib/src/Mock/Components/ComponentScreen.tsx
+++ b/node_modules/react-native-navigation/lib/Mock/Components/ComponentScreen.tsx
@@ -1,11 +1,13 @@
 import React, { Component } from 'react';
 import { Button, View, Text } from 'react-native';
-import { Navigation } from '../..';
+import { Navigation } from '../../src';
 import { ComponentProps } from '../ComponentProps';
 import { VISIBLE_SCREEN_TEST_ID } from '../constants';
 import { LayoutStore } from '../Stores/LayoutStore';
 import { connect } from '../connect';
 import { TopBar } from './TopBar';
+import { events } from '../Stores/EventsStore';
+import _ from 'lodash';
 
 export const ComponentScreen = connect(
   class extends Component<ComponentProps> {
@@ -34,7 +36,13 @@ export const ComponentScreen = connect(
             <Button
               testID={bottomTabOptions?.testID}
               title={bottomTabOptions?.text || ''}
-              onPress={() => LayoutStore.selectTabIndex(this.props.layoutNode.getBottomTabs(), i)}
+              onPress={() => {
+                events.invokeBottomTabPressed({
+                  tabIndex: i,
+                });
+                if (_.defaultTo(bottomTabOptions?.selectTabOnPress, true))
+                  LayoutStore.selectTabIndex(this.props.layoutNode.getBottomTabs(), i);
+              }}
             />
             <Text>{bottomTabOptions?.badge}</Text>
           </View>
@@ -46,6 +54,9 @@ export const ComponentScreen = connect(
 
     render() {
       const Component = Navigation.mock.store.getWrappedComponent(this.props.layoutNode.data.name);
+      if (!Component)
+        throw new Error(`${this.props.layoutNode.data.name} has not been registered.`);
+
       return (
         <View testID={this.isVisible() ? VISIBLE_SCREEN_TEST_ID : undefined}>
           {this.props.layoutNode.getStack() && (
diff --git a/node_modules/react-native-navigation/lib/src/Mock/Components/LayoutComponent.tsx b/node_modules/react-native-navigation/lib/Mock/Components/LayoutComponent.tsx
similarity index 100%
rename from node_modules/react-native-navigation/lib/src/Mock/Components/LayoutComponent.tsx
rename to node_modules/react-native-navigation/lib/Mock/Components/LayoutComponent.tsx
diff --git a/node_modules/react-native-navigation/lib/src/Mock/Components/Modals.tsx b/node_modules/react-native-navigation/lib/Mock/Components/Modals.tsx
similarity index 100%
rename from node_modules/react-native-navigation/lib/src/Mock/Components/Modals.tsx
rename to node_modules/react-native-navigation/lib/Mock/Components/Modals.tsx
diff --git a/node_modules/react-native-navigation/lib/src/Mock/Components/NavigationButton.tsx b/node_modules/react-native-navigation/lib/Mock/Components/NavigationButton.tsx
similarity index 97%
rename from node_modules/react-native-navigation/lib/src/Mock/Components/NavigationButton.tsx
rename to node_modules/react-native-navigation/lib/Mock/Components/NavigationButton.tsx
index 3caa02e..f60fb28 100644
--- a/node_modules/react-native-navigation/lib/src/Mock/Components/NavigationButton.tsx
+++ b/node_modules/react-native-navigation/lib/Mock/Components/NavigationButton.tsx
@@ -1,6 +1,6 @@
 import React, { Component } from 'react';
 import { Button, TouchableOpacity } from 'react-native';
-import { Navigation, OptionsTopBarButton } from '../../';
+import { Navigation, OptionsTopBarButton } from '../../src';
 import { events } from '../Stores/EventsStore';
 
 interface ButtonProps {
diff --git a/node_modules/react-native-navigation/lib/src/Mock/Components/Overlays.tsx b/node_modules/react-native-navigation/lib/Mock/Components/Overlays.tsx
similarity index 100%
rename from node_modules/react-native-navigation/lib/src/Mock/Components/Overlays.tsx
rename to node_modules/react-native-navigation/lib/Mock/Components/Overlays.tsx
diff --git a/node_modules/react-native-navigation/lib/src/Mock/Components/Stack.tsx b/node_modules/react-native-navigation/lib/Mock/Components/Stack.tsx
similarity index 100%
rename from node_modules/react-native-navigation/lib/src/Mock/Components/Stack.tsx
rename to node_modules/react-native-navigation/lib/Mock/Components/Stack.tsx
diff --git a/node_modules/react-native-navigation/lib/src/Mock/Components/TopBar.tsx b/node_modules/react-native-navigation/lib/Mock/Components/TopBar.tsx
similarity index 95%
rename from node_modules/react-native-navigation/lib/src/Mock/Components/TopBar.tsx
rename to node_modules/react-native-navigation/lib/Mock/Components/TopBar.tsx
index 6f45901..67abd20 100644
--- a/node_modules/react-native-navigation/lib/src/Mock/Components/TopBar.tsx
+++ b/node_modules/react-native-navigation/lib/Mock/Components/TopBar.tsx
@@ -1,7 +1,7 @@
 import React, { Component } from 'react';
 import { Button, View, Text } from 'react-native';
-import { Navigation, OptionsTopBarButton } from '../..';
-import { OptionsTopBar, OptionsTopBarBackButton } from '../../interfaces/Options';
+import { Navigation, OptionsTopBarButton } from '../../src';
+import { OptionsTopBar, OptionsTopBarBackButton } from '../../src/interfaces/Options';
 import ParentNode from '../Layouts/ParentNode';
 import { LayoutStore } from '../Stores/LayoutStore';
 import { NavigationButton } from './NavigationButton';
diff --git a/node_modules/react-native-navigation/lib/src/Mock/Layouts/BottomTabsNode.ts b/node_modules/react-native-navigation/lib/Mock/Layouts/BottomTabsNode.ts
similarity index 95%
rename from node_modules/react-native-navigation/lib/src/Mock/Layouts/BottomTabsNode.ts
rename to node_modules/react-native-navigation/lib/Mock/Layouts/BottomTabsNode.ts
index 3cc0d93..d8fc42d 100644
--- a/node_modules/react-native-navigation/lib/src/Mock/Layouts/BottomTabsNode.ts
+++ b/node_modules/react-native-navigation/lib/Mock/Layouts/BottomTabsNode.ts
@@ -1,5 +1,5 @@
 import _ from 'lodash';
-import { Options } from '../../index';
+import { Options } from '../../src/index';
 import { LayoutStore } from '../Stores/LayoutStore';
 import ParentNode from './ParentNode';
 
diff --git a/node_modules/react-native-navigation/lib/src/Mock/Layouts/ComponentNode.ts b/node_modules/react-native-navigation/lib/Mock/Layouts/ComponentNode.ts
similarity index 97%
rename from node_modules/react-native-navigation/lib/src/Mock/Layouts/ComponentNode.ts
rename to node_modules/react-native-navigation/lib/Mock/Layouts/ComponentNode.ts
index 1ee68c9..4103e6d 100644
--- a/node_modules/react-native-navigation/lib/src/Mock/Layouts/ComponentNode.ts
+++ b/node_modules/react-native-navigation/lib/Mock/Layouts/ComponentNode.ts
@@ -1,5 +1,5 @@
 import _ from 'lodash';
-import { OptionsTopBarButton } from 'react-native-navigation/interfaces/Options';
+import { OptionsTopBarButton } from '../../src';
 import { events } from '../Stores/EventsStore';
 import ParentNode from './ParentNode';
 
diff --git a/node_modules/react-native-navigation/lib/src/Mock/Layouts/LayoutNodeFactory.ts b/node_modules/react-native-navigation/lib/Mock/Layouts/LayoutNodeFactory.ts
similarity index 100%
rename from node_modules/react-native-navigation/lib/src/Mock/Layouts/LayoutNodeFactory.ts
rename to node_modules/react-native-navigation/lib/Mock/Layouts/LayoutNodeFactory.ts
diff --git a/node_modules/react-native-navigation/lib/src/Mock/Layouts/Node.ts b/node_modules/react-native-navigation/lib/Mock/Layouts/Node.ts
similarity index 94%
rename from node_modules/react-native-navigation/lib/src/Mock/Layouts/Node.ts
rename to node_modules/react-native-navigation/lib/Mock/Layouts/Node.ts
index a651138..57801ed 100644
--- a/node_modules/react-native-navigation/lib/src/Mock/Layouts/Node.ts
+++ b/node_modules/react-native-navigation/lib/Mock/Layouts/Node.ts
@@ -1,4 +1,4 @@
-import { Options } from '../../index';
+import { Options } from '../../src/index';
 import ParentNode from './ParentNode';
 
 interface Data {
diff --git a/node_modules/react-native-navigation/lib/src/Mock/Layouts/ParentNode.ts b/node_modules/react-native-navigation/lib/Mock/Layouts/ParentNode.ts
similarity index 95%
rename from node_modules/react-native-navigation/lib/src/Mock/Layouts/ParentNode.ts
rename to node_modules/react-native-navigation/lib/Mock/Layouts/ParentNode.ts
index 377cfed..da7326d 100644
--- a/node_modules/react-native-navigation/lib/src/Mock/Layouts/ParentNode.ts
+++ b/node_modules/react-native-navigation/lib/Mock/Layouts/ParentNode.ts
@@ -1,6 +1,6 @@
 import _ from 'lodash';
-import { OptionsTopBarButton } from '../../interfaces/Options';
-import { Options } from '../../index';
+import { OptionsTopBarButton } from '../../src/interfaces/Options';
+import { Options } from '../../src/index';
 import { LayoutStore } from '../Stores/LayoutStore';
 import ComponentNode from './ComponentNode';
 import LayoutNodeFactory from './LayoutNodeFactory';
diff --git a/node_modules/react-native-navigation/lib/src/Mock/Layouts/StackNode.ts b/node_modules/react-native-navigation/lib/Mock/Layouts/StackNode.ts
similarity index 100%
rename from node_modules/react-native-navigation/lib/src/Mock/Layouts/StackNode.ts
rename to node_modules/react-native-navigation/lib/Mock/Layouts/StackNode.ts
diff --git a/node_modules/react-native-navigation/lib/src/Mock/Stores/EventsStore.ts b/node_modules/react-native-navigation/lib/Mock/Stores/EventsStore.ts
similarity index 79%
rename from node_modules/react-native-navigation/lib/src/Mock/Stores/EventsStore.ts
rename to node_modules/react-native-navigation/lib/Mock/Stores/EventsStore.ts
index 8f27f4b..4f7746c 100644
--- a/node_modules/react-native-navigation/lib/src/Mock/Stores/EventsStore.ts
+++ b/node_modules/react-native-navigation/lib/Mock/Stores/EventsStore.ts
@@ -2,8 +2,9 @@ import {
   ComponentDidDisappearEvent,
   ComponentWillAppearEvent,
   ModalDismissedEvent,
-} from '../../interfaces/ComponentEvents';
-import { ComponentDidAppearEvent, NavigationButtonPressedEvent } from '../../index';
+} from '../../src/interfaces/ComponentEvents';
+import { ComponentDidAppearEvent, NavigationButtonPressedEvent } from '../../src/index';
+import { BottomTabPressedEvent } from '../../src/interfaces/Events';
 
 export const events = {
   navigationButtonPressed: [(_event: NavigationButtonPressedEvent) => {}],
@@ -11,6 +12,7 @@ export const events = {
   componentDidAppear: [(_event: ComponentDidAppearEvent) => {}],
   componentDidDisappear: [(_event: ComponentDidDisappearEvent) => {}],
   modalDismissed: [(_event: ModalDismissedEvent) => {}],
+  bottomTabPressed: [(_event: BottomTabPressedEvent) => {}],
   invokeComponentWillAppear: (event: ComponentWillAppearEvent) => {
     events.componentWillAppear &&
       events.componentWillAppear.forEach((listener) => {
@@ -41,4 +43,10 @@ export const events = {
         listener(event);
       });
   },
+  invokeBottomTabPressed: (event: BottomTabPressedEvent) => {
+    events.bottomTabPressed &&
+      events.bottomTabPressed?.forEach((listener) => {
+        listener(event);
+      });
+  },
 };
diff --git a/node_modules/react-native-navigation/lib/src/Mock/Stores/LayoutStore.ts b/node_modules/react-native-navigation/lib/Mock/Stores/LayoutStore.ts
similarity index 95%
rename from node_modules/react-native-navigation/lib/src/Mock/Stores/LayoutStore.ts
rename to node_modules/react-native-navigation/lib/Mock/Stores/LayoutStore.ts
index 4478473..257a91a 100644
--- a/node_modules/react-native-navigation/lib/src/Mock/Stores/LayoutStore.ts
+++ b/node_modules/react-native-navigation/lib/Mock/Stores/LayoutStore.ts
@@ -2,7 +2,7 @@ import _ from 'lodash';
 import BottomTabsNode from '../Layouts/BottomTabsNode';
 import ParentNode from '../Layouts/ParentNode';
 import LayoutNodeFactory from '../Layouts/LayoutNodeFactory';
-import { Options } from '../../interfaces/Options';
+import { Options } from '../../src/interfaces/Options';
 import StackNode from '../Layouts/StackNode';
 
 const remx = require('remx');
@@ -77,7 +77,8 @@ const setters = remx.setters({
   },
   mergeOptions(componentId: string, options: Options) {
     const layout = getters.getLayoutById(componentId);
-    layout.mergeOptions(options);
+    if (layout) layout.mergeOptions(options);
+    else console.warn(`[RNN error] Merge options failure: cannot find layout for: ${componentId}`);
   },
 });
 
diff --git a/node_modules/react-native-navigation/lib/src/Mock/connect.ts b/node_modules/react-native-navigation/lib/Mock/connect.ts
similarity index 100%
rename from node_modules/react-native-navigation/lib/src/Mock/connect.ts
rename to node_modules/react-native-navigation/lib/Mock/connect.ts
diff --git a/node_modules/react-native-navigation/lib/Mock/constants.d.ts b/node_modules/react-native-navigation/lib/Mock/constants.d.ts
new file mode 100644
index 0000000..8d1f084
--- /dev/null
+++ b/node_modules/react-native-navigation/lib/Mock/constants.d.ts
@@ -0,0 +1,2 @@
+export declare const VISIBLE_SCREEN_TEST_ID = "VISIBLE_SCREEN_TEST_ID";
+export declare const VISIBLE_OVERLAY_TEST_ID = "VISIBLE_OVERLAY_TEST_ID";
diff --git a/node_modules/react-native-navigation/lib/Mock/constants.js b/node_modules/react-native-navigation/lib/Mock/constants.js
new file mode 100644
index 0000000..56d8535
--- /dev/null
+++ b/node_modules/react-native-navigation/lib/Mock/constants.js
@@ -0,0 +1,5 @@
+"use strict";
+Object.defineProperty(exports, "__esModule", { value: true });
+exports.VISIBLE_OVERLAY_TEST_ID = exports.VISIBLE_SCREEN_TEST_ID = void 0;
+exports.VISIBLE_SCREEN_TEST_ID = 'VISIBLE_SCREEN_TEST_ID';
+exports.VISIBLE_OVERLAY_TEST_ID = 'VISIBLE_OVERLAY_TEST_ID';
diff --git a/node_modules/react-native-navigation/lib/src/Mock/constants.ts b/node_modules/react-native-navigation/lib/Mock/constants.ts
similarity index 100%
rename from node_modules/react-native-navigation/lib/src/Mock/constants.ts
rename to node_modules/react-native-navigation/lib/Mock/constants.ts
diff --git a/node_modules/react-native-navigation/lib/Mock/index.d.ts b/node_modules/react-native-navigation/lib/Mock/index.d.ts
new file mode 100644
index 0000000..f949ee0
--- /dev/null
+++ b/node_modules/react-native-navigation/lib/Mock/index.d.ts
@@ -0,0 +1,3 @@
+export declare const ApplicationMock: any;
+export * from './constants';
+export declare function mockNativeComponents(): void;
diff --git a/node_modules/react-native-navigation/lib/Mock/index.js b/node_modules/react-native-navigation/lib/Mock/index.js
new file mode 100644
index 0000000..26e72e8
--- /dev/null
+++ b/node_modules/react-native-navigation/lib/Mock/index.js
@@ -0,0 +1,14 @@
+"use strict";
+Object.defineProperty(exports, "__esModule", { value: true });
+exports.mockNativeComponents = exports.ApplicationMock = void 0;
+const tslib_1 = require("tslib");
+exports.ApplicationMock = require('./Application').Application;
+(0, tslib_1.__exportStar)(require("./constants"), exports);
+function mockNativeComponents() {
+    const { NativeCommandsSender } = require('./mocks/NativeCommandsSender');
+    const { NativeEventsReceiver } = require('./mocks/NativeEventsReceiver');
+    const { AppRegistryService } = require('./mocks/AppRegistryService');
+    const { Navigation } = require('react-native-navigation');
+    Navigation.mockNativeComponents(new NativeCommandsSender(), new NativeEventsReceiver(), new AppRegistryService());
+}
+exports.mockNativeComponents = mockNativeComponents;
diff --git a/node_modules/react-native-navigation/lib/src/Mock/index.ts b/node_modules/react-native-navigation/lib/Mock/index.ts
similarity index 100%
rename from node_modules/react-native-navigation/lib/src/Mock/index.ts
rename to node_modules/react-native-navigation/lib/Mock/index.ts
diff --git a/node_modules/react-native-navigation/lib/src/Mock/mocks/AppRegistryService.ts b/node_modules/react-native-navigation/lib/Mock/mocks/AppRegistryService.ts
similarity index 100%
rename from node_modules/react-native-navigation/lib/src/Mock/mocks/AppRegistryService.ts
rename to node_modules/react-native-navigation/lib/Mock/mocks/AppRegistryService.ts
diff --git a/node_modules/react-native-navigation/lib/src/Mock/mocks/NativeCommandsSender.tsx b/node_modules/react-native-navigation/lib/Mock/mocks/NativeCommandsSender.tsx
similarity index 97%
rename from node_modules/react-native-navigation/lib/src/Mock/mocks/NativeCommandsSender.tsx
rename to node_modules/react-native-navigation/lib/Mock/mocks/NativeCommandsSender.tsx
index 85893df..72c4a75 100644
--- a/node_modules/react-native-navigation/lib/src/Mock/mocks/NativeCommandsSender.tsx
+++ b/node_modules/react-native-navigation/lib/Mock/mocks/NativeCommandsSender.tsx
@@ -1,6 +1,6 @@
 import { LayoutStore } from '../Stores/LayoutStore';
 import LayoutNodeFactory from '../Layouts/LayoutNodeFactory';
-import { LayoutNode } from 'react-native-navigation/commands/LayoutTreeCrawler';
+import { LayoutNode } from '../../src/commands/LayoutTreeCrawler';
 import { events } from '../Stores/EventsStore';
 import _ from 'lodash';
 import ComponentNode from '../Layouts/ComponentNode';
diff --git a/node_modules/react-native-navigation/lib/src/Mock/mocks/NativeEventsReceiver.ts b/node_modules/react-native-navigation/lib/Mock/mocks/NativeEventsReceiver.ts
similarity index 93%
rename from node_modules/react-native-navigation/lib/src/Mock/mocks/NativeEventsReceiver.ts
rename to node_modules/react-native-navigation/lib/Mock/mocks/NativeEventsReceiver.ts
index b6c6adb..91a0685 100644
--- a/node_modules/react-native-navigation/lib/src/Mock/mocks/NativeEventsReceiver.ts
+++ b/node_modules/react-native-navigation/lib/Mock/mocks/NativeEventsReceiver.ts
@@ -11,13 +11,13 @@ import {
   ModalDismissedEvent,
   ScreenPoppedEvent,
   ModalAttemptedToDismissEvent,
-} from '../../interfaces/ComponentEvents';
+} from '../../src/interfaces/ComponentEvents';
 import {
   CommandCompletedEvent,
   BottomTabSelectedEvent,
   BottomTabLongPressedEvent,
   BottomTabPressedEvent,
-} from '../../interfaces/Events';
+} from '../../src/interfaces/Events';
 import { events } from './../Stores/EventsStore';
 
 export class NativeEventsReceiver {
@@ -73,10 +73,13 @@ export class NativeEventsReceiver {
   }
 
   public registerBottomTabPressedListener(
-    _callback: (data: BottomTabPressedEvent) => void
+    callback: (data: BottomTabPressedEvent) => void
   ): EmitterSubscription {
+    events.bottomTabPressed.push(callback);
     return {
-      remove: () => {},
+      remove: () => {
+        _.remove(events.bottomTabPressed, (value) => value === callback);
+      },
     } as EmitterSubscription;
   }
 
diff --git a/node_modules/react-native-navigation/lib/android/app/build.gradle b/node_modules/react-native-navigation/lib/android/app/build.gradle
index 51148fe..9f848de 100644
--- a/node_modules/react-native-navigation/lib/android/app/build.gradle
+++ b/node_modules/react-native-navigation/lib/android/app/build.gradle
@@ -3,27 +3,29 @@ import org.gradle.api.tasks.testing.logging.TestExceptionFormat
 
 apply plugin: 'com.android.library'
 apply plugin: 'kotlin-android'
-apply plugin: 'kotlin-android-extensions'
 
 def safeExtGet(prop, fallback) {
     rootProject.ext.has(prop) ? rootProject.ext.get(prop) : fallback
 }
 
-def DEFAULT_COMPILE_SDK_VERSION = 29
-def DEFAULT_MIN_SDK_VERSION = 19
-def DEFAULT_TARGET_SDK_VERSION = 29
-def kotlinVersion = rootProject.ext.get("RNNKotlinVersion")
-def kotlinStdlib = safeExtGet('RNNKotlinStdlib', 'kotlin-stdlib-jdk8')
-def kotlinCoroutinesCore = safeExtGet('RNNKotlinCoroutinesCore', '1.4.3')
+def safeExtGetFallbackLowerBound(prop, fallback) {
+    Math.max(safeExtGet(prop,fallback),fallback)
+}
 
+def DEFAULT_COMPILE_SDK_VERSION = 30
+def DEFAULT_MIN_SDK_VERSION = 21
+def DEFAULT_TARGET_SDK_VERSION = 30
+def DEFAULT_KOTLIN_VERSION = "1.5.31"
+def DEFAULT_KOTLIN_STDLIB = 'kotlin-stdlib-jdk8'
+def kotlinVersion = safeExtGet("RNNKotlinVersion", DEFAULT_KOTLIN_VERSION)
+def kotlinStdlib = safeExtGet('RNNKotlinStdlib',DEFAULT_KOTLIN_STDLIB )
+def kotlinCoroutinesCore = safeExtGet('RNNKotlinCoroutinesCore', '1.5.2')
 android {
-    compileSdkVersion safeExtGet('compileSdkVersion', DEFAULT_COMPILE_SDK_VERSION)
+    compileSdkVersion safeExtGetFallbackLowerBound('compileSdkVersion', DEFAULT_COMPILE_SDK_VERSION)
 
     defaultConfig {
-        minSdkVersion safeExtGet('minSdkVersion', DEFAULT_MIN_SDK_VERSION)
-        targetSdkVersion safeExtGet('targetSdkVersion', DEFAULT_TARGET_SDK_VERSION)
-        versionCode 1
-        versionName "1.0"
+        minSdkVersion safeExtGetFallbackLowerBound('minSdkVersion', DEFAULT_MIN_SDK_VERSION)
+        targetSdkVersion safeExtGetFallbackLowerBound('targetSdkVersion', DEFAULT_TARGET_SDK_VERSION)
     }
     buildTypes {
         release {
@@ -170,13 +172,13 @@ allprojects { p ->
 }
 
 dependencies {
-    implementation "androidx.core:core-ktx:1.3.2"
+    implementation "androidx.core:core-ktx:1.6.0"
     implementation "org.jetbrains.kotlin:$kotlinStdlib:$kotlinVersion"
     implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$kotlinCoroutinesCore"
     implementation "androidx.constraintlayout:constraintlayout:2.0.4"
 
-    implementation 'androidx.appcompat:appcompat:1.1.0'
-    implementation 'androidx.annotation:annotation:1.1.0'
+    implementation 'androidx.appcompat:appcompat:1.3.1'
+    implementation 'androidx.annotation:annotation:1.2.0'
     implementation 'com.google.android.material:material:1.2.0-alpha03'
 
     implementation 'com.github.wix-playground:ahbottomnavigation:3.3.0'
@@ -188,12 +190,12 @@ dependencies {
     implementation 'com.facebook.react:react-native:+'
 
     // tests
-    testImplementation 'junit:junit:4.12'
-    testImplementation "org.robolectric:robolectric:4.4"
-    testImplementation 'org.assertj:assertj-core:3.8.0'
-    testImplementation 'com.squareup.assertj:assertj-android:1.1.1'
-    testImplementation 'org.mockito:mockito-core:3.4.0'
+    testImplementation 'junit:junit:4.13.2'
+    testImplementation "org.robolectric:robolectric:4.7.2"
+    testImplementation 'org.assertj:assertj-core:3.11.1'
+    testImplementation 'org.mockito:mockito-core:4.0.0'
+    testImplementation 'com.squareup.assertj:assertj-android:1.2.0'
     testImplementation 'org.mockito:mockito-inline:3.4.0'
-    testImplementation "com.nhaarman.mockitokotlin2:mockito-kotlin:2.2.0"
+    testImplementation "org.mockito.kotlin:mockito-kotlin:4.0.0"
     testImplementation "org.jetbrains.kotlin:kotlin-test:$kotlinVersion"
 }
diff --git a/node_modules/react-native-navigation/lib/android/app/src/main/java/com/reactnativenavigation/options/FontOptions.kt b/node_modules/react-native-navigation/lib/android/app/src/main/java/com/reactnativenavigation/options/FontOptions.kt
index bdb2255..c97c32a 100644
--- a/node_modules/react-native-navigation/lib/android/app/src/main/java/com/reactnativenavigation/options/FontOptions.kt
+++ b/node_modules/react-native-navigation/lib/android/app/src/main/java/com/reactnativenavigation/options/FontOptions.kt
@@ -26,11 +26,11 @@ class FontOptions {
 
     @JvmOverloads fun getTypeface(typefaceLoader: TypefaceLoader, defaultTypeface: Typeface? = null): Typeface? {
         if (isDirty) {
-            _typeface = typefaceLoader.getTypeFace(fontFamily.get(""), fontStyle.get(""), fontWeight.get(""))
+            _typeface = typefaceLoader.getTypeFace(fontFamily.get(null), fontStyle.get(""), fontWeight.get(""), defaultTypeface)
             isDirty = false
         }
         return _typeface
-                ?: defaultTypeface?.let { typefaceLoader.getTypeFace(fontFamily.get(""), fontStyle.get(""), fontWeight.get(""), it) }
+                ?: defaultTypeface?.let { typefaceLoader.getTypeFace(fontFamily.get(null), fontStyle.get(""), fontWeight.get(""), it) }
     }
 
     fun mergeWith(other: FontOptions) {
diff --git a/node_modules/react-native-navigation/lib/android/app/src/main/java/com/reactnativenavigation/options/HardwareBackButtonOptions.kt b/node_modules/react-native-navigation/lib/android/app/src/main/java/com/reactnativenavigation/options/HardwareBackButtonOptions.kt
index 4aeee32..1ece4e9 100644
--- a/node_modules/react-native-navigation/lib/android/app/src/main/java/com/reactnativenavigation/options/HardwareBackButtonOptions.kt
+++ b/node_modules/react-native-navigation/lib/android/app/src/main/java/com/reactnativenavigation/options/HardwareBackButtonOptions.kt
@@ -6,10 +6,40 @@ import com.reactnativenavigation.options.parsers.BoolParser
 import org.json.JSONObject
 
 
+sealed class HwBackBottomTabsBehaviour {
+    object Undefined : HwBackBottomTabsBehaviour() {
+        override fun hasValue(): Boolean = false
+    }
+
+    object Exit : HwBackBottomTabsBehaviour()
+    object PrevSelection : HwBackBottomTabsBehaviour()
+    object JumpToFirst : HwBackBottomTabsBehaviour()
+
+    open fun hasValue(): Boolean = true
+
+    companion object {
+        private const val BEHAVIOUR_EXIT = "exit"
+        private const val BEHAVIOUR_PREV = "previous"
+        private const val BEHAVIOUR_FIRST = "first"
+        fun fromString(behaviour: String?): HwBackBottomTabsBehaviour {
+            return when (behaviour) {
+                BEHAVIOUR_PREV -> PrevSelection
+                BEHAVIOUR_FIRST -> JumpToFirst
+                BEHAVIOUR_EXIT -> Exit
+                else -> Undefined
+            }
+        }
+    }
+}
+
 open class HardwareBackButtonOptions(json: JSONObject? = null) {
 
-    @JvmField var dismissModalOnPress: Bool = NullBool()
-    @JvmField var popStackOnPress: Bool = NullBool()
+    @JvmField
+    var dismissModalOnPress: Bool = NullBool()
+
+    @JvmField
+    var popStackOnPress: Bool = NullBool()
+    var bottomTabOnPress: HwBackBottomTabsBehaviour = HwBackBottomTabsBehaviour.Undefined
 
     init {
         parse(json)
@@ -18,16 +48,19 @@ open class HardwareBackButtonOptions(json: JSONObject? = null) {
     fun mergeWith(other: HardwareBackButtonOptions) {
         if (other.dismissModalOnPress.hasValue()) dismissModalOnPress = other.dismissModalOnPress
         if (other.popStackOnPress.hasValue()) popStackOnPress = other.popStackOnPress
+        if (other.bottomTabOnPress.hasValue()) bottomTabOnPress = other.bottomTabOnPress
     }
 
     fun mergeWithDefault(defaultOptions: HardwareBackButtonOptions) {
         if (!dismissModalOnPress.hasValue()) dismissModalOnPress = defaultOptions.dismissModalOnPress
         if (!popStackOnPress.hasValue()) popStackOnPress = defaultOptions.popStackOnPress
+        if (!bottomTabOnPress.hasValue()) bottomTabOnPress = defaultOptions.bottomTabOnPress
     }
 
     private fun parse(json: JSONObject?) {
         json ?: return
         dismissModalOnPress = BoolParser.parse(json, "dismissModalOnPress")
         popStackOnPress = BoolParser.parse(json, "popStackOnPress")
+        bottomTabOnPress = HwBackBottomTabsBehaviour.fromString(json.optString("bottomTabsOnPress"))
     }
 }
\ No newline at end of file
diff --git a/node_modules/react-native-navigation/lib/android/app/src/main/java/com/reactnativenavigation/options/LayoutFactory.java b/node_modules/react-native-navigation/lib/android/app/src/main/java/com/reactnativenavigation/options/LayoutFactory.java
index 7e3ff06..8a66716 100644
--- a/node_modules/react-native-navigation/lib/android/app/src/main/java/com/reactnativenavigation/options/LayoutFactory.java
+++ b/node_modules/react-native-navigation/lib/android/app/src/main/java/com/reactnativenavigation/options/LayoutFactory.java
@@ -1,9 +1,11 @@
 package com.reactnativenavigation.options;
 
 import android.app.Activity;
+import android.content.Context;
 
 import com.facebook.react.ReactInstanceManager;
 import com.facebook.react.bridge.ReactContext;
+import com.reactnativenavigation.NavigationApplication;
 import com.reactnativenavigation.options.parsers.TypefaceLoader;
 import com.reactnativenavigation.react.events.EventEmitter;
 import com.reactnativenavigation.utils.Assertions;
@@ -45,6 +47,8 @@ import androidx.annotation.RestrictTo;
 import static com.reactnativenavigation.options.Options.parse;
 import static com.reactnativenavigation.utils.CollectionUtils.*;
 
+import org.json.JSONObject;
+
 public class LayoutFactory {
 	private Activity activity;
 	private ChildControllersRegistry childRegistry;
@@ -75,15 +79,15 @@ public class LayoutFactory {
 		final ReactContext context = reactInstanceManager.getCurrentReactContext();
 		switch (node.type) {
 			case Component:
-				return createComponent(context, node);
+				return createComponent(node);
 			case ExternalComponent:
 				return createExternalComponent(context, node);
 			case Stack:
-				return createStack(context, node);
+				return createStack(node);
 			case BottomTabs:
-				return createBottomTabs(context, node);
+				return createBottomTabs(node);
 			case SideMenuRoot:
-				return createSideMenuRoot(context, node);
+				return createSideMenuRoot(node);
 			case SideMenuCenter:
 				return createSideMenuContent(node);
 			case SideMenuLeft:
@@ -91,17 +95,17 @@ public class LayoutFactory {
 			case SideMenuRight:
 				return createSideMenuRight(node);
 			case TopTabs:
-				return createTopTabs(context, node);
+				return createTopTabs(node);
 			default:
 				throw new IllegalArgumentException("Invalid node type: " + node.type);
 		}
 	}
 
-	private ViewController<?> createSideMenuRoot(ReactContext context, LayoutNode node) {
+	private ViewController<?> createSideMenuRoot(LayoutNode node) {
 		SideMenuController sideMenuController = new SideMenuController(activity,
 				childRegistry,
 				node.id,
-				parse(context, typefaceManager, node.getOptions()),
+				parseOptions( node.getOptions()),
 				new SideMenuPresenter(),
 				new Presenter(activity, defaultOptions)
 		);
@@ -153,7 +157,7 @@ public class LayoutFactory {
 		return create(node.children.get(0));
 	}
 
-	private ViewController<?> createComponent(ReactContext context, LayoutNode node) {
+	private ViewController<?> createComponent(LayoutNode node) {
 		String id = node.id;
 		String name = node.data.optString("name");
 		return new ComponentViewController(activity,
@@ -161,7 +165,7 @@ public class LayoutFactory {
 				id,
 				name,
 				new ComponentViewCreator(reactInstanceManager),
-				parse(context, typefaceManager, node.getOptions()),
+				parseOptions(node.getOptions()),
 				new Presenter(activity, defaultOptions),
 				new ComponentPresenter(defaultOptions)
 		);
@@ -178,17 +182,17 @@ public class LayoutFactory {
 				reactInstanceManager,
 				new EventEmitter(context),
 				new ExternalComponentPresenter(),
-				parse(context, typefaceManager, node.getOptions())
+				parseOptions(node.getOptions())
 		);
 	}
 
-	private ViewController<?> createStack(ReactContext context, LayoutNode node) {
+	private ViewController<?> createStack(LayoutNode node) {
 		return new StackControllerBuilder(activity, eventEmitter)
 				.setChildren(createChildren(node.children))
 				.setChildRegistry(childRegistry)
 				.setTopBarController(new TopBarController())
 				.setId(node.id)
-				.setInitialOptions(parse(context, typefaceManager, node.getOptions()))
+				.setInitialOptions(parseOptions(node.getOptions()))
 				.setStackPresenter(new StackPresenter(activity,
 						new TitleBarReactViewCreator(reactInstanceManager),
 						new TopBarBackgroundViewCreator(reactInstanceManager),
@@ -210,7 +214,7 @@ public class LayoutFactory {
 		return result;
 	}
 
-	private ViewController<?> createBottomTabs(ReactContext context, LayoutNode node) {
+	private ViewController<?> createBottomTabs(LayoutNode node) {
 		List<ViewController<?>> tabs = map(node.children, this::create);
 		BottomTabsPresenter bottomTabsPresenter = new BottomTabsPresenter(tabs, defaultOptions, new BottomTabsAnimator());
 		return new BottomTabsController(activity,
@@ -219,24 +223,35 @@ public class LayoutFactory {
 				eventEmitter,
 				new ImageLoader(),
 				node.id,
-				parse(context, typefaceManager, node.getOptions()),
+				parseOptions( node.getOptions()),
 				new Presenter(activity, defaultOptions),
 				new BottomTabsAttacher(tabs, bottomTabsPresenter, defaultOptions),
 				bottomTabsPresenter,
 				new BottomTabPresenter(activity, tabs, new ImageLoader(), new TypefaceLoader(activity), defaultOptions));
 	}
 
-	private ViewController<?> createTopTabs(ReactContext context, LayoutNode node) {
+	private ViewController<?> createTopTabs(LayoutNode node) {
 		final List<ViewController<?>> tabs = new ArrayList<>();
 		for (int i = 0; i < node.children.size(); i++) {
 			ViewController<?> tabController = create(node.children.get(i));
-			Options options = parse(context, typefaceManager, node.children.get(i).getOptions());
+			Options options = parseOptions(node.children.get(i).getOptions());
 			options.setTopTabIndex(i);
 			tabs.add(tabController);
 		}
-		return new TopTabsController(activity, childRegistry, node.id, tabs, new TopTabsLayoutCreator(activity, tabs), parse(context, typefaceManager, node.getOptions()), new Presenter(activity, defaultOptions));
+		return new TopTabsController(activity, childRegistry, node.id, tabs, new TopTabsLayoutCreator(activity, tabs)
+				, parseOptions(node.getOptions()), new Presenter(activity, defaultOptions));
 	}
 
+    private Options parseOptions(JSONObject jsonOptions) {
+        Context context = reactInstanceManager.getCurrentReactContext();
+        if (context == null) {
+            context = activity == null ? NavigationApplication.instance : activity;
+        }
+        if (typefaceManager == null) {
+            typefaceManager = new TypefaceLoader(context);
+        }
+        return parse(context, typefaceManager, jsonOptions);
+    }
 	@NonNull
 	@RestrictTo(RestrictTo.Scope.TESTS)
 	public Options getDefaultOptions() {
diff --git a/node_modules/react-native-navigation/lib/android/app/src/main/java/com/reactnativenavigation/options/Options.java b/node_modules/react-native-navigation/lib/android/app/src/main/java/com/reactnativenavigation/options/Options.java
index 262086e..a169c67 100644
--- a/node_modules/react-native-navigation/lib/android/app/src/main/java/com/reactnativenavigation/options/Options.java
+++ b/node_modules/react-native-navigation/lib/android/app/src/main/java/com/reactnativenavigation/options/Options.java
@@ -15,7 +15,7 @@ public class Options {
     public static final Options EMPTY = new Options();
 
     @NonNull
-    public static Options parse(Context context, TypefaceLoader typefaceManager, JSONObject json) {
+    public static Options parse(@NonNull Context context, TypefaceLoader typefaceManager, JSONObject json) {
         Options result = new Options();
         if (json == null) return result;
 
diff --git a/node_modules/react-native-navigation/lib/android/app/src/main/java/com/reactnativenavigation/options/parsers/TypefaceLoader.kt b/node_modules/react-native-navigation/lib/android/app/src/main/java/com/reactnativenavigation/options/parsers/TypefaceLoader.kt
index c1f8fb6..497b1b4 100644
--- a/node_modules/react-native-navigation/lib/android/app/src/main/java/com/reactnativenavigation/options/parsers/TypefaceLoader.kt
+++ b/node_modules/react-native-navigation/lib/android/app/src/main/java/com/reactnativenavigation/options/parsers/TypefaceLoader.kt
@@ -2,21 +2,27 @@ package com.reactnativenavigation.options.parsers
 
 import android.content.Context
 import android.graphics.Typeface
+import com.aurelhubert.ahbottomnavigation.AHTextView
 import com.reactnativenavigation.utils.ReactTypefaceUtils
 
 open class TypefaceLoader(private val context: Context) {
-    @JvmOverloads open fun getTypeFace(
-            fontFamilyName: String?,
-            fontStyle: String?,
-            fontWeight: String?,
-            defaultTypeFace: Typeface? = null
+  open  val defaultTypeFace: Typeface by lazy {
+        AHTextView(context).typeface ?: Typeface.DEFAULT
+    }
+
+    @JvmOverloads
+    open fun getTypeFace(
+        fontFamilyName: String?,
+        fontStyle: String?,
+        fontWeight: String?,
+        defaultTypeFace: Typeface? = null
     ): Typeface? {
         return ReactTypefaceUtils.applyStyles(
-                defaultTypeFace,
-                ReactTypefaceUtils.parseFontStyle(fontStyle),
-                ReactTypefaceUtils.parseFontWeight(fontWeight),
-                fontFamilyName,
-                context.assets
+            defaultTypeFace,
+            ReactTypefaceUtils.parseFontStyle(fontStyle),
+            ReactTypefaceUtils.parseFontWeight(fontWeight),
+            fontFamilyName,
+            context.assets
         )
     }
 }
\ No newline at end of file
diff --git a/node_modules/react-native-navigation/lib/android/app/src/main/java/com/reactnativenavigation/react/NavigationModule.java b/node_modules/react-native-navigation/lib/android/app/src/main/java/com/reactnativenavigation/react/NavigationModule.java
index ccae0c7..2e8acc0 100644
--- a/node_modules/react-native-navigation/lib/android/app/src/main/java/com/reactnativenavigation/react/NavigationModule.java
+++ b/node_modules/react-native-navigation/lib/android/app/src/main/java/com/reactnativenavigation/react/NavigationModule.java
@@ -23,7 +23,7 @@ import com.reactnativenavigation.options.parsers.TypefaceLoader;
 import com.reactnativenavigation.react.events.EventEmitter;
 import com.reactnativenavigation.utils.LaunchArgsParser;
 import com.reactnativenavigation.utils.Now;
-import com.reactnativenavigation.utils.StatusBarUtils;
+import com.reactnativenavigation.utils.SystemUiUtils;
 import com.reactnativenavigation.utils.UiThread;
 import com.reactnativenavigation.utils.UiUtils;
 import com.reactnativenavigation.viewcontrollers.navigator.Navigator;
@@ -34,6 +34,8 @@ import java.util.Objects;
 
 import static com.reactnativenavigation.utils.UiUtils.pxToDp;
 
+import android.app.Activity;
+
 public class NavigationModule extends ReactContextBaseJavaModule {
     private static final String NAME = "RNNBridgeModule";
 
@@ -88,10 +90,11 @@ public class NavigationModule extends ReactContextBaseJavaModule {
 
     private WritableMap createNavigationConstantsMap() {
         ReactApplicationContext ctx = getReactApplicationContext();
+        final Activity currentActivity = ctx.getCurrentActivity();
         WritableMap constants = Arguments.createMap();
         constants.putString(Constants.BACK_BUTTON_JS_KEY, Constants.BACK_BUTTON_ID);
         constants.putDouble(Constants.BOTTOM_TABS_HEIGHT_KEY, pxToDp(ctx, UiUtils.getBottomTabsHeight(ctx)));
-        constants.putDouble(Constants.STATUS_BAR_HEIGHT_KEY, pxToDp(ctx, StatusBarUtils.getStatusBarHeight(ctx)));
+        constants.putDouble(Constants.STATUS_BAR_HEIGHT_KEY, pxToDp(ctx, SystemUiUtils.getStatusBarHeight(currentActivity)));
         constants.putDouble(Constants.TOP_BAR_HEIGHT_KEY, pxToDp(ctx, UiUtils.getTopBarHeight(ctx)));
         return constants;
     }
diff --git a/node_modules/react-native-navigation/lib/android/app/src/main/java/com/reactnativenavigation/react/modal/ModalFrameLayout.kt b/node_modules/react-native-navigation/lib/android/app/src/main/java/com/reactnativenavigation/react/modal/ModalFrameLayout.kt
index 07e0690..8f2ce36 100644
--- a/node_modules/react-native-navigation/lib/android/app/src/main/java/com/reactnativenavigation/react/modal/ModalFrameLayout.kt
+++ b/node_modules/react-native-navigation/lib/android/app/src/main/java/com/reactnativenavigation/react/modal/ModalFrameLayout.kt
@@ -2,7 +2,7 @@ package com.reactnativenavigation.react.modal
 
 import android.widget.FrameLayout
 import com.facebook.react.bridge.ReactContext
-import com.reactnativenavigation.utils.StatusBarUtils
+import com.reactnativenavigation.utils.SystemUiUtils
 
 class ModalFrameLayout(context: ReactContext) : FrameLayout(context) {
     val modalContentLayout = ModalContentLayout(context)
@@ -11,9 +11,9 @@ class ModalFrameLayout(context: ReactContext) : FrameLayout(context) {
         addView(modalContentLayout, MarginLayoutParams(MarginLayoutParams.WRAP_CONTENT, MarginLayoutParams.WRAP_CONTENT)
             .apply {
                 val translucent = context.currentActivity?.window?.let {
-                    StatusBarUtils.isTranslucent(context.currentActivity?.window)
+                    SystemUiUtils.isTranslucent(it)
                 } ?: false
-                topMargin = if (translucent) 0 else StatusBarUtils.getStatusBarHeight(context)
+                topMargin = if (translucent) 0 else SystemUiUtils.getStatusBarHeight(context.currentActivity)
             })
     }
 }
\ No newline at end of file
diff --git a/node_modules/react-native-navigation/lib/android/app/src/main/java/com/reactnativenavigation/react/modal/ModalViewManager.kt b/node_modules/react-native-navigation/lib/android/app/src/main/java/com/reactnativenavigation/react/modal/ModalViewManager.kt
index 23a93c5..2ab4afc 100644
--- a/node_modules/react-native-navigation/lib/android/app/src/main/java/com/reactnativenavigation/react/modal/ModalViewManager.kt
+++ b/node_modules/react-native-navigation/lib/android/app/src/main/java/com/reactnativenavigation/react/modal/ModalViewManager.kt
@@ -1,5 +1,6 @@
 package com.reactnativenavigation.react.modal
 
+import android.app.Activity
 import android.content.Context
 import android.graphics.Point
 import android.view.WindowManager
@@ -21,7 +22,7 @@ import com.reactnativenavigation.options.parseTransitionAnimationOptions
 import com.reactnativenavigation.options.parsers.JSONParser
 import com.reactnativenavigation.react.CommandListener
 import com.reactnativenavigation.react.CommandListenerAdapter
-import com.reactnativenavigation.utils.StatusBarUtils
+import com.reactnativenavigation.utils.SystemUiUtils
 import com.reactnativenavigation.viewcontrollers.navigator.Navigator
 
 private const val MODAL_MANAGER_NAME = "RNNModalViewManager"
@@ -107,18 +108,18 @@ class ModalViewManager(val reactContext: ReactContext) : ViewGroupManager<ModalH
     }
 }
 
-private fun getModalHostSize(context: Context): Point {
+private fun getModalHostSize(activity: Activity): Point {
     val MIN_POINT = Point()
     val MAX_POINT = Point()
     val SIZE_POINT = Point()
-    val wm = context.getSystemService(Context.WINDOW_SERVICE) as WindowManager
+    val wm = activity.getSystemService(Context.WINDOW_SERVICE) as WindowManager
     val display = Assertions.assertNotNull(wm).defaultDisplay
     // getCurrentSizeRange will return the min and max width and height that the window can be
     display.getCurrentSizeRange(MIN_POINT, MAX_POINT)
     // getSize will return the dimensions of the screen in its current orientation
     display.getSize(SIZE_POINT)
     val attrs = intArrayOf(android.R.attr.windowFullscreen)
-    val theme = context.theme
+    val theme = activity.theme
     val ta = theme.obtainStyledAttributes(attrs)
     val windowFullscreen = ta.getBoolean(0, false)
 
@@ -126,7 +127,7 @@ private fun getModalHostSize(context: Context): Point {
     // because Display.getCurrentSizeRange doesn't include it.
     var statusBarHeight = 0
     if (windowFullscreen) {
-        statusBarHeight = StatusBarUtils.getStatusBarHeight(context)
+        statusBarHeight = SystemUiUtils.getStatusBarHeight(activity)
     }
     return if (SIZE_POINT.x < SIZE_POINT.y) {
         // If we are vertical the width value comes from min width and height comes from max height
@@ -140,8 +141,10 @@ private fun getModalHostSize(context: Context): Point {
 private class ModalHostShadowNode : LayoutShadowNode() {
     override fun addChildAt(child: ReactShadowNodeImpl, i: Int) {
         super.addChildAt(child, i)
-        val modalSize = getModalHostSize(themedContext)
-        child.setStyleWidth(modalSize.x.toFloat())
-        child.setStyleHeight(modalSize.y.toFloat())
+        themedContext?.currentActivity?.let {
+            val modalSize = getModalHostSize(it)
+            child.setStyleWidth(modalSize.x.toFloat())
+            child.setStyleHeight(modalSize.y.toFloat())
+        }
     }
 }
diff --git a/node_modules/react-native-navigation/lib/android/app/src/main/java/com/reactnativenavigation/utils/StatusBarUtils.java b/node_modules/react-native-navigation/lib/android/app/src/main/java/com/reactnativenavigation/utils/StatusBarUtils.java
deleted file mode 100644
index 1fb0d92..0000000
--- a/node_modules/react-native-navigation/lib/android/app/src/main/java/com/reactnativenavigation/utils/StatusBarUtils.java
+++ /dev/null
@@ -1,41 +0,0 @@
-package com.reactnativenavigation.utils;
-
-import android.content.Context;
-import android.content.res.Resources;
-import android.os.Build;
-import android.view.Window;
-import android.view.WindowManager;
-
-import static android.view.WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS;
-import static com.reactnativenavigation.utils.UiUtils.dpToPx;
-
-public class StatusBarUtils {
-    private static final int STATUS_BAR_HEIGHT_M = 24;
-    private static final int STATUS_BAR_HEIGHT_L = 25;
-    private static int statusBarHeight = -1;
-
-    public static void saveStatusBarHeight(int height) {
-        statusBarHeight = height;
-    }
-
-    public static int getStatusBarHeight(Context context) {
-        if (statusBarHeight > 0) {
-            return statusBarHeight;
-        }
-        final Resources resources = context.getResources();
-        final int resourceId = resources.getIdentifier("status_bar_height", "dimen", "android");
-        statusBarHeight = resourceId > 0 ?
-                resources.getDimensionPixelSize(resourceId) :
-                dpToPx(context, Build.VERSION.SDK_INT >= Build.VERSION_CODES.M ? STATUS_BAR_HEIGHT_M : STATUS_BAR_HEIGHT_L);
-        return statusBarHeight;
-    }
-
-    public static int getStatusBarHeightDp(Context context) {
-        return (int) UiUtils.pxToDp(context, getStatusBarHeight(context));
-    }
-
-    public static boolean isTranslucent(Window window) {
-        WindowManager.LayoutParams lp = window.getAttributes();
-        return lp != null && (lp.flags & FLAG_TRANSLUCENT_STATUS) == FLAG_TRANSLUCENT_STATUS;
-    }
-}
diff --git a/node_modules/react-native-navigation/lib/android/app/src/main/java/com/reactnativenavigation/utils/SystemUiUtils.kt b/node_modules/react-native-navigation/lib/android/app/src/main/java/com/reactnativenavigation/utils/SystemUiUtils.kt
new file mode 100644
index 0000000..d1133e1
--- /dev/null
+++ b/node_modules/react-native-navigation/lib/android/app/src/main/java/com/reactnativenavigation/utils/SystemUiUtils.kt
@@ -0,0 +1,168 @@
+package com.reactnativenavigation.utils
+
+import android.app.Activity
+import android.graphics.Color
+import android.graphics.Rect
+import android.os.Build
+import android.view.View
+import android.view.Window
+import androidx.annotation.ColorInt
+import androidx.core.view.WindowCompat
+import androidx.core.view.WindowInsetsCompat
+import androidx.core.view.WindowInsetsControllerCompat
+import kotlin.math.abs
+import kotlin.math.ceil
+
+
+object SystemUiUtils {
+    private const val STATUS_BAR_HEIGHT_M = 24
+    private const val STATUS_BAR_HEIGHT_L = 25
+    private const val STATUS_BAR_HEIGHT_TRANSLUCENCY = 0.65f
+    private var statusBarHeight = -1
+    var navigationBarDefaultColor = -1
+        private set
+
+
+    @JvmStatic
+    fun getStatusBarHeight(activity: Activity?): Int {
+        val res = if (statusBarHeight > 0) {
+            statusBarHeight
+        } else {
+            statusBarHeight = activity?.let {
+                val rectangle = Rect()
+                val window: Window = activity.window
+                window.decorView.getWindowVisibleDisplayFrame(rectangle)
+                val statusBarHeight: Int = rectangle.top
+                val contentView = window.findViewById<View>(Window.ID_ANDROID_CONTENT)
+                contentView?.let {
+                    val contentViewTop = contentView.top
+                    abs(contentViewTop - statusBarHeight)
+                }
+            } ?: if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) STATUS_BAR_HEIGHT_M else STATUS_BAR_HEIGHT_L
+            statusBarHeight
+        }
+        return res
+    }
+
+    @JvmStatic
+    fun saveStatusBarHeight(height: Int) {
+        statusBarHeight = height
+    }
+
+
+    @JvmStatic
+    fun getStatusBarHeightDp(activity: Activity?): Int {
+        return UiUtils.pxToDp(activity, getStatusBarHeight(activity).toFloat())
+            .toInt()
+    }
+
+    @JvmStatic
+    fun hideNavigationBar(window: Window?, view: View) {
+        window?.let {
+            WindowCompat.setDecorFitsSystemWindows(window, false)
+            WindowInsetsControllerCompat(window, view).let { controller ->
+                controller.hide(WindowInsetsCompat.Type.navigationBars())
+                controller.systemBarsBehavior = WindowInsetsControllerCompat.BEHAVIOR_SHOW_TRANSIENT_BARS_BY_SWIPE
+            }
+        }
+    }
+
+    @JvmStatic
+    fun showNavigationBar(window: Window?, view: View) {
+        window?.let {
+            WindowCompat.setDecorFitsSystemWindows(window, true)
+            WindowInsetsControllerCompat(window, view).show(WindowInsetsCompat.Type.navigationBars())
+        }
+    }
+
+    @JvmStatic
+    fun setStatusBarColorScheme(window: Window?, view: View, isDark: Boolean) {
+        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.M) return
+
+        window?.let {
+            WindowInsetsControllerCompat(window, view).isAppearanceLightStatusBars = isDark
+           // Workaround: on devices with api 30 status bar icons flickers or get hidden when removing view
+            //turns out it is a bug on such devices, fixed by using system flags until it is fixed.
+            var flags = view.systemUiVisibility
+            flags = if (isDark) {
+                flags or View.SYSTEM_UI_FLAG_LIGHT_STATUS_BAR
+            } else {
+                flags and View.SYSTEM_UI_FLAG_LIGHT_STATUS_BAR.inv()
+            }
+
+            view.systemUiVisibility = flags
+        }
+    }
+
+    @JvmStatic
+    fun setStatusBarTranslucent(window: Window?) {
+        window?.let {
+            setStatusBarColor(window, window.statusBarColor, true)
+        }
+    }
+
+    @JvmStatic
+    fun isTranslucent(window: Window?): Boolean {
+        return window?.let {
+            Color.alpha(it.statusBarColor) < 255
+        } ?: false
+    }
+
+    @JvmStatic
+    fun clearStatusBarTranslucency(window: Window?) {
+        window?.let {
+            setStatusBarColor(it, it.statusBarColor, false)
+        }
+    }
+
+    @JvmStatic
+    fun setStatusBarColor(
+        window: Window?,
+        @ColorInt color: Int,
+        translucent: Boolean
+    ) {
+        val opaqueColor = if (Build.VERSION.SDK_INT < Build.VERSION_CODES.M) {
+            Color.BLACK
+        }else{
+            val alpha = if (translucent) STATUS_BAR_HEIGHT_TRANSLUCENCY else 1f
+            val red: Int = Color.red(color)
+            val green: Int = Color.green(color)
+            val blue: Int = Color.blue(color)
+            Color.argb(ceil(alpha * 255).toInt(), red, green, blue)
+        }
+        window?.statusBarColor = opaqueColor
+    }
+
+    @JvmStatic
+    fun hideStatusBar(window: Window?, view: View) {
+        window?.let {
+            WindowCompat.setDecorFitsSystemWindows(window, false)
+            WindowInsetsControllerCompat(window, view).let { controller ->
+                controller.hide(WindowInsetsCompat.Type.statusBars())
+                controller.systemBarsBehavior = WindowInsetsControllerCompat.BEHAVIOR_SHOW_TRANSIENT_BARS_BY_SWIPE
+            }
+        }
+    }
+
+    @JvmStatic
+    fun showStatusBar(window: Window?, view: View) {
+        window?.let {
+            WindowCompat.setDecorFitsSystemWindows(window, true)
+            WindowInsetsControllerCompat(window, view).show(WindowInsetsCompat.Type.statusBars())
+        }
+    }
+
+    @JvmStatic
+    fun setNavigationBarBackgroundColor(window: Window?, color: Int, lightColor: Boolean) {
+        window?.let {
+            if (navigationBarDefaultColor == -1) {
+                navigationBarDefaultColor = window.navigationBarColor
+            }
+            WindowInsetsControllerCompat(window, window.decorView).let { controller ->
+                controller.isAppearanceLightNavigationBars = lightColor
+            }
+            window.navigationBarColor = color
+        }
+    }
+
+}
\ No newline at end of file
diff --git a/node_modules/react-native-navigation/lib/android/app/src/main/java/com/reactnativenavigation/viewcontrollers/bottomtabs/BottomTabPresenter.java b/node_modules/react-native-navigation/lib/android/app/src/main/java/com/reactnativenavigation/viewcontrollers/bottomtabs/BottomTabPresenter.java
index a7da579..0a49cf6 100644
--- a/node_modules/react-native-navigation/lib/android/app/src/main/java/com/reactnativenavigation/viewcontrollers/bottomtabs/BottomTabPresenter.java
+++ b/node_modules/react-native-navigation/lib/android/app/src/main/java/com/reactnativenavigation/viewcontrollers/bottomtabs/BottomTabPresenter.java
@@ -9,6 +9,7 @@ import android.graphics.drawable.Drawable;
 
 import androidx.annotation.NonNull;
 
+import com.aurelhubert.ahbottomnavigation.AHTextView;
 import com.aurelhubert.ahbottomnavigation.notification.AHNotification;
 import com.reactnativenavigation.options.BottomTabOptions;
 import com.reactnativenavigation.options.DotIndicatorOptions;
@@ -27,6 +28,7 @@ public class BottomTabPresenter {
     private final Context context;
     private final ImageLoader imageLoader;
     private final TypefaceLoader typefaceLoader;
+    private final Typeface defaultTypeface;
     private Options defaultOptions;
     private final BottomTabFinder bottomTabFinder;
     private final LateInit<BottomTabs> bottomTabs = new LateInit<>();
@@ -39,6 +41,7 @@ public class BottomTabPresenter {
         this.bottomTabFinder = new BottomTabFinder(tabs);
         this.imageLoader = imageLoader;
         this.typefaceLoader = typefaceLoader;
+        this.defaultTypeface = typefaceLoader.getDefaultTypeFace();
         this.defaultOptions = defaultOptions;
         defaultDotIndicatorSize = dpToPx(context, 6);
     }
@@ -57,7 +60,7 @@ public class BottomTabPresenter {
                 BottomTabOptions tab = tabs.get(i).resolveCurrentOptions(defaultOptions).bottomTabOptions;
                 bottomTabs.setIconWidth(i, tab.iconWidth.get(null));
                 bottomTabs.setIconHeight(i, tab.iconHeight.get(null));
-                bottomTabs.setTitleTypeface(i, tab.font.getTypeface(typefaceLoader, Typeface.DEFAULT));
+                bottomTabs.setTitleTypeface(i, tab.font.getTypeface(typefaceLoader, defaultTypeface));
                 if (tab.selectedIconColor.canApplyValue()) bottomTabs.setIconActiveColor(i, tab.selectedIconColor.get(null));
                 if (tab.iconColor.canApplyValue()) bottomTabs.setIconInactiveColor(i, tab.iconColor.get(null));
                 bottomTabs.setTitleActiveColor(i, tab.selectedTextColor.get(null));
@@ -86,7 +89,7 @@ public class BottomTabPresenter {
                 BottomTabOptions tab = options.bottomTabOptions;
                 if (tab.iconWidth.hasValue()) bottomTabs.setIconWidth(index, tab.iconWidth.get(null));
                 if (tab.iconHeight.hasValue()) bottomTabs.setIconHeight(index, tab.iconHeight.get(null));
-                if (tab.font.hasValue()) bottomTabs.setTitleTypeface(index, tab.font.getTypeface(typefaceLoader, Typeface.DEFAULT));
+                if (tab.font.hasValue()) bottomTabs.setTitleTypeface(index, tab.font.getTypeface(typefaceLoader, defaultTypeface));
                 if (canMergeColor(tab.selectedIconColor)) bottomTabs.setIconActiveColor(index, tab.selectedIconColor.get());
                 if (canMergeColor(tab.iconColor)) bottomTabs.setIconInactiveColor(index, tab.iconColor.get());
                 if (tab.selectedTextColor.hasValue()) bottomTabs.setTitleActiveColor(index, tab.selectedTextColor.get());
diff --git a/node_modules/react-native-navigation/lib/android/app/src/main/java/com/reactnativenavigation/viewcontrollers/bottomtabs/BottomTabsController.java b/node_modules/react-native-navigation/lib/android/app/src/main/java/com/reactnativenavigation/viewcontrollers/bottomtabs/BottomTabsController.java
index 9e38012..3683e51 100644
--- a/node_modules/react-native-navigation/lib/android/app/src/main/java/com/reactnativenavigation/viewcontrollers/bottomtabs/BottomTabsController.java
+++ b/node_modules/react-native-navigation/lib/android/app/src/main/java/com/reactnativenavigation/viewcontrollers/bottomtabs/BottomTabsController.java
@@ -13,6 +13,7 @@ import androidx.coordinatorlayout.widget.CoordinatorLayout;
 import com.aurelhubert.ahbottomnavigation.AHBottomNavigation;
 import com.aurelhubert.ahbottomnavigation.AHBottomNavigationItem;
 import com.reactnativenavigation.options.BottomTabOptions;
+import com.reactnativenavigation.options.HwBackBottomTabsBehaviour;
 import com.reactnativenavigation.options.Options;
 import com.reactnativenavigation.react.CommandListener;
 import com.reactnativenavigation.react.CommandListenerAdapter;
@@ -29,6 +30,8 @@ import com.reactnativenavigation.views.bottomtabs.BottomTabsContainer;
 import com.reactnativenavigation.views.bottomtabs.BottomTabsLayout;
 
 import java.util.Collection;
+import java.util.Deque;
+import java.util.LinkedList;
 import java.util.List;
 
 import static com.reactnativenavigation.utils.CollectionUtils.forEach;
@@ -39,6 +42,7 @@ public class BottomTabsController extends ParentController<BottomTabsLayout> imp
 
     private BottomTabsContainer bottomTabsContainer;
     private BottomTabs bottomTabs;
+    private final Deque<Integer> selectionStack;
     private final List<ViewController<?>> tabs;
     private final EventEmitter eventEmitter;
     private final ImageLoader imageLoader;
@@ -66,6 +70,7 @@ public class BottomTabsController extends ParentController<BottomTabsLayout> imp
         this.presenter = bottomTabsPresenter;
         this.tabPresenter = bottomTabPresenter;
         forEach(tabs, tab -> tab.setParentController(this));
+        selectionStack = new LinkedList<>();
     }
 
     @Override
@@ -156,7 +161,27 @@ public class BottomTabsController extends ParentController<BottomTabsLayout> imp
 
     @Override
     public boolean handleBack(CommandListener listener) {
-        return !tabs.isEmpty() && tabs.get(bottomTabs.getCurrentItem()).handleBack(listener);
+        final boolean childBack = !tabs.isEmpty() && tabs.get(bottomTabs.getCurrentItem()).handleBack(listener);
+        final Options options = resolveCurrentOptions();
+        if (!childBack) {
+            if (options.hardwareBack.getBottomTabOnPress() instanceof HwBackBottomTabsBehaviour.PrevSelection) {
+                if (!selectionStack.isEmpty()) {
+                    final int prevSelectedTabIndex = selectionStack.poll();
+                    selectTab(prevSelectedTabIndex, false);
+                    return true;
+                }
+            } else if (options.hardwareBack.getBottomTabOnPress() instanceof HwBackBottomTabsBehaviour.JumpToFirst) {
+                if (getSelectedIndex() != 0) {
+                    selectTab(0, false);
+                    return true;
+                } else {
+                    return false;
+                }
+            } else {
+                return false;
+            }
+        }
+        return childBack;
     }
 
     @Override
@@ -203,7 +228,7 @@ public class BottomTabsController extends ParentController<BottomTabsLayout> imp
         });
     }
 
-    int getSelectedIndex() {
+    public int getSelectedIndex() {
         return bottomTabs.getCurrentItem();
     }
 
@@ -239,6 +264,12 @@ public class BottomTabsController extends ParentController<BottomTabsLayout> imp
 
     @Override
     public void selectTab(final int newIndex) {
+        final boolean enableSelectionHistory = resolveCurrentOptions().hardwareBack.getBottomTabOnPress() instanceof HwBackBottomTabsBehaviour.PrevSelection;
+        selectTab(newIndex, enableSelectionHistory);
+    }
+
+    private void selectTab(int newIndex, boolean enableSelectionHistory) {
+        saveTabSelection(newIndex, enableSelectionHistory);
         tabsAttacher.onTabSelected(tabs.get(newIndex));
         getCurrentView().setVisibility(View.INVISIBLE);
         bottomTabs.setCurrentItem(newIndex, false);
@@ -246,6 +277,15 @@ public class BottomTabsController extends ParentController<BottomTabsLayout> imp
         getCurrentChild().onViewDidAppear();
     }
 
+    private void saveTabSelection(int newIndex, boolean enableSelectionHistory) {
+        if (enableSelectionHistory) {
+            if (selectionStack.isEmpty()
+                    || selectionStack.peek() != newIndex
+                    || bottomTabs.getCurrentItem() != newIndex)
+                selectionStack.offerFirst(bottomTabs.getCurrentItem());
+        }
+    }
+
     @NonNull
     private ViewGroup getCurrentView() {
         return tabs.get(bottomTabs.getCurrentItem()).getView();
diff --git a/node_modules/react-native-navigation/lib/android/app/src/main/java/com/reactnativenavigation/viewcontrollers/child/ChildController.java b/node_modules/react-native-navigation/lib/android/app/src/main/java/com/reactnativenavigation/viewcontrollers/child/ChildController.java
index 0fc83e3..3acc41d 100644
--- a/node_modules/react-native-navigation/lib/android/app/src/main/java/com/reactnativenavigation/viewcontrollers/child/ChildController.java
+++ b/node_modules/react-native-navigation/lib/android/app/src/main/java/com/reactnativenavigation/viewcontrollers/child/ChildController.java
@@ -2,12 +2,16 @@ package com.reactnativenavigation.viewcontrollers.child;
 
 import android.app.Activity;
 import android.content.res.Configuration;
+import android.os.Build;
+import android.util.Log;
 import android.view.View;
 import android.view.ViewGroup;
+import android.view.WindowInsets;
 
 import com.reactnativenavigation.options.Options;
+import com.reactnativenavigation.utils.LogKt;
+import com.reactnativenavigation.viewcontrollers.parent.ParentController;
 import com.reactnativenavigation.viewcontrollers.viewcontroller.Presenter;
-import com.reactnativenavigation.utils.StatusBarUtils;
 import com.reactnativenavigation.viewcontrollers.viewcontroller.NoOpYellowBoxDelegate;
 import com.reactnativenavigation.viewcontrollers.navigator.Navigator;
 import com.reactnativenavigation.viewcontrollers.viewcontroller.ViewController;
@@ -15,7 +19,9 @@ import com.reactnativenavigation.viewcontrollers.viewcontroller.overlay.ViewCont
 import com.reactnativenavigation.views.component.Component;
 
 import androidx.annotation.CallSuper;
+import androidx.core.graphics.Insets;
 import androidx.core.view.ViewCompat;
+import androidx.core.view.WindowCompat;
 import androidx.core.view.WindowInsetsCompat;
 
 public abstract class ChildController<T extends ViewGroup> extends ViewController<T> {
@@ -61,7 +67,7 @@ public abstract class ChildController<T extends ViewGroup> extends ViewControlle
     }
 
     public void onViewBroughtToFront() {
-        presenter.onViewBroughtToFront(resolveCurrentOptions());
+        presenter.onViewBroughtToFront(this, resolveCurrentOptions());
     }
 
     @Override
@@ -73,7 +79,7 @@ public abstract class ChildController<T extends ViewGroup> extends ViewControlle
     @Override
     public void mergeOptions(Options options) {
         if (options == Options.EMPTY) return;
-        if (isViewShown()) presenter.mergeOptions(getView(), options);
+        if (isViewShown()) presenter.mergeOptions(this, options);
         super.mergeOptions(options);
         performOnParentController(parentController -> parentController.mergeChildOptions(options, this));
     }
@@ -93,23 +99,13 @@ public abstract class ChildController<T extends ViewGroup> extends ViewControlle
                 getView().getParent() != null;
     }
 
-    private WindowInsetsCompat onApplyWindowInsets(View view, WindowInsetsCompat insets) {
-        StatusBarUtils.saveStatusBarHeight(insets.getSystemWindowInsetTop());
-        return applyWindowInsets(findController(view), insets);
-    }
-
-    protected WindowInsetsCompat applyWindowInsets(ViewController<?> view, WindowInsetsCompat insets) {
-        return insets.replaceSystemWindowInsets(
-                insets.getSystemWindowInsetLeft(),
-                0,
-                insets.getSystemWindowInsetRight(),
-                insets.getSystemWindowInsetBottom()
-        );
+    protected WindowInsetsCompat onApplyWindowInsets(View view, WindowInsetsCompat insets) {
+       return insets;
     }
 
     @Override
     public void onConfigurationChanged(Configuration newConfig) {
         super.onConfigurationChanged(newConfig);
-        presenter.onConfigurationChanged(this,options);
+        presenter.onConfigurationChanged(this, options);
     }
 }
diff --git a/node_modules/react-native-navigation/lib/android/app/src/main/java/com/reactnativenavigation/viewcontrollers/component/ComponentViewController.java b/node_modules/react-native-navigation/lib/android/app/src/main/java/com/reactnativenavigation/viewcontrollers/component/ComponentViewController.java
index 3117dcc..c2fbac7 100644
--- a/node_modules/react-native-navigation/lib/android/app/src/main/java/com/reactnativenavigation/viewcontrollers/component/ComponentViewController.java
+++ b/node_modules/react-native-navigation/lib/android/app/src/main/java/com/reactnativenavigation/viewcontrollers/component/ComponentViewController.java
@@ -4,10 +4,11 @@ import android.app.Activity;
 import android.content.res.Configuration;
 import android.view.View;
 
+import com.reactnativenavigation.utils.LogKt;
 import com.reactnativenavigation.viewcontrollers.viewcontroller.ScrollEventListener;
 import com.reactnativenavigation.options.Options;
 import com.reactnativenavigation.viewcontrollers.viewcontroller.Presenter;
-import com.reactnativenavigation.utils.StatusBarUtils;
+import com.reactnativenavigation.utils.SystemUiUtils;
 import com.reactnativenavigation.viewcontrollers.viewcontroller.ReactViewCreator;
 import com.reactnativenavigation.viewcontrollers.child.ChildController;
 import com.reactnativenavigation.viewcontrollers.child.ChildControllersRegistry;
@@ -15,6 +16,7 @@ import com.reactnativenavigation.viewcontrollers.viewcontroller.ViewController;
 import com.reactnativenavigation.views.component.ComponentLayout;
 
 import androidx.annotation.NonNull;
+import androidx.core.graphics.Insets;
 import androidx.core.view.ViewCompat;
 import androidx.core.view.WindowInsetsCompat;
 
@@ -126,8 +128,9 @@ public class ComponentViewController extends ChildController<ComponentLayout> {
 
     @Override
     public int getTopInset() {
-        int statusBarInset = resolveCurrentOptions(presenter.defaultOptions).statusBar.isHiddenOrDrawBehind() ? 0 : StatusBarUtils.getStatusBarHeight(getActivity());
-        return statusBarInset + perform(getParentController(), 0, p -> p.getTopInset(this));
+        int statusBarInset = resolveCurrentOptions(presenter.defaultOptions).statusBar.isHiddenOrDrawBehind() ? 0 : SystemUiUtils.getStatusBarHeight(getActivity());
+        final Integer perform = perform(getParentController(), 0, p -> p.getTopInset(this));
+        return statusBarInset + perform;
     }
 
     @Override
@@ -136,14 +139,19 @@ public class ComponentViewController extends ChildController<ComponentLayout> {
     }
 
     @Override
-    protected WindowInsetsCompat applyWindowInsets(ViewController<?> view, WindowInsetsCompat insets) {
-        ViewCompat.onApplyWindowInsets(view.getView(), insets.replaceSystemWindowInsets(
-                insets.getSystemWindowInsetLeft(),
-                insets.getSystemWindowInsetTop(),
-                insets.getSystemWindowInsetRight(),
-                Math.max(insets.getSystemWindowInsetBottom() - getBottomInset(), 0)
-        ));
-        return insets;
+    protected WindowInsetsCompat onApplyWindowInsets(View view, WindowInsetsCompat insets) {
+        ViewController<?> viewController = findController(view);
+        if (viewController == null || viewController.getView() == null) return insets;
+        final Insets keyboardInsets = insets.getInsets( WindowInsetsCompat.Type.ime());
+        final Insets systemBarsInsets = insets.getInsets(WindowInsetsCompat.Type.systemBars() );
+        final int visibleNavBar = resolveCurrentOptions(presenter.defaultOptions).navigationBar.isVisible.isTrueOrUndefined()?1:0;
+        final WindowInsetsCompat finalInsets = new WindowInsetsCompat.Builder().setInsets(WindowInsetsCompat.Type.systemBars() | WindowInsetsCompat.Type.ime(),
+                Insets.of(systemBarsInsets.left,
+                        0,
+                        systemBarsInsets.right,
+                        Math.max(visibleNavBar*systemBarsInsets.bottom,keyboardInsets.bottom))
+        ).build();
+        return ViewCompat.onApplyWindowInsets(viewController.getView(), finalInsets);
     }
 
     @Override
diff --git a/node_modules/react-native-navigation/lib/android/app/src/main/java/com/reactnativenavigation/viewcontrollers/externalcomponent/ExternalComponentViewController.java b/node_modules/react-native-navigation/lib/android/app/src/main/java/com/reactnativenavigation/viewcontrollers/externalcomponent/ExternalComponentViewController.java
index 2d63107..e45f3f4 100644
--- a/node_modules/react-native-navigation/lib/android/app/src/main/java/com/reactnativenavigation/viewcontrollers/externalcomponent/ExternalComponentViewController.java
+++ b/node_modules/react-native-navigation/lib/android/app/src/main/java/com/reactnativenavigation/viewcontrollers/externalcomponent/ExternalComponentViewController.java
@@ -10,7 +10,7 @@ import com.reactnativenavigation.viewcontrollers.viewcontroller.Presenter;
 import com.reactnativenavigation.react.events.ComponentType;
 import com.reactnativenavigation.react.events.EventEmitter;
 import com.reactnativenavigation.utils.CoordinatorLayoutUtils;
-import com.reactnativenavigation.utils.StatusBarUtils;
+import com.reactnativenavigation.utils.SystemUiUtils;
 import com.reactnativenavigation.viewcontrollers.child.ChildController;
 import com.reactnativenavigation.viewcontrollers.child.ChildControllersRegistry;
 import com.reactnativenavigation.views.BehaviourDelegate;
@@ -72,7 +72,7 @@ public class ExternalComponentViewController extends ChildController<ExternalCom
 
     @Override
     public int getTopInset() {
-        int statusBarInset = resolveCurrentOptions().statusBar.drawBehind.isTrue() ? 0 : StatusBarUtils.getStatusBarHeight(getActivity());
+        int statusBarInset = resolveCurrentOptions().statusBar.drawBehind.isTrue() ? 0 : SystemUiUtils.getStatusBarHeight(getActivity());
         return statusBarInset + perform(getParentController(), 0, p -> p.getTopInset(this));
     }
 
diff --git a/node_modules/react-native-navigation/lib/android/app/src/main/java/com/reactnativenavigation/viewcontrollers/modal/ModalPresenter.java b/node_modules/react-native-navigation/lib/android/app/src/main/java/com/reactnativenavigation/viewcontrollers/modal/ModalPresenter.java
index 81382b1..3df53a4 100644
--- a/node_modules/react-native-navigation/lib/android/app/src/main/java/com/reactnativenavigation/viewcontrollers/modal/ModalPresenter.java
+++ b/node_modules/react-native-navigation/lib/android/app/src/main/java/com/reactnativenavigation/viewcontrollers/modal/ModalPresenter.java
@@ -90,10 +90,12 @@ public class ModalPresenter {
     }
 
     private void onShowModalEnd(ViewController<?> toAdd, @Nullable ViewController<?> toRemove, CommandListener listener) {
-        toAdd.onViewDidAppear();
-        if (toRemove != null && toAdd.resolveCurrentOptions(defaultOptions).modal.presentationStyle != ModalPresentationStyle.OverCurrentContext) {
-            toRemove.detachView();
-        }
+        toAdd.addOnAppearedListener(()->{
+            toAdd.onViewDidAppear();
+            if (toRemove != null && toAdd.resolveCurrentOptions(defaultOptions).modal.presentationStyle != ModalPresentationStyle.OverCurrentContext) {
+                toRemove.detachView();
+            }
+        });
         listener.onSuccess(toAdd.getId());
     }
 
diff --git a/node_modules/react-native-navigation/lib/android/app/src/main/java/com/reactnativenavigation/viewcontrollers/overlay/OverlayManager.kt b/node_modules/react-native-navigation/lib/android/app/src/main/java/com/reactnativenavigation/viewcontrollers/overlay/OverlayManager.kt
index 7ed36cb..19f3b49 100644
--- a/node_modules/react-native-navigation/lib/android/app/src/main/java/com/reactnativenavigation/viewcontrollers/overlay/OverlayManager.kt
+++ b/node_modules/react-native-navigation/lib/android/app/src/main/java/com/reactnativenavigation/viewcontrollers/overlay/OverlayManager.kt
@@ -28,7 +28,7 @@ class OverlayManager {
     }
 
     fun dismiss(overlaysContainer: ViewGroup, componentId: String, listener: CommandListener) {
-        val overlay = overlayRegistry[componentId]
+        val overlay = overlayRegistry.remove(componentId)
         if (overlay == null) {
             listener.onError("Could not dismiss Overlay. Overlay with id $componentId was not found.")
         } else {
@@ -43,7 +43,13 @@ class OverlayManager {
     }
 
     fun destroy(overlaysContainer: ViewGroup) {
-        overlayRegistry.values.forEach { overlay -> destroyOverlay(overlaysContainer, overlay) }
+        val removedOverlays = overlayRegistry.values.map { overlay ->
+            destroyOverlay(overlaysContainer, overlay)
+            overlay.id
+        }.toList()
+        removedOverlays.forEach {
+            overlayRegistry.remove(it)
+        }
     }
 
     fun size() = overlayRegistry.size
@@ -54,7 +60,6 @@ class OverlayManager {
 
     private fun destroyOverlay(overlaysContainer: ViewGroup, overlay: ViewController<*>) {
         overlay.destroy()
-        overlayRegistry.remove(overlay.id)
         if (isEmpty) overlaysContainer.visibility = View.GONE
     }
 
diff --git a/node_modules/react-native-navigation/lib/android/app/src/main/java/com/reactnativenavigation/viewcontrollers/stack/StackController.java b/node_modules/react-native-navigation/lib/android/app/src/main/java/com/reactnativenavigation/viewcontrollers/stack/StackController.java
index b933b8b..c2fcafa 100644
--- a/node_modules/react-native-navigation/lib/android/app/src/main/java/com/reactnativenavigation/viewcontrollers/stack/StackController.java
+++ b/node_modules/react-native-navigation/lib/android/app/src/main/java/com/reactnativenavigation/viewcontrollers/stack/StackController.java
@@ -5,6 +5,7 @@ import android.content.res.Configuration;
 import android.view.View;
 import android.view.ViewGroup;
 
+import com.facebook.react.ReactRootView;
 import com.reactnativenavigation.options.ButtonOptions;
 import com.reactnativenavigation.options.Options;
 import com.reactnativenavigation.options.StackAnimationOptions;
@@ -68,7 +69,7 @@ public class StackController extends ParentController<StackLayout> {
     @Override
     public void onConfigurationChanged(Configuration newConfig) {
         super.onConfigurationChanged(newConfig);
-        presenter.onConfigurationChanged(resolveCurrentOptions());
+        presenter.onConfigurationChanged(resolveCurrentOptions(), getCurrentChild());
         fabPresenter.onConfigurationChanged(resolveCurrentOptions());
     }
 
@@ -175,9 +176,7 @@ public class StackController extends ParentController<StackLayout> {
                         presenter.getAdditionalPushAnimations(this, child, resolvedOptions),
                         () -> onPushAnimationComplete(child, toRemove, listener));
             } else {
-                child.onViewDidAppear();
-                getView().removeView(toRemove.getView());
-                listener.onSuccess(child.getId());
+                onPushAnimationComplete(child, toRemove, listener);
             }
         } else {
             listener.onSuccess(child.getId());
@@ -191,8 +190,10 @@ public class StackController extends ParentController<StackLayout> {
     }
 
     private void onPushAnimationComplete(ViewController<?> toAdd, ViewController<?> toRemove, CommandListener listener) {
-        toAdd.onViewDidAppear();
-        if (!peek().equals(toRemove)) getView().removeView(toRemove.getView());
+        toAdd.addOnAppearedListener(() -> {
+            toAdd.onViewDidAppear();
+            if (!peek().equals(toRemove)) getView().removeView(toRemove.getView());
+        });
         listener.onSuccess(toAdd.getId());
     }
 
@@ -421,12 +422,19 @@ public class StackController extends ParentController<StackLayout> {
         if (isEmpty()) return;
         ViewController<?> childController = peek();
         ViewGroup child = childController.getView();
-        child.setId(CompatUtils.generateViewId());
+        setChildId(child);
         childController.addOnAppearedListener(this::startChildrenBellowTopChild);
         stackLayout.addView(child, 0, matchParentWithBehaviour(new StackBehaviour(this)));
         presenter.applyInitialChildLayoutOptions(resolveCurrentOptions());
     }
 
+    private void setChildId(ViewGroup child) {
+        //From RN > 64 we can't set id to child that is ReactRootView
+        //see:https://github.com/facebook/react-native/blob/main/ReactAndroid/src/main/java/com/facebook/react/ReactRootView.java#L676
+        if (!(child instanceof ReactRootView))
+            child.setId(CompatUtils.generateViewId());
+    }
+
     private void startChildrenBellowTopChild() {
         ArrayList<ViewController<?>> children = new ArrayList<>(getChildControllers());
         for (int i = children.size() - 2; i >= 0; i--) {
diff --git a/node_modules/react-native-navigation/lib/android/app/src/main/java/com/reactnativenavigation/viewcontrollers/stack/StackPresenter.java b/node_modules/react-native-navigation/lib/android/app/src/main/java/com/reactnativenavigation/viewcontrollers/stack/StackPresenter.java
index 313a9c3..09a79f7 100644
--- a/node_modules/react-native-navigation/lib/android/app/src/main/java/com/reactnativenavigation/viewcontrollers/stack/StackPresenter.java
+++ b/node_modules/react-native-navigation/lib/android/app/src/main/java/com/reactnativenavigation/viewcontrollers/stack/StackPresenter.java
@@ -1,9 +1,17 @@
 package com.reactnativenavigation.viewcontrollers.stack;
 
+import static com.reactnativenavigation.utils.CollectionUtils.filter;
+import static com.reactnativenavigation.utils.CollectionUtils.forEach;
+import static com.reactnativenavigation.utils.CollectionUtils.isNullOrEmpty;
+import static com.reactnativenavigation.utils.CollectionUtils.merge;
+import static com.reactnativenavigation.utils.ObjectUtils.perform;
+import static com.reactnativenavigation.viewcontrollers.stack.topbar.TopBarControllerKt.DEFAULT_BORDER_COLOR;
+
 import android.animation.Animator;
 import android.app.Activity;
 import android.graphics.Color;
 import android.view.View;
+import android.view.ViewGroup;
 import android.view.ViewGroup.LayoutParams;
 import android.view.ViewGroup.MarginLayoutParams;
 import android.widget.FrameLayout;
@@ -28,7 +36,7 @@ import com.reactnativenavigation.options.parsers.TypefaceLoader;
 import com.reactnativenavigation.utils.CollectionUtils;
 import com.reactnativenavigation.utils.ObjectUtils;
 import com.reactnativenavigation.utils.RenderChecker;
-import com.reactnativenavigation.utils.StatusBarUtils;
+import com.reactnativenavigation.utils.SystemUiUtils;
 import com.reactnativenavigation.utils.UiUtils;
 import com.reactnativenavigation.viewcontrollers.bottomtabs.BottomTabsController;
 import com.reactnativenavigation.viewcontrollers.stack.topbar.TopBarBackgroundViewController;
@@ -47,24 +55,11 @@ import com.reactnativenavigation.views.stack.topbar.titlebar.TitleBarReactViewCr
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.HashMap;
-import java.util.LinkedHashMap;
 import java.util.List;
 import java.util.Map;
 import java.util.Objects;
 
-import static com.reactnativenavigation.utils.CollectionUtils.difference;
-import static com.reactnativenavigation.utils.CollectionUtils.filter;
-import static com.reactnativenavigation.utils.CollectionUtils.first;
-import static com.reactnativenavigation.utils.CollectionUtils.forEach;
-import static com.reactnativenavigation.utils.CollectionUtils.getOrDefault;
-import static com.reactnativenavigation.utils.CollectionUtils.isNullOrEmpty;
-import static com.reactnativenavigation.utils.CollectionUtils.keyBy;
-import static com.reactnativenavigation.utils.CollectionUtils.merge;
-import static com.reactnativenavigation.utils.ObjectUtils.perform;
-import static com.reactnativenavigation.utils.ObjectUtils.take;
-
 public class StackPresenter {
-    private static final int DEFAULT_BORDER_COLOR = Color.BLACK;
     private static final double DEFAULT_ELEVATION = 4d;
     private final Activity activity;
 
@@ -79,12 +74,10 @@ public class StackPresenter {
     private final TitleBarButtonCreator buttonCreator;
     private Options defaultOptions;
 
-    private List<ButtonController> currentRightButtons = new ArrayList<>();
-    private List<ButtonController> currentLeftButtons = new ArrayList<>();
     private final Map<View, TitleBarReactViewController> titleControllers = new HashMap();
     private final Map<View, TopBarBackgroundViewController> backgroundControllers = new HashMap();
-    private final Map<View, Map<String, ButtonController>> componentRightButtons = new HashMap();
-    private final Map<View, Map<String, ButtonController>> componentLeftButtons = new HashMap();
+    private final Map<View, Map<String, ButtonController>> rightButtonControllers = new HashMap();
+    private final Map<View, Map<String, ButtonController>> leftButtonControllers = new HashMap();
     private final IconResolver iconResolver;
     private final TypefaceLoader typefaceLoader;
 
@@ -126,8 +119,8 @@ public class StackPresenter {
 
     public boolean isRendered(View component) {
         ArrayList<ViewController<?>> controllers = new ArrayList<>();
-        controllers.addAll(perform(componentRightButtons.get(component), new ArrayList<>(), Map::values));
-        controllers.addAll(perform(componentLeftButtons.get(component), new ArrayList<>(), Map::values));
+        controllers.addAll(perform(rightButtonControllers.get(component), new ArrayList<>(), Map::values));
+        controllers.addAll(perform(leftButtonControllers.get(component), new ArrayList<>(), Map::values));
         controllers.add(backgroundControllers.get(component));
         controllers.add(titleControllers.get(component));
         return renderChecker.areRendered(filter(controllers, ObjectUtils::notNull));
@@ -136,29 +129,21 @@ public class StackPresenter {
     public void mergeOptions(Options options, StackController stack, ViewController<?> currentChild) {
         TopBarOptions resolvedTopBarOptions = options.topBar.copy().mergeWithDefault(stack.resolveChildOptions(currentChild).topBar).mergeWithDefault(defaultOptions.topBar);
         mergeOrientation(options.layout.orientation);
-        //        mergeButtons(topBar, withDefault.topBar.buttons, child);
         mergeTopBarOptions(resolvedTopBarOptions, options, stack, currentChild);
         mergeTopTabsOptions(options.topTabs);
         mergeTopTabOptions(options.topTabOptions);
     }
 
-    public void onConfigurationChanged(Options options) {
+    public void onConfigurationChanged(Options options, ViewController<?> currentChild) {
         if (topBar == null) return;
         Options withDefault = options.copy().withDefaultOptions(defaultOptions);
-        if (currentRightButtons != null && !currentRightButtons.isEmpty())
-            topBarController.applyRightButtons(currentRightButtons);
-        if (currentLeftButtons != null && !currentLeftButtons.isEmpty())
-            topBarController.applyLeftButtons(currentLeftButtons);
         if (withDefault.topBar.buttons.back.visible.isTrue()) {
-            topBar.setBackButton(createButtonController(withDefault.topBar.buttons.back));
+            topBarController.setBackButton(createButtonController(withDefault.topBar.buttons.back));
         }
-        topBar.setOverflowButtonColor(withDefault.topBar.rightButtonColor.get(Color.BLACK));
-        topBar.applyTopTabsColors(withDefault.topTabs.selectedTabColor,
-                withDefault.topTabs.unselectedTabColor);
-        topBar.setBorderColor(withDefault.topBar.borderColor.get(DEFAULT_BORDER_COLOR));
-        topBar.setBackgroundColor(withDefault.topBar.background.color.get(Color.WHITE));
-        topBar.setTitleTextColor(withDefault.topBar.title.color.get(TopBar.DEFAULT_TITLE_COLOR));
-        topBar.setSubtitleColor(withDefault.topBar.subtitle.color.get(TopBar.DEFAULT_TITLE_COLOR));
+        topBarController.onConfigurationChanged(withDefault,
+                leftButtonControllers.get(currentChild.getView()),
+                rightButtonControllers.get(currentChild.getView()));
+
     }
 
     public void applyInitialChildLayoutOptions(Options options) {
@@ -183,10 +168,10 @@ public class StackPresenter {
     public void onChildDestroyed(ViewController<?> child) {
         perform(titleControllers.remove(child.getView()), TitleBarReactViewController::destroy);
         perform(backgroundControllers.remove(child.getView()), TopBarBackgroundViewController::destroy);
-        destroyButtons(componentRightButtons.get(child.getView()));
-        destroyButtons(componentLeftButtons.get(child.getView()));
-        componentRightButtons.remove(child.getView());
-        componentLeftButtons.remove(child.getView());
+        destroyButtons(rightButtonControllers.get(child.getView()));
+        destroyButtons(leftButtonControllers.get(child.getView()));
+        rightButtonControllers.remove(child.getView());
+        leftButtonControllers.remove(child.getView());
     }
 
     private void destroyButtons(@Nullable Map<String, ButtonController> buttons) {
@@ -258,25 +243,39 @@ public class StackPresenter {
     }
 
     private void applyStatusBarDrawBehindOptions(TopBarOptions topBarOptions, Options withDefault) {
-        if(withDefault.statusBar.visible.isTrueOrUndefined() && withDefault.statusBar.drawBehind.isTrue()){
-            topBar.setTopPadding(StatusBarUtils.getStatusBarHeight(activity));
-            topBar.setHeight(topBarOptions.height.get(UiUtils.getTopBarHeightDp(activity)) + StatusBarUtils.getStatusBarHeightDp(activity));
+        if (withDefault.statusBar.visible.isTrueOrUndefined() && withDefault.statusBar.drawBehind.isTrue()) {
+            topBar.setTopPadding(SystemUiUtils.getStatusBarHeight(activity));
+            topBar.setHeight(topBarOptions.height.get(UiUtils.getTopBarHeightDp(activity)) + SystemUiUtils.getStatusBarHeightDp(activity));
+
         } else {
             topBar.setTopPadding(0);
             topBar.setHeight(topBarOptions.height.get(UiUtils.getTopBarHeightDp(activity)));
         }
     }
     
-    private void mergeStatusBarDrawBehindOptions(TopBarOptions topBarOptions, Options toMerge) {
-        if(toMerge.statusBar.drawBehind.hasValue()){
-            if(toMerge.statusBar.visible.isTrueOrUndefined() && toMerge.statusBar.drawBehind.isTrue()){
-                topBar.setTopPadding(StatusBarUtils.getStatusBarHeight(activity));
-                topBar.setHeight(topBarOptions.height.get(UiUtils.getTopBarHeightDp(activity)) + StatusBarUtils.getStatusBarHeightDp(activity));
-            } else {
-                topBar.setTopPadding(0);
-                topBar.setHeight(topBarOptions.height.get(UiUtils.getTopBarHeightDp(activity)));
+    private void mergeStatusBarDrawBehindOptions(TopBarOptions topBarOptions, Options childOptions) {
+        if(childOptions.statusBar.visible.isTrueOrUndefined()){
+            if (childOptions.statusBar.drawBehind.hasValue()) {
+                if (childOptions.statusBar.drawBehind.isTrue()) {
+                    topBar.setTopPadding(SystemUiUtils.getStatusBarHeight(activity));
+                    topBar.setHeight(topBarOptions.height.get(UiUtils.getTopBarHeightDp(activity)) + SystemUiUtils.getStatusBarHeightDp(activity));
+                } else {
+                    topBar.setTopPadding(0);
+                    topBar.setHeight(topBarOptions.height.get(UiUtils.getTopBarHeightDp(activity)));
+                }
+            }
+        }else{
+            if (childOptions.statusBar.drawBehind.hasValue()) {
+                if (childOptions.statusBar.drawBehind.isFalseOrUndefined()) {
+                    topBar.setTopPadding(SystemUiUtils.getStatusBarHeight(activity));
+                    topBar.setHeight(topBarOptions.height.get(UiUtils.getTopBarHeightDp(activity)) + SystemUiUtils.getStatusBarHeightDp(activity));
+                } else {
+                    topBar.setTopPadding(0);
+                    topBar.setHeight(topBarOptions.height.get(UiUtils.getTopBarHeightDp(activity)));
+                }
             }
         }
+
     }
 
     @Nullable
@@ -304,59 +303,21 @@ public class StackPresenter {
     }
 
     private void applyButtons(TopBarOptions options, ViewController<?> child) {
-        if (options.buttons.right != null) {
-            List<ButtonOptions> rightButtons = mergeButtonsWithColor(options.buttons.right,
-                    options.rightButtonColor
-                    , options.rightButtonDisabledColor);
-            List<ButtonController> rightButtonControllers = getOrCreateButtonControllersByInstanceId(componentRightButtons.get(child.getView()), rightButtons);
-            componentRightButtons.put(child.getView(), keyBy(rightButtonControllers, ButtonController::getButtonInstanceId));
-            if (!CollectionUtils.equals(currentRightButtons, rightButtonControllers)) {
-                currentRightButtons = rightButtonControllers;
-                topBarController.applyRightButtons(currentRightButtons);
-            }
-        } else {
-            currentRightButtons = null;
-            topBar.clearRightButtons();
-        }
-
-        if (options.buttons.left != null) {
-            List<ButtonOptions> leftButtons = mergeButtonsWithColor(options.buttons.left,
-                    options.leftButtonColor,
-                    options.leftButtonDisabledColor);
-            List<ButtonController> leftButtonControllers = getOrCreateButtonControllersByInstanceId(componentLeftButtons.get(child.getView()), leftButtons);
-            componentLeftButtons.put(child.getView(), keyBy(leftButtonControllers, ButtonController::getButtonInstanceId));
-            if (!CollectionUtils.equals(currentLeftButtons, leftButtonControllers)) {
-                currentLeftButtons = leftButtonControllers;
-                topBarController.applyLeftButtons(currentLeftButtons);
-            }
-        } else {
-            currentLeftButtons = null;
-            topBar.clearLeftButtons();
-        }
-
-        if (options.buttons.back.visible.isTrue() && !options.buttons.hasLeftButtons()) {
-            topBar.setBackButton(createButtonController(options.buttons.back));
-        }
+        //should be at first in order for next actions to be animated
         if (options.animateRightButtons.hasValue())
-            topBar.animateRightButtons(options.animateRightButtons.isTrue());
+            topBarController.animateRightButtons(options.animateRightButtons.isTrue());
         if (options.animateLeftButtons.hasValue())
-            topBar.animateLeftButtons(options.animateLeftButtons.isTrue());
-        topBar.setOverflowButtonColor(options.rightButtonColor.get(Color.BLACK));
-    }
+            topBarController.animateLeftButtons(options.animateLeftButtons.isTrue());
 
-    private List<ButtonController> getOrCreateButtonControllersByInstanceId(@Nullable Map<String, ButtonController> currentButtons, @Nullable List<ButtonOptions> buttons) {
-        if (buttons == null) return null;
-        Map<String, ButtonController> result = new LinkedHashMap<>();
-        forEach(buttons, b -> result.put(b.instanceId, getOrDefault(currentButtons, b.instanceId, () -> createButtonController(b))));
-        return new ArrayList<>(result.values());
-    }
+        applyRightButtonsOptions(options, child);
+
+        applyLeftButtonsOptions(options, child);
 
-    private List<ButtonController> getOrCreateButtonControllers(@Nullable Map<String, ButtonController> currentButtons, @NonNull List<ButtonOptions> buttons) {
-        ArrayList<ButtonController> result = new ArrayList<>();
-        for (ButtonOptions b : buttons) {
-            result.add(take(first(perform(currentButtons, null, Map::values), button -> button.getButton().equals(b)), createButtonController(b)));
+        if (options.buttons.back.visible.isTrue() && !options.buttons.hasLeftButtons()) {
+            topBarController.setBackButton(createButtonController(options.buttons.back));
         }
-        return result;
+
+        topBar.setOverflowButtonColor(options.rightButtonColor.get(Color.BLACK));
     }
 
     private ButtonController createButtonController(ButtonOptions button) {
@@ -404,7 +365,6 @@ public class StackPresenter {
                 perform(bottomTabsController, null, btc -> btc.getSetStackRootAnimation(appearingOptions))
         );
     }
-
     public void mergeChildOptions(Options toMerge, Options resolvedOptions, StackController stack, ViewController<?> child) {
         TopBarOptions topBar = toMerge.copy().topBar.mergeWithDefault(resolvedOptions.topBar).mergeWithDefault(defaultOptions.topBar);
         mergeOrientation(toMerge.layout.orientation);
@@ -419,8 +379,13 @@ public class StackPresenter {
     }
 
     private void mergeButtons(TopBarOptions options, TopBarOptions optionsToMerge, View child, StackController stack) {
-        mergeRightButtons(options, optionsToMerge.buttons, child);
-        mergeLeftButton(options, optionsToMerge.buttons, child);
+        if (optionsToMerge.animateRightButtons.hasValue())
+            topBarController.animateRightButtons(optionsToMerge.animateRightButtons.isTrue());
+        if (optionsToMerge.animateLeftButtons.hasValue())
+            topBarController.animateLeftButtons(optionsToMerge.animateLeftButtons.isTrue());
+
+        mergeRightButtonsOptions(options, optionsToMerge.buttons, child);
+        mergeLeftButtonsOptions(options, optionsToMerge.buttons, child);
         mergeLeftButtonsColor(child, optionsToMerge.leftButtonColor, optionsToMerge.leftButtonDisabledColor);
         mergeRightButtonsColor(child, optionsToMerge.rightButtonColor, optionsToMerge.rightButtonDisabledColor);
         mergeBackButton(optionsToMerge.buttons, stack);
@@ -428,7 +393,7 @@ public class StackPresenter {
 
     private void mergeLeftButtonsColor(View child, ThemeColour color, ThemeColour disabledColor) {
         if (color.hasValue() || disabledColor.hasValue()) {
-            Map<String, ButtonController> stringButtonControllerMap = componentLeftButtons.get(child);
+            Map<String, ButtonController> stringButtonControllerMap = leftButtonControllers.get(child);
             if (stringButtonControllerMap != null) {
                 forEach(stringButtonControllerMap.values(), (btnController) -> {
                     if (color.hasValue()) {
@@ -444,7 +409,7 @@ public class StackPresenter {
 
     private void mergeRightButtonsColor(View child, ThemeColour color, ThemeColour disabledColor) {
         if (color.hasValue() || disabledColor.hasValue()) {
-            Map<String, ButtonController> stringButtonControllerMap = componentRightButtons.get(child);
+            Map<String, ButtonController> stringButtonControllerMap = rightButtonControllers.get(child);
             if (stringButtonControllerMap != null) {
                 forEach(stringButtonControllerMap.values(), (btnController) -> {
                     if (color.hasValue()) {
@@ -458,40 +423,65 @@ public class StackPresenter {
         }
     }
 
-    private void mergeRightButtons(TopBarOptions options, TopBarButtons buttons, View child) {
-        if (buttons.right == null) return;
-        List<ButtonOptions> rightButtons = mergeButtonsWithColor(buttons.right, options.rightButtonColor, options.rightButtonDisabledColor);
-        List<ButtonController> toMerge = getOrCreateButtonControllers(componentRightButtons.get(child), rightButtons);
-        List<ButtonController> toRemove = difference(currentRightButtons, toMerge, ButtonController::areButtonsEqual);
-        forEach(toRemove, ButtonController::destroy);
+    private void applyLeftButtonsOptions(TopBarOptions options, ViewController<?> child) {
+        if (options.buttons.left != null) {
+            List<ButtonOptions> leftButtons = mergeButtonsWithColor(options.buttons.left,
+                    options.leftButtonColor
+                    , options.leftButtonDisabledColor);
+            final ViewGroup childView = child.getView();
+            final Map<String, ButtonController> btnControllers = getOrCreateButtonControllerMap(childView, leftButtonControllers);
+            topBarController.applyLeftButtonsOptions(btnControllers, leftButtons, this::createButtonController);
+        } else {
+            topBarController.clearLeftButtons();
+        }
+    }
 
-        if (!CollectionUtils.equals(currentRightButtons, toMerge)) {
-            componentRightButtons.put(child, keyBy(toMerge, ButtonController::getButtonInstanceId));
-            topBarController.mergeRightButtons(toMerge, toRemove);
-            currentRightButtons = toMerge;
+    private void applyRightButtonsOptions(TopBarOptions options, ViewController<?> child) {
+        if (options.buttons.right != null) {
+            List<ButtonOptions> rightButtons = mergeButtonsWithColor(options.buttons.right,
+                    options.rightButtonColor
+                    , options.rightButtonDisabledColor);
+            final ViewGroup childView = child.getView();
+            final Map<String, ButtonController> btnControllers = getOrCreateButtonControllerMap(childView, rightButtonControllers);
+            topBarController.applyRightButtonsOptions(btnControllers, rightButtons, this::createButtonController);
+        } else {
+            topBarController.clearRightButtons();
         }
+    }
+
+    private void mergeRightButtonsOptions(TopBarOptions options, TopBarButtons buttons, View child) {
+        if (buttons.right == null) return;
+        List<ButtonOptions> rightButtons = mergeButtonsWithColor(buttons.right, options.rightButtonColor,
+                options.rightButtonDisabledColor);
+        final Map<String, ButtonController> btnControllers = getOrCreateButtonControllerMap(child, rightButtonControllers);
+        topBarController.mergeRightButtonsOptions(btnControllers, rightButtons, this::createButtonController);
         if (options.rightButtonColor.hasValue()) topBar.setOverflowButtonColor(options.rightButtonColor.get());
     }
 
-    private void mergeLeftButton(TopBarOptions options, TopBarButtons buttons, View child) {
+    private void mergeLeftButtonsOptions(TopBarOptions options, TopBarButtons buttons, View child) {
         if (buttons.left == null) return;
-        List<ButtonOptions> leftButtons = mergeButtonsWithColor(buttons.left, options.leftButtonColor, options.leftButtonDisabledColor);
-        List<ButtonController> toMerge = getOrCreateButtonControllers(componentLeftButtons.get(child), leftButtons);
-        List<ButtonController> toRemove = difference(currentLeftButtons, toMerge, ButtonController::areButtonsEqual);
-        forEach(toRemove, ButtonController::destroy);
-        if (!CollectionUtils.equals(currentLeftButtons, toMerge)) {
-            componentLeftButtons.put(child, keyBy(toMerge, ButtonController::getButtonInstanceId));
-            topBarController.mergeLeftButtons(toMerge, toRemove);
-            currentLeftButtons = toMerge;
-        }
+        List<ButtonOptions> leftButtons = mergeButtonsWithColor(buttons.left, options.leftButtonColor,
+                options.leftButtonDisabledColor);
+        final Map<String, ButtonController> btnControllers = getOrCreateButtonControllerMap(child, leftButtonControllers);
+        topBarController.mergeLeftButtonsOptions(btnControllers, leftButtons, this::createButtonController);
+        if (options.leftButtonColor.hasValue()) topBar.setOverflowButtonColor(options.leftButtonColor.get());
+    }
+
+    @NonNull
+    private Map<String, ButtonController> getOrCreateButtonControllerMap(View child, Map<View, Map<String, ButtonController>> buttonControllers) {
+        final Map<String, ButtonController> controllerMap = buttonControllers.get(child);
+        final Map<String, ButtonController> btnControllers = controllerMap != null ? controllerMap : new HashMap<>();
+        if (controllerMap == null)
+            buttonControllers.put(child, btnControllers);
+        return btnControllers;
     }
 
     private void mergeBackButton(TopBarButtons buttons, StackController stack) {
         if (buttons.back.hasValue() && isNullOrEmpty(buttons.left)) {
             if (buttons.back.visible.isFalse()) {
-                topBar.clearBackButton();
+                topBarController.clearBackButton();
             } else if (stack.size() > 1) {
-                topBar.setBackButton(createButtonController(buttons.back));
+                topBarController.setBackButton(createButtonController(buttons.back));
             }
         }
     }
@@ -508,22 +498,21 @@ public class StackPresenter {
         return result;
     }
 
-    private void mergeTopBarOptions(TopBarOptions resolveOptions, Options options, StackController stack, ViewController<?> child) {
-        TopBarOptions topBarOptions = options.topBar;
+    private void mergeTopBarOptions(TopBarOptions resolveOptions, Options toMerge, StackController stack,
+                                    ViewController<?> child) {
+        TopBarOptions topBarOptions = toMerge.topBar;
         final View component = child.getView();
-        if (options.layout.direction.hasValue()) topBar.setLayoutDirection(options.layout.direction);
+        if (toMerge.layout.direction.hasValue()) topBar.setLayoutDirection(toMerge.layout.direction);
         if (topBarOptions.height.hasValue()) topBar.setHeight(topBarOptions.height.get());
         if (topBarOptions.elevation.hasValue()) topBar.setElevation(topBarOptions.elevation.get());
         if (topBarOptions.topMargin.hasValue() && topBar.getLayoutParams() instanceof MarginLayoutParams) {
             ((MarginLayoutParams) topBar.getLayoutParams()).topMargin = UiUtils.dpToPx(activity, topBarOptions.topMargin.get());
         }
-        mergeStatusBarDrawBehindOptions(resolveOptions,options);
+        Options childOptions = stack.resolveChildOptions(child).mergeWith(toMerge).withDefaultOptions(defaultOptions);
+        mergeStatusBarDrawBehindOptions(resolveOptions, childOptions);
         if (topBarOptions.title.height.hasValue()) topBar.setTitleHeight(topBarOptions.title.height.get());
         if (topBarOptions.title.topMargin.hasValue()) topBar.setTitleTopMargin(topBarOptions.title.topMargin.get());
-        if (topBarOptions.animateLeftButtons.hasValue())
-            topBar.animateLeftButtons(topBarOptions.animateLeftButtons.isTrue());
-        if (topBarOptions.animateRightButtons.hasValue())
-            topBar.animateRightButtons(topBarOptions.animateRightButtons.isTrue());
+
         if (topBarOptions.title.component.hasValue()) {
             TitleBarReactViewController controller = findTitleComponent(topBarOptions.title.component);
             if (controller == null) {
@@ -646,8 +635,8 @@ public class StackPresenter {
 
     @RestrictTo(RestrictTo.Scope.TESTS)
     public void setComponentsButtonController(View child, ButtonController rightController, ButtonController leftController) {
-        forEach(componentLeftButtons.get(child).keySet(), (key) -> componentLeftButtons.get(child).put(key, leftController));
-        forEach(componentRightButtons.get(child).keySet(), (key) -> componentRightButtons.get(child).put(key, rightController));
+        forEach(leftButtonControllers.get(child).keySet(), (key) -> leftButtonControllers.get(child).put(key, leftController));
+        forEach(rightButtonControllers.get(child).keySet(), (key) -> rightButtonControllers.get(child).put(key, rightController));
     }
 
 
@@ -657,11 +646,11 @@ public class StackPresenter {
     }
 
     private List<ButtonController> getRightButtons(View child) {
-        return componentRightButtons.containsKey(child) ? new ArrayList<>(componentRightButtons.get(child).values()) : null;
+        return rightButtonControllers.containsKey(child) ? new ArrayList<>(rightButtonControllers.get(child).values()) : null;
     }
 
     private List<ButtonController> getLeftButtons(View child) {
-        return componentLeftButtons.containsKey(child) ? new ArrayList<>(componentLeftButtons.get(child).values()) : null;
+        return leftButtonControllers.containsKey(child) ? new ArrayList<>(leftButtonControllers.get(child).values()) : null;
     }
 
     private void applyStatusBarInsets(StackController stack, ViewController<?> child) {
@@ -678,7 +667,7 @@ public class StackPresenter {
     private int getTopBarTopMargin(StackController stack, ViewController<?> child) {
         Options withDefault = stack.resolveChildOptions(child).withDefaultOptions(defaultOptions);
         int topMargin = UiUtils.dpToPx(activity, withDefault.topBar.topMargin.get(0));
-        int statusBarInset = withDefault.statusBar.visible.isTrueOrUndefined() && !withDefault.statusBar.drawBehind.isTrue() ? StatusBarUtils.getStatusBarHeight(child.getActivity()) : 0;
+        int statusBarInset = withDefault.statusBar.visible.isTrueOrUndefined() && !withDefault.statusBar.drawBehind.isTrue() ? SystemUiUtils.getStatusBarHeight(child.getActivity()) : 0;
         return topMargin + statusBarInset;
     }
 
diff --git a/node_modules/react-native-navigation/lib/android/app/src/main/java/com/reactnativenavigation/viewcontrollers/stack/topbar/TopBarController.kt b/node_modules/react-native-navigation/lib/android/app/src/main/java/com/reactnativenavigation/viewcontrollers/stack/topbar/TopBarController.kt
index f0ac09d..09a27f6 100644
--- a/node_modules/react-native-navigation/lib/android/app/src/main/java/com/reactnativenavigation/viewcontrollers/stack/topbar/TopBarController.kt
+++ b/node_modules/react-native-navigation/lib/android/app/src/main/java/com/reactnativenavigation/viewcontrollers/stack/topbar/TopBarController.kt
@@ -2,13 +2,16 @@ package com.reactnativenavigation.viewcontrollers.stack.topbar
 
 import android.animation.Animator
 import android.content.Context
+import android.graphics.Color
 import android.view.MenuItem
 import android.view.View
+import androidx.transition.AutoTransition
+import androidx.transition.TransitionManager
 import androidx.viewpager.widget.ViewPager
 import com.reactnativenavigation.options.Alignment
 import com.reactnativenavigation.options.AnimationOptions
+import com.reactnativenavigation.options.ButtonOptions
 import com.reactnativenavigation.options.Options
-import com.reactnativenavigation.utils.CollectionUtils.forEachIndexed
 import com.reactnativenavigation.utils.ViewUtils
 import com.reactnativenavigation.utils.resetViewProperties
 import com.reactnativenavigation.viewcontrollers.stack.topbar.button.ButtonController
@@ -17,12 +20,13 @@ import com.reactnativenavigation.views.stack.StackLayout
 import com.reactnativenavigation.views.stack.topbar.TopBar
 import com.reactnativenavigation.views.stack.topbar.titlebar.ButtonBar
 
+const val DEFAULT_BORDER_COLOR = Color.BLACK
 
 open class TopBarController(private val animator: TopBarAnimator = TopBarAnimator()) {
     lateinit var view: TopBar
     private lateinit var leftButtonBar: ButtonBar
     private lateinit var rightButtonBar: ButtonBar
-
+    private val buttonsTransition = AutoTransition()
 
     val height: Int
         get() = view.height
@@ -54,26 +58,26 @@ open class TopBarController(private val animator: TopBarAnimator = TopBarAnimato
     fun getPushAnimation(appearingOptions: Options, additionalDy: Float = 0f): Animator? {
         if (appearingOptions.topBar.animate.isFalse) return null
         return animator.getPushAnimation(
-                appearingOptions.animations.push.topBar,
-                appearingOptions.topBar.visible,
-                additionalDy
+            appearingOptions.animations.push.topBar,
+            appearingOptions.topBar.visible,
+            additionalDy
         )
     }
 
     fun getPopAnimation(appearingOptions: Options, disappearingOptions: Options): Animator? {
         if (appearingOptions.topBar.animate.isFalse) return null
         return animator.getPopAnimation(
-                disappearingOptions.animations.pop.topBar,
-                appearingOptions.topBar.visible
+            disappearingOptions.animations.pop.topBar,
+            appearingOptions.topBar.visible
         )
     }
 
     fun getSetStackRootAnimation(appearingOptions: Options, additionalDy: Float = 0f): Animator? {
         if (appearingOptions.topBar.animate.isFalse) return null
         return animator.getSetStackRootAnimation(
-                appearingOptions.animations.setStackRoot.topBar,
-                appearingOptions.topBar.visible,
-                additionalDy
+            appearingOptions.animations.setStackRoot.topBar,
+            appearingOptions.topBar.visible,
+            additionalDy
         )
     }
 
@@ -105,25 +109,182 @@ open class TopBarController(private val animator: TopBarAnimator = TopBarAnimato
         view.alignTitleComponent(alignment)
     }
 
-    fun applyRightButtons(toAdd: List<ButtonController>) {
+    fun clearRightButtons() {
         view.clearRightButtons()
-        toAdd.reversed().forEachIndexed { i, b -> b.addToMenu(rightButtonBar, i * 10) }
     }
 
-    fun mergeRightButtons(toAdd: List<ButtonController>, toRemove: List<ButtonController>) {
-        toRemove.forEach { view.removeRightButton(it) }
-        toAdd.reversed().forEachIndexed { i, b -> b.addToMenu(rightButtonBar, i * 10) }
+    fun clearLeftButtons() {
+        view.clearLeftButtons()
     }
 
-    open fun applyLeftButtons(toAdd: List<ButtonController>) {
+    fun clearBackButton() {
         view.clearBackButton()
-        view.clearLeftButtons()
-        forEachIndexed(toAdd) { b: ButtonController, i: Int -> b.addToMenu(leftButtonBar, i * 10) }
     }
 
-    open fun mergeLeftButtons(toAdd: List<ButtonController>, toRemove: List<ButtonController>) {
-        view.clearBackButton()
-        toRemove.forEach { view.removeLeftButton(it) }
-        forEachIndexed(toAdd) { b: ButtonController, i: Int -> b.addToMenu(leftButtonBar, i * 10) }
+    fun setBackButton(backButton: ButtonController?) {
+        backButton?.let { view.setBackButton(it) }
+    }
+
+    fun animateRightButtons(shouldAnimate: Boolean) {
+        view.animateRightButtons(shouldAnimate)
+    }
+
+    fun animateLeftButtons(shouldAnimate: Boolean) {
+        view.animateLeftButtons(shouldAnimate)
+    }
+
+    fun mergeRightButtonsOptions(
+        btnControllers: MutableMap<String, ButtonController>,
+        rightButtons: List<ButtonOptions>,
+        controllerCreator: (ButtonOptions) -> ButtonController
+    ) {
+        mergeButtonOptions(btnControllers, rightButtons.reversed(), controllerCreator, rightButtonBar)
+    }
+
+    fun mergeLeftButtonsOptions(
+        btnControllers: MutableMap<String, ButtonController>,
+        leftButtons: List<ButtonOptions>,
+        controllerCreator: (ButtonOptions) -> ButtonController
+    ) {
+        clearBackButton()
+        mergeButtonOptions(btnControllers, leftButtons, controllerCreator, leftButtonBar)
+    }
+
+    fun applyRightButtonsOptions(
+        btnControllers: MutableMap<String, ButtonController>,
+        rightButtons: List<ButtonOptions>,
+        controllerCreator: (ButtonOptions) -> ButtonController
+    ) {
+        applyButtonsOptions(
+            btnControllers,
+            rightButtons.reversed(),
+            controllerCreator,
+            rightButtonBar
+        )
+    }
+
+    fun applyLeftButtonsOptions(
+        btnControllers: MutableMap<String, ButtonController>,
+        leftButtons: List<ButtonOptions>,
+        controllerCreator: (ButtonOptions) -> ButtonController
+    ) {
+        applyButtonsOptions(btnControllers, leftButtons, controllerCreator, leftButtonBar)
+    }
+
+    private fun applyButtonsOptions(
+        btnControllers: MutableMap<String, ButtonController>,
+        buttons: List<ButtonOptions>,
+        controllerCreator: (ButtonOptions) -> ButtonController,
+        buttonBar: ButtonBar
+    ) {
+        if (buttonBar.shouldAnimate)
+            TransitionManager.beginDelayedTransition(buttonBar, buttonsTransition)
+
+        buttonBar.clearButtons()
+        buttons.forEachIndexed { index, it ->
+            val order = index * 10
+            val newController = if (btnControllers.containsKey(it.id)) {
+                btnControllers.remove(it.id)
+            } else {
+                controllerCreator(it)
+            }!!
+
+            newController.addToMenu(buttonBar, order)
+            btnControllers[it.id] = newController
+        }
+    }
+
+
+    private fun mergeButtonOptions(
+        btnControllers: MutableMap<String, ButtonController>,
+        buttons: List<ButtonOptions>,
+        controllerCreator: (ButtonOptions) -> ButtonController,
+        buttonBar: ButtonBar
+    ) {
+        fun hasChangedOrder(): Boolean {
+            val values = btnControllers.values
+            return buttons.filterIndexed { index, buttonOptions ->
+                val buttonController = btnControllers[buttonOptions.id]
+                values.indexOf(buttonController) == index
+            }.size != buttons.size
+        }
+
+        fun sameIdDifferentCompId(
+            toUpdate: MutableMap<String, Int>,
+            ctrl: Map.Entry<String, ButtonController>,
+            buttons: List<ButtonOptions>
+        ) = if (toUpdate.containsKey(ctrl.key)
+            && ctrl.value.button.hasComponent()
+            && buttons[toUpdate[ctrl.key]!!].component.componentId != ctrl.value.button.component.componentId
+        ) {
+            toUpdate.remove(ctrl.key)
+            true
+        } else false
+
+        val requestedButtons = buttons.mapIndexed { index, buttonOptions -> buttonOptions.id to index }.toMap()
+        var toUpdate = requestedButtons.filter {
+            btnControllers[it.key]?.areButtonOptionsChanged(buttons[it.value]) ?: false
+        }.toMutableMap()
+        var toAdd = requestedButtons.filter { !btnControllers.containsKey(it.key) }
+        var toRemove = btnControllers.filter { ctrl -> !requestedButtons.containsKey(ctrl.key) }
+        val toDestroy = btnControllers.filter { ctrl -> sameIdDifferentCompId(toUpdate, ctrl, buttons) }
+            .toMutableMap().apply { this.putAll(toRemove) }
+
+        fun  needsRebuild(): Boolean {
+           return if (toUpdate.size == buttons.size) {
+                hasChangedOrder()
+            } else toAdd.isNotEmpty() || toRemove.isNotEmpty()
+        }
+
+        if (needsRebuild()) {
+            toUpdate = mutableMapOf()
+            toAdd = requestedButtons
+            toRemove = btnControllers.toMap()
+            if (buttonBar.shouldAnimate)
+                TransitionManager.beginDelayedTransition(buttonBar, buttonsTransition)
+        }
+
+        toUpdate.forEach {
+            val button = buttons[it.value]
+            btnControllers[button.id]?.mergeButtonOptions(button, buttonBar)
+        }
+        toRemove.forEach {
+            buttonBar.removeButton(it.value.buttonIntId)
+        }
+        toDestroy.values.forEach {
+            btnControllers.remove(it.id)
+            it.destroy()
+        }
+        toAdd.forEach {
+            val button = buttons[it.value]
+            val order = it.value * 10
+            val newController = btnControllers[button.id] ?: controllerCreator(button)
+            newController.addToMenu(buttonBar, order)
+            btnControllers[button.id] = newController
+        }
+    }
+
+
+    fun onConfigurationChanged(
+        options: Options,
+        leftBtnControllers: MutableMap<String, ButtonController>?,
+        rightBtnControllers: MutableMap<String, ButtonController>?
+    ) {
+        leftBtnControllers?.values?.forEach {
+            it.onConfigurationChanged(leftButtonBar)
+        }
+        rightBtnControllers?.values?.forEach {
+            it.onConfigurationChanged(rightButtonBar)
+        }
+
+        view.setOverflowButtonColor(options.topBar.rightButtonColor.get(Color.BLACK)!!)
+        view.applyTopTabsColors(
+            options.topTabs.selectedTabColor,
+            options.topTabs.unselectedTabColor
+        )
+        view.setBorderColor(options.topBar.borderColor.get(DEFAULT_BORDER_COLOR)!!)
+        view.setBackgroundColor(options.topBar.background.color.get(Color.WHITE)!!)
+        view.setTitleTextColor(options.topBar.title.color.get(TopBar.DEFAULT_TITLE_COLOR)!!)
+        view.setSubtitleColor(options.topBar.subtitle.color.get(TopBar.DEFAULT_TITLE_COLOR)!!)
     }
 }
\ No newline at end of file
diff --git a/node_modules/react-native-navigation/lib/android/app/src/main/java/com/reactnativenavigation/viewcontrollers/stack/topbar/button/ButtonController.kt b/node_modules/react-native-navigation/lib/android/app/src/main/java/com/reactnativenavigation/viewcontrollers/stack/topbar/button/ButtonController.kt
index b18cb11..22ce11f 100644
--- a/node_modules/react-native-navigation/lib/android/app/src/main/java/com/reactnativenavigation/viewcontrollers/stack/topbar/button/ButtonController.kt
+++ b/node_modules/react-native-navigation/lib/android/app/src/main/java/com/reactnativenavigation/viewcontrollers/stack/topbar/button/ButtonController.kt
@@ -71,6 +71,10 @@ open class ButtonController(activity: Activity,
         return if (other.id != id) false else button.equals(other.button)
     }
 
+    fun areButtonOptionsChanged(otherOptions:ButtonOptions):Boolean{
+        return otherOptions.id == id  && !button.equals(otherOptions)
+    }
+
     fun applyNavigationIcon(toolbar: Toolbar) {
         presenter.applyNavigationIcon(toolbar) {
             onPressListener.onPress(it)
@@ -83,13 +87,30 @@ open class ButtonController(activity: Activity,
 
     fun addToMenu(buttonBar: ButtonBar, order: Int) {
         if (button.component.hasValue() && buttonBar.containsButton(menuItem, order)) return
-        buttonBar.menu.removeItem(button.intId)
-        menuItem = buttonBar.addButton(Menu.NONE,
+            buttonBar.menu.removeItem(button.intId)
+            menuItem = buttonBar.addButton(Menu.NONE,
                 button.intId,
                 order,
                 presenter.styledText)?.also { menuItem ->
-            menuItem.setOnMenuItemClickListener(this@ButtonController)
-            presenter.applyOptions(buttonBar, menuItem, this@ButtonController::getView)
+                menuItem.setOnMenuItemClickListener(this@ButtonController)
+                presenter.applyOptions(buttonBar, menuItem, this@ButtonController::getView)
+            }
+    }
+
+    fun mergeButtonOptions(optionsToMerge: ButtonOptions,buttonBar: ButtonBar) {
+        button.mergeWith(optionsToMerge)
+        presenter.button = this.button
+        buttonBar.getButtonById(button.intId)?.let {
+                menuItem->
+            presenter.applyOptions(buttonBar,menuItem,this::getView)
         }
     }
+
+    fun onConfigurationChanged(buttonBar: ButtonBar) {
+        buttonBar.getButtonById(button.intId)?.let {
+                menuItem->
+            presenter.applyOptions(buttonBar,menuItem,this::getView)
+        }
+    }
+
 }
\ No newline at end of file
diff --git a/node_modules/react-native-navigation/lib/android/app/src/main/java/com/reactnativenavigation/viewcontrollers/stack/topbar/button/ButtonPresenter.kt b/node_modules/react-native-navigation/lib/android/app/src/main/java/com/reactnativenavigation/viewcontrollers/stack/topbar/button/ButtonPresenter.kt
index e1520a4..5be22e2 100644
--- a/node_modules/react-native-navigation/lib/android/app/src/main/java/com/reactnativenavigation/viewcontrollers/stack/topbar/button/ButtonPresenter.kt
+++ b/node_modules/react-native-navigation/lib/android/app/src/main/java/com/reactnativenavigation/viewcontrollers/stack/topbar/button/ButtonPresenter.kt
@@ -25,7 +25,8 @@ import com.reactnativenavigation.utils.ViewUtils
 import com.reactnativenavigation.views.stack.topbar.titlebar.IconBackgroundDrawable
 import kotlin.math.max
 
-open class ButtonPresenter(private val context: Context, private val button: ButtonOptions, private val iconResolver: IconResolver) {
+open class ButtonPresenter(private val context: Context,var button: ButtonOptions, private val iconResolver:
+IconResolver) {
     companion object {
         const val DISABLED_COLOR = Color.LTGRAY
     }
@@ -47,6 +48,8 @@ open class ButtonPresenter(private val context: Context, private val button: But
         applyComponent(menuItem, viewCreator)
         applyAccessibilityLabel(menuItem)
         applyIcon(menuItem)
+        applyText(menuItem)
+
 
         applyOptionsDirectlyOnView(toolbar, menuItem) {
             applyTestId(it)
@@ -55,6 +58,11 @@ open class ButtonPresenter(private val context: Context, private val button: But
         }
     }
 
+    private fun applyText(menuItem: MenuItem) {
+        if (button.text.hasValue())
+            menuItem.title = button.text.get()
+    }
+
     fun applyColor(toolbar: Toolbar, menuItem: MenuItem, color: ThemeColour) {
         button.color = color
         applyIcon(menuItem)
diff --git a/node_modules/react-native-navigation/lib/android/app/src/main/java/com/reactnativenavigation/viewcontrollers/stack/topbar/button/ButtonSpan.kt b/node_modules/react-native-navigation/lib/android/app/src/main/java/com/reactnativenavigation/viewcontrollers/stack/topbar/button/ButtonSpan.kt
index bf10b68..d872849 100644
--- a/node_modules/react-native-navigation/lib/android/app/src/main/java/com/reactnativenavigation/viewcontrollers/stack/topbar/button/ButtonSpan.kt
+++ b/node_modules/react-native-navigation/lib/android/app/src/main/java/com/reactnativenavigation/viewcontrollers/stack/topbar/button/ButtonSpan.kt
@@ -25,7 +25,7 @@ class ButtonSpan(
 
     fun apply(paint: Paint) {
         with(button.font) {
-            val typeface = getTypeface(typefaceLoader, Typeface.DEFAULT)
+            val typeface = getTypeface(typefaceLoader, paint.typeface)
             val fakeStyle = (paint.typeface?.style ?: 0) and (typeface?.style?.inv() ?: 1)
             if (fakeStyle and Typeface.BOLD != 0) paint.isFakeBoldText = true
             if (fakeStyle and Typeface.ITALIC != 0) paint.textSkewX = -0.25f
diff --git a/node_modules/react-native-navigation/lib/android/app/src/main/java/com/reactnativenavigation/viewcontrollers/viewcontroller/Presenter.java b/node_modules/react-native-navigation/lib/android/app/src/main/java/com/reactnativenavigation/viewcontrollers/viewcontroller/Presenter.java
index 9feab90..fa6292e 100644
--- a/node_modules/react-native-navigation/lib/android/app/src/main/java/com/reactnativenavigation/viewcontrollers/viewcontroller/Presenter.java
+++ b/node_modules/react-native-navigation/lib/android/app/src/main/java/com/reactnativenavigation/viewcontrollers/viewcontroller/Presenter.java
@@ -10,47 +10,52 @@ import android.view.View;
 import android.view.ViewGroup.MarginLayoutParams;
 import android.view.Window;
 
+import androidx.core.content.ContextCompat;
+
 import com.reactnativenavigation.options.NavigationBarOptions;
 import com.reactnativenavigation.options.Options;
 import com.reactnativenavigation.options.OrientationOptions;
 import com.reactnativenavigation.options.StatusBarOptions;
 import com.reactnativenavigation.options.StatusBarOptions.TextColorScheme;
 import com.reactnativenavigation.options.params.Bool;
-import com.reactnativenavigation.utils.StatusBarUtils;
+import com.reactnativenavigation.utils.SystemUiUtils;
 import com.reactnativenavigation.viewcontrollers.parent.ParentController;
 import com.reactnativenavigation.viewcontrollers.navigator.Navigator;
 
-import static android.view.WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS;
-
 public class Presenter {
     private final Activity activity;
     private Options defaultOptions;
-
     public Presenter(Activity activity, Options defaultOptions) {
         this.activity = activity;
         this.defaultOptions = defaultOptions;
+
     }
 
     public void setDefaultOptions(Options defaultOptions) {
         this.defaultOptions = defaultOptions;
     }
 
-    public void mergeOptions(View view, Options options) {
-        mergeStatusBarOptions(view, options.statusBar);
-        mergeNavigationBarOptions(options.navigationBar);
+    public Options getDefaultOptions() {
+        return defaultOptions;
+    }
+
+    public void mergeOptions(ViewController<?> viewController, Options options) {
+        final Options withDefaults =  viewController.resolveCurrentOptions().copy().mergeWith(options).withDefaultOptions(defaultOptions);
+        mergeStatusBarOptions(viewController.getView(), withDefaults.statusBar);
+        mergeNavigationBarOptions(withDefaults.navigationBar);
     }
 
     public void applyOptions(ViewController view, Options options) {
         Options withDefaultOptions = options.copy().withDefaultOptions(defaultOptions);
         applyOrientation(withDefaultOptions.layout.orientation);
         applyViewOptions(view, withDefaultOptions);
-        applyStatusBarOptions(withDefaultOptions);
+        applyStatusBarOptions(view, withDefaultOptions);
         applyNavigationBarOptions(withDefaultOptions.navigationBar);
     }
 
-    public void onViewBroughtToFront(Options options) {
+    public void onViewBroughtToFront(ViewController<?> viewController, Options options) {
         Options withDefaultOptions = options.copy().withDefaultOptions(defaultOptions);
-        applyStatusBarOptions(withDefaultOptions);
+        applyStatusBarOptions(viewController, withDefaultOptions);
     }
 
     private void applyOrientation(OrientationOptions options) {
@@ -73,7 +78,7 @@ public class Presenter {
             if (view instanceof Navigator) return;
 
             LayerDrawable ld = new LayerDrawable(new Drawable[]{new ColorDrawable(options.layout.backgroundColor.get())});
-            int top = view.resolveCurrentOptions().statusBar.drawBehind.isTrue() ? 0 : StatusBarUtils.getStatusBarHeight(view.getActivity());
+            int top = view.resolveCurrentOptions().statusBar.drawBehind.isTrue() ? 0 : SystemUiUtils.getStatusBarHeight(view.getActivity());
             if (!(view instanceof ParentController)) {
                 MarginLayoutParams lp = (MarginLayoutParams) view.getView().getLayoutParams();
                 if (lp.topMargin != 0) top = 0;
@@ -83,37 +88,37 @@ public class Presenter {
         }
     }
 
-    private void applyStatusBarOptions(Options options) {
+    private void applyStatusBarOptions(ViewController viewController, Options options) {
         StatusBarOptions statusBar = options.copy().withDefaultOptions(defaultOptions).statusBar;
         setStatusBarBackgroundColor(statusBar);
         setTextColorScheme(statusBar);
         setTranslucent(statusBar);
-        setStatusBarVisible(statusBar.visible);
+        setStatusBarVisible(viewController, statusBar.visible);
     }
 
     private void setTranslucent(StatusBarOptions options) {
         Window window = activity.getWindow();
         if (options.translucent.isTrue()) {
-            window.setFlags(FLAG_TRANSLUCENT_STATUS, FLAG_TRANSLUCENT_STATUS);
-        } else if (StatusBarUtils.isTranslucent(window)) {
-            window.clearFlags(FLAG_TRANSLUCENT_STATUS);
+            SystemUiUtils.setStatusBarTranslucent(window);
+        } else if (SystemUiUtils.isTranslucent(window)) {
+            SystemUiUtils.clearStatusBarTranslucency(window);
         }
     }
 
-    private void setStatusBarVisible(Bool visible) {
-        View decorView = activity.getWindow().getDecorView();
-        int flags = decorView.getSystemUiVisibility();
+    private void setStatusBarVisible(ViewController viewController, Bool visible) {
+        final View view = viewController.view != null ? viewController.view : activity.getWindow().getDecorView();
         if (visible.isFalse()) {
-            flags |= View.SYSTEM_UI_FLAG_FULLSCREEN;
+            SystemUiUtils.hideStatusBar(activity.getWindow(), view);
         } else {
-            flags &= ~View.SYSTEM_UI_FLAG_FULLSCREEN;
+            SystemUiUtils.showStatusBar(activity.getWindow(), view);
         }
-        decorView.setSystemUiVisibility(flags);
     }
 
     private void setStatusBarBackgroundColor(StatusBarOptions statusBar) {
-        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP && statusBar.backgroundColor.canApplyValue()) {
-            activity.getWindow().setStatusBarColor(getStatusBarBackgroundColor(statusBar));
+        if (statusBar.backgroundColor.canApplyValue()) {
+            final int statusBarBackgroundColor = getStatusBarBackgroundColor(statusBar);
+            SystemUiUtils.setStatusBarColor(activity.getWindow(), statusBarBackgroundColor,
+                    statusBar.translucent.isTrue());
         }
     }
 
@@ -133,20 +138,11 @@ public class Presenter {
     }
 
     private void setTextColorScheme(StatusBarOptions statusBar) {
-        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.M) return;
-
         final View view = activity.getWindow().getDecorView();
         //View.post is a Workaround, added to solve internal Samsung 
         //Android 9 issues. For more info see https://github.com/wix/react-native-navigation/pull/7231
-        view.post(()->{
-            int flags = view.getSystemUiVisibility();
-            if (isDarkTextColorScheme(statusBar)) {
-                flags |= View.SYSTEM_UI_FLAG_LIGHT_STATUS_BAR;
-            } else {
-                flags &= ~View.SYSTEM_UI_FLAG_LIGHT_STATUS_BAR;
-            }
-
-            view.setSystemUiVisibility(flags);
+        view.post(() -> {
+            SystemUiUtils.setStatusBarColorScheme(activity.getWindow(), view, isDarkTextColorScheme(statusBar));
         });
     }
 
@@ -154,12 +150,14 @@ public class Presenter {
         mergeStatusBarBackgroundColor(statusBar);
         mergeTextColorScheme(statusBar);
         mergeTranslucent(statusBar);
-        mergeStatusBarVisible(view, statusBar.visible, statusBar.drawBehind);
+        mergeStatusBarVisible(view, statusBar.visible);
     }
 
     private void mergeStatusBarBackgroundColor(StatusBarOptions statusBar) {
-        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP && statusBar.backgroundColor.hasValue()) {
-            activity.getWindow().setStatusBarColor(getStatusBarBackgroundColor(statusBar));
+        if (statusBar.backgroundColor.hasValue()) {
+            final int statusBarBackgroundColor = getStatusBarBackgroundColor(statusBar);
+            SystemUiUtils.setStatusBarColor(activity.getWindow(), statusBarBackgroundColor,
+                    statusBar.translucent.isTrue());
         }
     }
 
@@ -171,22 +169,19 @@ public class Presenter {
     private void mergeTranslucent(StatusBarOptions options) {
         Window window = activity.getWindow();
         if (options.translucent.isTrue()) {
-            window.setFlags(FLAG_TRANSLUCENT_STATUS, FLAG_TRANSLUCENT_STATUS);
-        } else if (options.translucent.isFalse() && StatusBarUtils.isTranslucent(window)) {
-            window.clearFlags(FLAG_TRANSLUCENT_STATUS);
+            SystemUiUtils.setStatusBarTranslucent(window);
+        } else if (options.translucent.isFalse() && SystemUiUtils.isTranslucent(window)) {
+            SystemUiUtils.clearStatusBarTranslucency(window);
         }
     }
 
-    private void mergeStatusBarVisible(View view, Bool visible, Bool drawBehind) {
+    private void mergeStatusBarVisible(View view, Bool visible) {
         if (visible.hasValue()) {
-            int flags = view.getSystemUiVisibility();
             if (visible.isTrue()) {
-                flags &= ~View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN & ~View.SYSTEM_UI_FLAG_FULLSCREEN;
+                SystemUiUtils.showStatusBar(activity.getWindow(), view);
             } else {
-                flags |= View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN | View.SYSTEM_UI_FLAG_FULLSCREEN;
+                SystemUiUtils.hideStatusBar(activity.getWindow(), view);
             }
-            if (flags != view.getSystemUiVisibility()) view.requestLayout();
-            view.setSystemUiVisibility(flags);
         }
     }
 
@@ -206,36 +201,22 @@ public class Presenter {
 
     private void applyNavigationBarVisibility(NavigationBarOptions options) {
         View decorView = activity.getWindow().getDecorView();
-        int flags = decorView.getSystemUiVisibility();
-        boolean defaultVisibility = (flags & View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION) == 0;
-        int hideNavigationBarFlags = View.SYSTEM_UI_FLAG_HIDE_NAVIGATION | View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY;
-        if (options.isVisible.get(defaultVisibility)) {
-            flags &= ~hideNavigationBarFlags;
+        if (options.isVisible.isTrueOrUndefined()) {
+            SystemUiUtils.showNavigationBar(activity.getWindow(), decorView);
         } else {
-            flags |= hideNavigationBarFlags;
+            SystemUiUtils.hideNavigationBar(activity.getWindow(), decorView);
         }
-        decorView.setSystemUiVisibility(flags);
     }
 
     private void setNavigationBarBackgroundColor(NavigationBarOptions navigationBar) {
-        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP && navigationBar.backgroundColor.canApplyValue()) {
-            int defaultColor = activity.getWindow().getNavigationBarColor();
-            int color = navigationBar.backgroundColor.get(defaultColor);
-            activity.getWindow().setNavigationBarColor(color);
-            setNavigationBarButtonsColor(color);
-        }
-    }
+         int navigationBarDefaultColor = SystemUiUtils.INSTANCE.getNavigationBarDefaultColor();
+         navigationBarDefaultColor = navigationBarDefaultColor==-1?Color.BLACK:navigationBarDefaultColor;
+        if (navigationBar.backgroundColor.canApplyValue()) {
+            int color = navigationBar.backgroundColor.get(navigationBarDefaultColor);
+            SystemUiUtils.setNavigationBarBackgroundColor(activity.getWindow(), color, isColorLight(color));
+        }else{
+            SystemUiUtils.setNavigationBarBackgroundColor(activity.getWindow(), navigationBarDefaultColor, isColorLight(navigationBarDefaultColor));
 
-    private void setNavigationBarButtonsColor(int color) {
-        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
-            View decorView = activity.getWindow().getDecorView();
-            int flags = decorView.getSystemUiVisibility();
-            if (isColorLight(color)) {
-                flags |= View.SYSTEM_UI_FLAG_LIGHT_NAVIGATION_BAR;
-            } else {
-                flags &= ~View.SYSTEM_UI_FLAG_LIGHT_NAVIGATION_BAR;
-            }
-            decorView.setSystemUiVisibility(flags);
         }
     }
 
diff --git a/node_modules/react-native-navigation/lib/android/app/src/main/java/com/reactnativenavigation/views/component/ComponentLayout.java b/node_modules/react-native-navigation/lib/android/app/src/main/java/com/reactnativenavigation/views/component/ComponentLayout.java
index ad74ecc..845b882 100644
--- a/node_modules/react-native-navigation/lib/android/app/src/main/java/com/reactnativenavigation/views/component/ComponentLayout.java
+++ b/node_modules/react-native-navigation/lib/android/app/src/main/java/com/reactnativenavigation/views/component/ComponentLayout.java
@@ -4,6 +4,7 @@ import android.annotation.SuppressLint;
 import android.content.Context;
 import android.view.MotionEvent;
 import android.view.ViewGroup;
+import android.view.WindowInsets;
 
 import com.reactnativenavigation.options.ButtonOptions;
 import com.reactnativenavigation.viewcontrollers.viewcontroller.ScrollEventListener;
@@ -99,6 +100,7 @@ public class ComponentLayout extends CoordinatorLayout implements ReactComponent
         reactView.sendOnNavigationButtonPressed(button.id);
     }
 
+
     @Override
     public boolean onInterceptTouchEvent(MotionEvent ev) {
         return touchDelegate.onInterceptTouchEvent(ev);
diff --git a/node_modules/react-native-navigation/lib/android/app/src/main/java/com/reactnativenavigation/views/element/animators/ReactImageMatrixAnimator.kt b/node_modules/react-native-navigation/lib/android/app/src/main/java/com/reactnativenavigation/views/element/animators/ReactImageMatrixAnimator.kt
index 6eb09d7..1d8f81c 100644
--- a/node_modules/react-native-navigation/lib/android/app/src/main/java/com/reactnativenavigation/views/element/animators/ReactImageMatrixAnimator.kt
+++ b/node_modules/react-native-navigation/lib/android/app/src/main/java/com/reactnativenavigation/views/element/animators/ReactImageMatrixAnimator.kt
@@ -13,7 +13,6 @@ import com.reactnativenavigation.options.SharedElementTransitionOptions
 import com.reactnativenavigation.utils.ViewUtils
 import kotlin.math.max
 import kotlin.math.roundToInt
-import android.animation.TypeEvaluator
 
 class ReactImageMatrixAnimator(from: View, to: View) : PropertyAnimatorCreator<ReactImageView>(from, to) {
     override fun shouldAnimateProperty(fromChild: ReactImageView, toChild: ReactImageView): Boolean {
@@ -39,7 +38,7 @@ class ReactImageMatrixAnimator(from: View, to: View) : PropertyAnimatorCreator<R
 
             to.layoutParams.width = max(from.width, to.width)
             to.layoutParams.height = max(from.height, to.height)
-            return ObjectAnimator.ofObject(TypeEvaluator<Float> { fraction: Float, _: Any, _: Any ->
+            return ObjectAnimator.ofObject({ fraction: Float, _: Any, _: Any ->
                 hierarchy.actualImageScaleType?.let {
                     (hierarchy.actualImageScaleType as? InterpolatingScaleType)?.let {
                         it.value = fraction
@@ -47,7 +46,7 @@ class ReactImageMatrixAnimator(from: View, to: View) : PropertyAnimatorCreator<R
                     }
                 }
                 null
-            }, 0, 1)
+            }, 0f, 1f)
         }
     }
 
diff --git a/node_modules/react-native-navigation/lib/android/app/src/main/java/com/reactnativenavigation/views/stack/topbar/TopBar.java b/node_modules/react-native-navigation/lib/android/app/src/main/java/com/reactnativenavigation/views/stack/topbar/TopBar.java
index ad39bea..d790e5a 100644
--- a/node_modules/react-native-navigation/lib/android/app/src/main/java/com/reactnativenavigation/views/stack/topbar/TopBar.java
+++ b/node_modules/react-native-navigation/lib/android/app/src/main/java/com/reactnativenavigation/views/stack/topbar/TopBar.java
@@ -47,7 +47,7 @@ import static android.view.ViewGroup.LayoutParams.WRAP_CONTENT;
 
 @SuppressLint("ViewConstructor")
 public class TopBar extends AppBarLayout implements ScrollEventListener.ScrollAwareView {
-    public final static int  DEFAULT_TITLE_COLOR = Color.BLACK;
+    public final static int DEFAULT_TITLE_COLOR = Color.BLACK;
     public final static int DEFAULT_SUBTITLE_COLOR = Color.GRAY;
 
     private final TopBarCollapseBehavior collapsingBehavior;
@@ -75,7 +75,6 @@ public class TopBar extends AppBarLayout implements ScrollEventListener.ScrollAw
 
     private void createLayout() {
         setId(CompatUtils.generateViewId());
-        setFitsSystemWindows(true);
         topTabs = createTopTabs();
         border = createBorder();
         LinearLayout content = createContentLayout();
diff --git a/node_modules/react-native-navigation/lib/android/app/src/main/java/com/reactnativenavigation/views/stack/topbar/titlebar/ButtonBar.kt b/node_modules/react-native-navigation/lib/android/app/src/main/java/com/reactnativenavigation/views/stack/topbar/titlebar/ButtonBar.kt
index c17afc6..32c8cd2 100644
--- a/node_modules/react-native-navigation/lib/android/app/src/main/java/com/reactnativenavigation/views/stack/topbar/titlebar/ButtonBar.kt
+++ b/node_modules/react-native-navigation/lib/android/app/src/main/java/com/reactnativenavigation/views/stack/topbar/titlebar/ButtonBar.kt
@@ -4,17 +4,15 @@ import android.content.Context
 import android.graphics.PorterDuff
 import android.graphics.PorterDuffColorFilter
 import android.text.SpannableString
-import android.transition.AutoTransition
-import android.transition.TransitionManager
 import android.view.MenuItem
 import android.view.View
 import android.view.ViewGroup
 import androidx.appcompat.widget.ActionMenuView
 import androidx.appcompat.widget.Toolbar
+import androidx.core.view.children
 import com.reactnativenavigation.utils.ObjectUtils
 import com.reactnativenavigation.utils.ViewUtils
 import com.reactnativenavigation.viewcontrollers.stack.topbar.button.ButtonController
-
 open class ButtonBar internal constructor(context: Context) : Toolbar(context) {
     var shouldAnimate: Boolean=false
 
@@ -43,23 +41,17 @@ open class ButtonBar internal constructor(context: Context) : Toolbar(context) {
         get() = menu.size()
 
     fun addButton(menuItem: Int, intId: Int, order: Int, styledText: SpannableString): MenuItem? {
-        if(shouldAnimate)
-        TransitionManager.beginDelayedTransition(this,AutoTransition())
         return this.menu?.add(menuItem,
-                intId,
-                order,
-                styledText)
+            intId,
+            order,
+            styledText)
     }
 
     fun removeButton(buttonId: Int) {
-        if(shouldAnimate)
-        TransitionManager.beginDelayedTransition(this,AutoTransition())
         menu.removeItem(buttonId)
     }
 
     open fun clearButtons() {
-        if(shouldAnimate)
-        TransitionManager.beginDelayedTransition(this,AutoTransition())
         clearBackButton()
         if (menu.size() > 0) menu.clear()
     }
@@ -68,6 +60,9 @@ open class ButtonBar internal constructor(context: Context) : Toolbar(context) {
         return menu.getItem(index)
     }
 
+    fun getButtonById(id: Int): MenuItem? {
+        return menu.children.firstOrNull { it.itemId == id }
+    }
     fun containsButton(menuItem: MenuItem?, order: Int): Boolean {
         return menuItem != null && menu.findItem(menuItem.itemId) != null && menuItem.order == order
     }
diff --git a/node_modules/react-native-navigation/lib/android/app/src/main/java/com/reactnativenavigation/views/stack/topbar/titlebar/TitleAndButtonsContainer.kt b/node_modules/react-native-navigation/lib/android/app/src/main/java/com/reactnativenavigation/views/stack/topbar/titlebar/TitleAndButtonsContainer.kt
index 196e580..52d687e 100644
--- a/node_modules/react-native-navigation/lib/android/app/src/main/java/com/reactnativenavigation/views/stack/topbar/titlebar/TitleAndButtonsContainer.kt
+++ b/node_modules/react-native-navigation/lib/android/app/src/main/java/com/reactnativenavigation/views/stack/topbar/titlebar/TitleAndButtonsContainer.kt
@@ -76,8 +76,6 @@ class TitleAndButtonsContainer(context: Context) : ViewGroup(context) {
 
     fun setSubTitleTextAlignment(alignment: Alignment) = titleSubTitleBar.setSubTitleAlignment(alignment)
 
-    fun setTitleTextAlignment(alignment: Alignment) = titleSubTitleBar.setTitleAlignment(alignment)
-
     fun setBackgroundColor(color: ThemeColour) = if (color.hasValue()) setBackgroundColor(color.get()) else Unit
 
     fun setTitleFontSize(size: Float) = titleSubTitleBar.setTitleFontSize(size)
diff --git a/node_modules/react-native-navigation/lib/android/app/src/main/java/com/reactnativenavigation/views/stack/topbar/titlebar/TitleSubTitleLayout.kt b/node_modules/react-native-navigation/lib/android/app/src/main/java/com/reactnativenavigation/views/stack/topbar/titlebar/TitleSubTitleLayout.kt
index 62c4625..3af4d77 100644
--- a/node_modules/react-native-navigation/lib/android/app/src/main/java/com/reactnativenavigation/views/stack/topbar/titlebar/TitleSubTitleLayout.kt
+++ b/node_modules/react-native-navigation/lib/android/app/src/main/java/com/reactnativenavigation/views/stack/topbar/titlebar/TitleSubTitleLayout.kt
@@ -38,13 +38,6 @@ class TitleSubTitleLayout(context: Context) : LinearLayout(context) {
         }
     }
 
-    fun setTitleAlignment(alignment: Alignment) {
-        if (alignment == Alignment.Center) {
-            (this.titleTextView.layoutParams as LayoutParams).gravity = Gravity.CENTER
-        } else {
-            (this.titleTextView.layoutParams as LayoutParams).gravity = Gravity.START or Gravity.CENTER_VERTICAL
-        }
-    }
 
     fun setTitleFontSize(size: Float) = titleTextView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, size)
 
diff --git a/node_modules/react-native-navigation/lib/android/app/src/reactNative51/java/com/reactnativenavigation/react/NavigationReactNativeHost.java b/node_modules/react-native-navigation/lib/android/app/src/reactNative51/java/com/reactnativenavigation/react/NavigationReactNativeHost.java
index 8ff7f4d..088c16e 100644
--- a/node_modules/react-native-navigation/lib/android/app/src/reactNative51/java/com/reactnativenavigation/react/NavigationReactNativeHost.java
+++ b/node_modules/react-native-navigation/lib/android/app/src/reactNative51/java/com/reactnativenavigation/react/NavigationReactNativeHost.java
@@ -8,6 +8,7 @@ import com.facebook.react.ReactPackage;
 import com.facebook.react.common.LifecycleState;
 import com.facebook.react.devsupport.interfaces.DevBundleDownloadListener;
 import com.reactnativenavigation.NavigationApplication;
+import com.facebook.hermes.reactexecutor.HermesExecutorFactory;
 
 import androidx.annotation.NonNull;
 import androidx.annotation.Nullable;
@@ -44,7 +45,7 @@ public abstract class NavigationReactNativeHost extends ReactNativeHost implemen
                 .setJSMainModulePath(getJSMainModuleName())
                 .setUseDeveloperSupport(getUseDeveloperSupport())
                 .setRedBoxHandler(getRedBoxHandler())
-                .setJavaScriptExecutorFactory(getJavaScriptExecutorFactory())
+                .setJavaScriptExecutorFactory(new HermesExecutorFactory())
                 .setUIImplementationProvider(getUIImplementationProvider())
                 .setInitialLifecycleState(LifecycleState.BEFORE_CREATE)
                 .setDevBundleDownloadListener(getDevBundleDownloadListener());
diff --git a/node_modules/react-native-navigation/lib/android/app/src/test/java/com/reactnativenavigation/BaseTest.java b/node_modules/react-native-navigation/lib/android/app/src/test/java/com/reactnativenavigation/BaseTest.java
index 712f044..33ea5ae 100644
--- a/node_modules/react-native-navigation/lib/android/app/src/test/java/com/reactnativenavigation/BaseTest.java
+++ b/node_modules/react-native-navigation/lib/android/app/src/test/java/com/reactnativenavigation/BaseTest.java
@@ -21,7 +21,7 @@ import androidx.coordinatorlayout.widget.CoordinatorLayout;
 
 import com.reactnativenavigation.options.params.Bool;
 import com.reactnativenavigation.utils.Functions;
-import com.reactnativenavigation.utils.StatusBarUtils;
+import com.reactnativenavigation.utils.SystemUiUtils;
 import com.reactnativenavigation.utils.ViewUtils;
 import com.reactnativenavigation.viewcontrollers.viewcontroller.ViewController;
 
@@ -59,15 +59,16 @@ public abstract class BaseTest {
         when(res.getColor(ArgumentMatchers.anyInt(),any())).thenReturn(0x00000);
     }
 
-    public void mockStatusBarUtils(int statusBarHeight,int statusBarHeightDp, Functions.Func block) {
-        try (MockedStatic<StatusBarUtils> theMock = Mockito.mockStatic(StatusBarUtils.class)) {
+
+    public void mockSystemUiUtils(int statusBarHeight, int statusBarHeightDp, Functions.Func1<MockedStatic<SystemUiUtils>> mockedBlock) {
+        try (MockedStatic<SystemUiUtils> theMock = Mockito.mockStatic(SystemUiUtils.class)) {
             theMock.when(() -> {
-                StatusBarUtils.getStatusBarHeight(any());
+                SystemUiUtils.getStatusBarHeight(any());
             }).thenReturn(statusBarHeight);
             theMock.when(() -> {
-                StatusBarUtils.getStatusBarHeightDp(any());
+                SystemUiUtils.getStatusBarHeightDp(any());
             }).thenReturn(statusBarHeightDp);
-            block.run();
+            mockedBlock.run(theMock);
         }
     }
 
diff --git a/node_modules/react-native-navigation/lib/android/app/src/test/java/com/reactnativenavigation/TestActivity.java b/node_modules/react-native-navigation/lib/android/app/src/test/java/com/reactnativenavigation/TestActivity.java
index 8074511..55d7bb0 100644
--- a/node_modules/react-native-navigation/lib/android/app/src/test/java/com/reactnativenavigation/TestActivity.java
+++ b/node_modules/react-native-navigation/lib/android/app/src/test/java/com/reactnativenavigation/TestActivity.java
@@ -15,4 +15,9 @@ public class TestActivity extends NavigationActivity {
     public void setNavigator(Navigator navigator) {
         this.navigator = navigator;
     }
+
+    @Override
+    public void onBackPressed() {
+        super.onBackPressed();
+    }
 }
diff --git a/node_modules/react-native-navigation/lib/android/app/src/test/java/com/reactnativenavigation/mocks/ImageLoaderMock.kt b/node_modules/react-native-navigation/lib/android/app/src/test/java/com/reactnativenavigation/mocks/ImageLoaderMock.kt
index adc0d99..203f560 100644
--- a/node_modules/react-native-navigation/lib/android/app/src/test/java/com/reactnativenavigation/mocks/ImageLoaderMock.kt
+++ b/node_modules/react-native-navigation/lib/android/app/src/test/java/com/reactnativenavigation/mocks/ImageLoaderMock.kt
@@ -3,12 +3,13 @@ package com.reactnativenavigation.mocks
 import android.graphics.Canvas
 import android.graphics.ColorFilter
 import android.graphics.drawable.Drawable
-import com.nhaarman.mockitokotlin2.any
-import com.nhaarman.mockitokotlin2.doAnswer
-import com.nhaarman.mockitokotlin2.mock
-import com.nhaarman.mockitokotlin2.whenever
+
 import com.reactnativenavigation.utils.ImageLoader
 import com.reactnativenavigation.utils.ImageLoader.ImagesLoadingListener
+import org.mockito.Mockito.doAnswer
+import org.mockito.kotlin.any
+import org.mockito.kotlin.mock
+import org.mockito.kotlin.whenever
 import java.util.*
 
 object ImageLoaderMock {
diff --git a/node_modules/react-native-navigation/lib/android/app/src/test/java/com/reactnativenavigation/mocks/Mocks.kt b/node_modules/react-native-navigation/lib/android/app/src/test/java/com/reactnativenavigation/mocks/Mocks.kt
index 515b9eb..70ee02e 100644
--- a/node_modules/react-native-navigation/lib/android/app/src/test/java/com/reactnativenavigation/mocks/Mocks.kt
+++ b/node_modules/react-native-navigation/lib/android/app/src/test/java/com/reactnativenavigation/mocks/Mocks.kt
@@ -1,10 +1,11 @@
 package com.reactnativenavigation.mocks
 
 import android.view.ViewGroup
-import com.nhaarman.mockitokotlin2.mock
-import com.nhaarman.mockitokotlin2.whenever
+
 import com.reactnativenavigation.options.Options
 import com.reactnativenavigation.viewcontrollers.viewcontroller.ViewController
+import org.mockito.kotlin.mock
+import org.mockito.kotlin.whenever
 
 object Mocks {
     fun viewController(): ViewController<*> {
diff --git a/node_modules/react-native-navigation/lib/android/app/src/test/java/com/reactnativenavigation/mocks/TypefaceLoaderMock.kt b/node_modules/react-native-navigation/lib/android/app/src/test/java/com/reactnativenavigation/mocks/TypefaceLoaderMock.kt
index a15f017..2ab731f 100644
--- a/node_modules/react-native-navigation/lib/android/app/src/test/java/com/reactnativenavigation/mocks/TypefaceLoaderMock.kt
+++ b/node_modules/react-native-navigation/lib/android/app/src/test/java/com/reactnativenavigation/mocks/TypefaceLoaderMock.kt
@@ -1,16 +1,20 @@
 package com.reactnativenavigation.mocks
 
 import android.graphics.Typeface
-import com.nhaarman.mockitokotlin2.mock
 import com.reactnativenavigation.options.parsers.TypefaceLoader
+import org.mockito.kotlin.mock
 
 class TypefaceLoaderMock() : TypefaceLoader(mock()) {
     private var mockTypefaces: Map<String, Typeface>? = null
 
     constructor(mockTypefaces: Map<String, Typeface>?) : this() {
         this.mockTypefaces = mockTypefaces
+
     }
 
+    override val defaultTypeFace: Typeface
+        get() = Typeface.DEFAULT
+
     override fun getTypeFace(fontFamilyName: String?, fontStyle: String?, fontWeight: String?, defaultTypeFace: Typeface?): Typeface? {
         return mockTypefaces?.getOrDefault(fontFamilyName, defaultTypeFace) ?: defaultTypeFace
     }
diff --git a/node_modules/react-native-navigation/lib/android/app/src/test/java/com/reactnativenavigation/options/TransitionAnimationOptionsTest.kt b/node_modules/react-native-navigation/lib/android/app/src/test/java/com/reactnativenavigation/options/TransitionAnimationOptionsTest.kt
index 38c9308..c8e43ae 100644
--- a/node_modules/react-native-navigation/lib/android/app/src/test/java/com/reactnativenavigation/options/TransitionAnimationOptionsTest.kt
+++ b/node_modules/react-native-navigation/lib/android/app/src/test/java/com/reactnativenavigation/options/TransitionAnimationOptionsTest.kt
@@ -1,7 +1,6 @@
 package com.reactnativenavigation.options
-
-import com.nhaarman.mockitokotlin2.mock
-import com.nhaarman.mockitokotlin2.whenever
+import org.mockito.kotlin.mock
+import org.mockito.kotlin.whenever
 import com.reactnativenavigation.BaseTest
 import org.assertj.core.api.Assertions.assertThat
 import org.json.JSONArray
diff --git a/node_modules/react-native-navigation/lib/android/app/src/test/java/com/reactnativenavigation/presentation/PresenterTest.java b/node_modules/react-native-navigation/lib/android/app/src/test/java/com/reactnativenavigation/presentation/PresenterTest.java
index b487eb2..a57ff3c 100644
--- a/node_modules/react-native-navigation/lib/android/app/src/test/java/com/reactnativenavigation/presentation/PresenterTest.java
+++ b/node_modules/react-native-navigation/lib/android/app/src/test/java/com/reactnativenavigation/presentation/PresenterTest.java
@@ -1,41 +1,56 @@
 package com.reactnativenavigation.presentation;
 
 import android.app.Activity;
+import android.view.View;
 import android.view.ViewGroup;
 import android.widget.FrameLayout;
 
 import com.reactnativenavigation.BaseTest;
 import com.reactnativenavigation.options.Options;
 import com.reactnativenavigation.options.params.Bool;
+import com.reactnativenavigation.utils.SystemUiUtils;
 import com.reactnativenavigation.viewcontrollers.viewcontroller.Presenter;
+import com.reactnativenavigation.viewcontrollers.viewcontroller.ViewController;
 
 import org.junit.Test;
 import org.mockito.Mockito;
 
+import static org.mockito.ArgumentMatchers.any;
+import static org.mockito.ArgumentMatchers.eq;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.times;
 import static org.mockito.Mockito.verify;
 
 public class PresenterTest extends BaseTest {
     private Presenter uut;
     private Activity activity;
+    private ViewController<ViewGroup> controller;
 
     @Override
     public void beforeEach() {
         super.beforeEach();
         activity = newActivity();
+        controller = mock(ViewController.class);
         uut = new Presenter(activity, Options.EMPTY);
     }
 
     @Test
-    public void mergeStatusBarVisible_requestLayout() {
-        ViewGroup spy = Mockito.spy(new FrameLayout(activity));
-        Options options = new Options();
-        options.statusBar.visible = new Bool(false);
+    public void mergeStatusBarVisible_callsShowHide() {
+        mockSystemUiUtils(1,1,(mockedStatic)->{
+            ViewGroup spy = Mockito.spy(new FrameLayout(activity));
+            Mockito.when(controller.getView()).thenReturn(spy);
+            Mockito.when(controller.resolveCurrentOptions()).thenReturn(Options.EMPTY);
+            Options options = new Options();
+            options.statusBar.visible = new Bool(false);
+            uut.mergeOptions(controller, options);
+            mockedStatic.verify(
+                    ()-> SystemUiUtils.hideStatusBar(any(),eq(spy)),times(1));
+
+            options.statusBar.visible = new Bool(true);
+            uut.mergeOptions(controller, options);
+            mockedStatic.verify(
+                    ()-> SystemUiUtils.showStatusBar(any(),eq(spy)),times(1));
+        });
 
-        uut.mergeOptions(spy, options);
-        verify(spy).requestLayout();
-
-        // requested only if needed
-        uut.mergeOptions(spy, options);
-        verify(spy).requestLayout();
     }
 }
diff --git a/node_modules/react-native-navigation/lib/android/app/src/test/java/com/reactnativenavigation/utils/LayoutFactoryTest.java b/node_modules/react-native-navigation/lib/android/app/src/test/java/com/reactnativenavigation/utils/LayoutFactoryTest.java
index 79fa137..efa43b0 100644
--- a/node_modules/react-native-navigation/lib/android/app/src/test/java/com/reactnativenavigation/utils/LayoutFactoryTest.java
+++ b/node_modules/react-native-navigation/lib/android/app/src/test/java/com/reactnativenavigation/utils/LayoutFactoryTest.java
@@ -15,14 +15,19 @@ import org.mockito.Mockito;
 import java.util.HashMap;
 
 import static org.assertj.core.api.Java6Assertions.assertThat;
+import static org.assertj.core.api.Java6Assertions.fail;
 import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.when;
 
 public class LayoutFactoryTest extends BaseTest {
     private LayoutFactory uut;
+    private ReactInstanceManager mockReactInstanceManager;
 
     @Override
     public void beforeEach() {
-        uut = new LayoutFactory(mock(ReactInstanceManager.class));
+        super.beforeEach();
+        mockReactInstanceManager = mock(ReactInstanceManager.class);
+        uut = new LayoutFactory(mockReactInstanceManager);
         uut.init(
                 newActivity(),
                 Mockito.mock(EventEmitter.class),
@@ -36,6 +41,16 @@ public class LayoutFactoryTest extends BaseTest {
         assertThat(uut.create(component())).isNotNull();
     }
 
+    @Test
+    public void shouldParseOptionsWhenReactContextIsNull() {
+        when(mockReactInstanceManager.getCurrentReactContext()).thenReturn(null);
+        try {
+            uut.create(component());
+        } catch (Exception e) {
+            fail("Create should not fail! when react instance has null context");
+        }
+    }
+
     @Test
     public void defaultOptionsAreNotNull() {
         assertThat(uut.getDefaultOptions()).isNotNull();
@@ -50,6 +65,14 @@ public class LayoutFactoryTest extends BaseTest {
     }
 
     private LayoutNode component() throws JSONException {
-        return new LayoutNode("Component1", LayoutNode.Type.Component, new JSONObject().put("name", "com.component"), null);
+        final JSONObject component = new JSONObject();
+        final JSONObject layout = new JSONObject();
+        final JSONObject backgroundColor = new JSONObject();
+        backgroundColor.put("dark",0);
+        backgroundColor.put("light",1);
+        layout.put("backgroundColor",backgroundColor );
+        component.put("name", "com.component");
+        component.put("options",new JSONObject().put("layout", layout));
+        return new LayoutNode("Component1", LayoutNode.Type.Component, component, null);
     }
 }
diff --git a/node_modules/react-native-navigation/lib/android/app/src/test/java/com/reactnativenavigation/utils/MotionEventTest.kt b/node_modules/react-native-navigation/lib/android/app/src/test/java/com/reactnativenavigation/utils/MotionEventTest.kt
index b83a1a5..ab357cc 100644
--- a/node_modules/react-native-navigation/lib/android/app/src/test/java/com/reactnativenavigation/utils/MotionEventTest.kt
+++ b/node_modules/react-native-navigation/lib/android/app/src/test/java/com/reactnativenavigation/utils/MotionEventTest.kt
@@ -4,7 +4,7 @@ import android.app.Activity
 import android.view.MotionEvent
 import android.view.View
 import android.widget.FrameLayout
-import com.nhaarman.mockitokotlin2.mock
+import org.mockito.kotlin.mock
 import com.reactnativenavigation.BaseTest
 import org.assertj.core.api.Java6Assertions.assertThat
 import org.junit.Test
diff --git a/node_modules/react-native-navigation/lib/android/app/src/test/java/com/reactnativenavigation/utils/TitleAndButtonsMeasurer.kt b/node_modules/react-native-navigation/lib/android/app/src/test/java/com/reactnativenavigation/utils/TitleAndButtonsMeasurerTest.kt
similarity index 99%
rename from node_modules/react-native-navigation/lib/android/app/src/test/java/com/reactnativenavigation/utils/TitleAndButtonsMeasurer.kt
rename to node_modules/react-native-navigation/lib/android/app/src/test/java/com/reactnativenavigation/utils/TitleAndButtonsMeasurerTest.kt
index d8509ee..3908a77 100644
--- a/node_modules/react-native-navigation/lib/android/app/src/test/java/com/reactnativenavigation/utils/TitleAndButtonsMeasurer.kt
+++ b/node_modules/react-native-navigation/lib/android/app/src/test/java/com/reactnativenavigation/utils/TitleAndButtonsMeasurerTest.kt
@@ -2,13 +2,13 @@ package com.reactnativenavigation.utils
 
 import com.reactnativenavigation.BaseTest
 import com.reactnativenavigation.views.stack.topbar.titlebar.DEFAULT_LEFT_MARGIN_PX
+import com.reactnativenavigation.views.stack.topbar.titlebar.resolveHorizontalTitleBoundsLimit
 import com.reactnativenavigation.views.stack.topbar.titlebar.resolveLeftButtonsBounds
 import com.reactnativenavigation.views.stack.topbar.titlebar.resolveRightButtonsBounds
-import com.reactnativenavigation.views.stack.topbar.titlebar.resolveHorizontalTitleBoundsLimit
 import org.junit.Test
 import kotlin.test.assertEquals
 
-class TitleAndButtonsMeasurer : BaseTest() {
+class TitleAndButtonsMeasurerTest : BaseTest() {
     private val parentWidth = 1080
 
     @Test
diff --git a/node_modules/react-native-navigation/lib/android/app/src/test/java/com/reactnativenavigation/utils/UiThreadTest.java b/node_modules/react-native-navigation/lib/android/app/src/test/java/com/reactnativenavigation/utils/UiThreadTest.java
index 347ba65..db6a5fd 100644
--- a/node_modules/react-native-navigation/lib/android/app/src/test/java/com/reactnativenavigation/utils/UiThreadTest.java
+++ b/node_modules/react-native-navigation/lib/android/app/src/test/java/com/reactnativenavigation/utils/UiThreadTest.java
@@ -13,7 +13,7 @@ public class UiThreadTest extends BaseTest {
         Runnable task = mock(Runnable.class);
         ShadowLooper.pauseMainLooper();
         UiThread.post(task);
-        verifyZeroInteractions(task);
+        verifyNoInteractions(task);
         ShadowLooper.runUiThreadTasks();
         verify(task, times(1)).run();
     }
@@ -22,7 +22,7 @@ public class UiThreadTest extends BaseTest {
     public void postDelayedOnUiThread() throws Exception {
         Runnable task = mock(Runnable.class);
         UiThread.postDelayed(task, 1000);
-        verifyZeroInteractions(task);
+        verifyNoInteractions(task);
         ShadowLooper.runUiThreadTasksIncludingDelayedTasks();
         verify(task, times(1)).run();
     }
diff --git a/node_modules/react-native-navigation/lib/android/app/src/test/java/com/reactnativenavigation/utils/UiUtilsTest.java b/node_modules/react-native-navigation/lib/android/app/src/test/java/com/reactnativenavigation/utils/UiUtilsTest.java
index 20fe555..230859f 100644
--- a/node_modules/react-native-navigation/lib/android/app/src/test/java/com/reactnativenavigation/utils/UiUtilsTest.java
+++ b/node_modules/react-native-navigation/lib/android/app/src/test/java/com/reactnativenavigation/utils/UiUtilsTest.java
@@ -13,7 +13,7 @@ public class UiUtilsTest extends BaseTest {
     public void runOnPreDrawOnce() {
         View view = new View(newActivity());
         Runnable task = mock(Runnable.class);
-        verifyZeroInteractions(task);
+        verifyNoInteractions(task);
 
         UiUtils.runOnPreDrawOnce(view, task);
         dispatchPreDraw(view);
diff --git a/node_modules/react-native-navigation/lib/android/app/src/test/java/com/reactnativenavigation/viewcontrollers/bottomtabs/BottomTabsControllerTest.java b/node_modules/react-native-navigation/lib/android/app/src/test/java/com/reactnativenavigation/viewcontrollers/bottomtabs/BottomTabsControllerTest.java
deleted file mode 100644
index bb1ef6c..0000000
--- a/node_modules/react-native-navigation/lib/android/app/src/test/java/com/reactnativenavigation/viewcontrollers/bottomtabs/BottomTabsControllerTest.java
+++ /dev/null
@@ -1,511 +0,0 @@
-package com.reactnativenavigation.viewcontrollers.bottomtabs;
-
-import android.app.Activity;
-import android.graphics.Color;
-import android.view.Gravity;
-import android.view.View;
-import android.view.ViewGroup.MarginLayoutParams;
-
-import com.aurelhubert.ahbottomnavigation.AHBottomNavigation;
-import com.reactnativenavigation.BaseTest;
-import com.reactnativenavigation.TestUtils;
-import com.reactnativenavigation.mocks.ImageLoaderMock;
-import com.reactnativenavigation.mocks.SimpleViewController;
-import com.reactnativenavigation.mocks.TypefaceLoaderMock;
-import com.reactnativenavigation.options.BottomTabsOptions;
-import com.reactnativenavigation.options.Options;
-import com.reactnativenavigation.options.params.Bool;
-import com.reactnativenavigation.options.params.Colour;
-import com.reactnativenavigation.options.params.NullText;
-import com.reactnativenavigation.options.params.Number;
-import com.reactnativenavigation.options.params.ThemeColour;
-import com.reactnativenavigation.options.params.Text;
-import com.reactnativenavigation.react.CommandListenerAdapter;
-import com.reactnativenavigation.react.events.EventEmitter;
-import com.reactnativenavigation.utils.ImageLoader;
-import com.reactnativenavigation.utils.OptionHelper;
-import com.reactnativenavigation.utils.StatusBarUtils;
-import com.reactnativenavigation.viewcontrollers.bottomtabs.attacher.BottomTabsAttacher;
-import com.reactnativenavigation.viewcontrollers.child.ChildControllersRegistry;
-import com.reactnativenavigation.viewcontrollers.fakes.FakeParentController;
-import com.reactnativenavigation.viewcontrollers.parent.ParentController;
-import com.reactnativenavigation.viewcontrollers.stack.StackController;
-import com.reactnativenavigation.viewcontrollers.viewcontroller.Presenter;
-import com.reactnativenavigation.viewcontrollers.viewcontroller.ViewController;
-import com.reactnativenavigation.views.bottomtabs.BottomTabs;
-import com.reactnativenavigation.views.bottomtabs.BottomTabsContainer;
-import com.reactnativenavigation.views.bottomtabs.BottomTabsLayout;
-
-import org.junit.Test;
-import org.mockito.ArgumentCaptor;
-import org.mockito.Mockito;
-
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.Collections;
-import java.util.List;
-
-import androidx.annotation.NonNull;
-import androidx.coordinatorlayout.widget.CoordinatorLayout;
-
-
-import static com.reactnativenavigation.TestUtils.hideBackButton;
-import static com.reactnativenavigation.utils.ObjectUtils.perform;
-import static org.assertj.core.api.Java6Assertions.assertThat;
-import static org.mockito.ArgumentMatchers.any;
-import static org.mockito.ArgumentMatchers.eq;
-import static org.mockito.Mockito.spy;
-import static org.mockito.Mockito.times;
-import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.when;
-
-public class BottomTabsControllerTest extends BaseTest {
-
-    private Activity activity;
-    private BottomTabs bottomTabs;
-    private BottomTabsContainer bottomTabsContainer;
-    private BottomTabsController uut;
-    private final Options initialOptions = new Options();
-    private ViewController<?> child1;
-    private ViewController<?> child2;
-    private ViewController<?> child3;
-    private ViewController<?> stackChild;
-    private StackController child4;
-    private ViewController<?> child5;
-    private final Options tabOptions = OptionHelper.createBottomTabOptions();
-    private final ImageLoader imageLoaderMock = ImageLoaderMock.mock();
-    private EventEmitter eventEmitter;
-    private ChildControllersRegistry childRegistry;
-    private List<ViewController<?>> tabs;
-    private BottomTabsPresenter presenter;
-    private BottomTabPresenter bottomTabPresenter;
-    private BottomTabsAttacher tabsAttacher;
-
-    @Override
-    public void beforeEach() {
-        activity = newActivity();
-        childRegistry = new ChildControllersRegistry();
-        eventEmitter = Mockito.mock(EventEmitter.class);
-        prepareViewsForTests();
-        StatusBarUtils.saveStatusBarHeight(63);
-    }
-
-    @Test
-    public void createView_checkProperStructure() {
-        idleMainLooper();
-        assertThat(uut.getView()).isInstanceOf(CoordinatorLayout.class);
-        assertThat(uut.getView().getChildAt(uut.getView().getChildCount() - 1)).isInstanceOf(BottomTabsContainer.class);
-        assertThat(((CoordinatorLayout.LayoutParams) uut.getBottomTabsContainer().getLayoutParams()).gravity).isEqualTo(Gravity.BOTTOM);
-    }
-
-    @Test
-    public void createView_tabsWithoutIconsAreAccepted() {
-        tabOptions.bottomTabOptions.icon = new NullText();
-        prepareViewsForTests();
-        assertThat(uut.getBottomTabs().getItemsCount()).isEqualTo(tabs.size());
-    }
-
-    @Test
-    public void createView_showTitlesWhenAllTabsDontHaveIcons() {
-        tabOptions.bottomTabOptions.icon = new NullText();
-        assertThat(tabOptions.bottomTabsOptions.titleDisplayMode.hasValue()).isFalse();
-        prepareViewsForTests();
-        presenter.applyOptions(Options.EMPTY);
-        assertThat(bottomTabsContainer.getBottomTabs().getTitleState()).isEqualTo(AHBottomNavigation.TitleState.ALWAYS_SHOW);
-    }
-
-    @Test(expected = RuntimeException.class)
-    public void setTabs_ThrowWhenMoreThan5() {
-        tabs.add(new SimpleViewController(activity, childRegistry, "6", tabOptions));
-        createBottomTabs();
-    }
-
-    @Test
-    public void parentControllerIsSet() {
-        uut = createBottomTabs();
-        for (ViewController<?> tab : tabs) {
-            assertThat(tab.getParentController()).isEqualTo(uut);
-        }
-    }
-
-    @Test
-    public void setTabs_allChildViewsAreAttachedToHierarchy() {
-        uut.onViewWillAppear();
-        assertThat(uut.getView().getChildCount()).isEqualTo(6);
-        for (ViewController<?> child : uut.getChildControllers()) {
-            assertThat(child.getView().getParent()).isNotNull();
-        }
-    }
-
-    @Test
-    public void setTabs_firstChildIsVisibleOtherAreGone() {
-        uut.onViewWillAppear();
-        for (int i = 0; i < uut.getChildControllers().size(); i++) {
-            assertThat(uut.getView().getChildAt(i)).isEqualTo(tabs.get(i).getView());
-            assertThat(uut.getView().getChildAt(i).getVisibility()).isEqualTo(i == 0 ? View.VISIBLE : View.INVISIBLE);
-        }
-    }
-
-    @Test
-    public void onTabSelected() {
-        uut.ensureViewIsCreated();
-        assertThat(uut.getSelectedIndex()).isZero();
-        assertThat(((ViewController<?>) ((List<?>) uut.getChildControllers()).get(0)).getView().getVisibility()).isEqualTo(View.VISIBLE);
-
-        uut.onTabSelected(3, false);
-
-        assertThat(uut.getSelectedIndex()).isEqualTo(3);
-        assertThat(((ViewController<?>) ((List<?>) uut.getChildControllers()).get(0)).getView().getVisibility()).isEqualTo(View.INVISIBLE);
-        assertThat(((ViewController<?>) ((List<?>) uut.getChildControllers()).get(3)).getView().getVisibility()).isEqualTo(View.VISIBLE);
-        verify(eventEmitter).emitBottomTabSelected(0, 3);
-    }
-
-    @Test
-    public void onTabReSelected() {
-        uut.ensureViewIsCreated();
-        assertThat(uut.getSelectedIndex()).isZero();
-
-        uut.onTabSelected(0, true);
-
-        assertThat(uut.getSelectedIndex()).isEqualTo(0);
-        assertThat(((ViewController<?>) ((List<?>) uut.getChildControllers()).get(0)).getView().getParent()).isNotNull();
-        verify(eventEmitter).emitBottomTabSelected(0, 0);
-    }
-
-    @Test
-    public void handleBack_DelegatesToSelectedChild() {
-        uut.ensureViewIsCreated();
-        assertThat(uut.handleBack(new CommandListenerAdapter())).isFalse();
-        uut.selectTab(4);
-        assertThat(uut.handleBack(new CommandListenerAdapter())).isTrue();
-        verify(child5).handleBack(any());
-    }
-
-    @Test
-    public void applyChildOptions_bottomTabsOptionsAreClearedAfterApply() {
-        ParentController<?> parent = Mockito.mock(ParentController.class);
-        uut.setParentController(parent);
-
-        child1.options.bottomTabsOptions.backgroundColor = new ThemeColour(new Colour(Color.RED));
-        child1.onViewWillAppear();
-
-        ArgumentCaptor<Options> optionsCaptor = ArgumentCaptor.forClass(Options.class);
-        verify(parent).applyChildOptions(optionsCaptor.capture(), any());
-        assertThat(optionsCaptor.getValue().bottomTabsOptions.backgroundColor.hasValue()).isFalse();
-    }
-
-    @Test
-    public void applyOptions_bottomTabsCreateViewOnlyOnce() {
-        idleMainLooper();
-        verify(presenter).applyOptions(any());
-        verify(bottomTabsContainer.getBottomTabs(), times(2)).superCreateItems(); // first time when view is created, second time when options are applied
-    }
-
-    @Test
-    public void onSizeChanged_recreateItemsIfSizeHasChanged() {
-        int numberOfPreviousInvocations = 1;
-        bottomTabs.onSizeChanged(0, 0, 0, 0);
-        verify(bottomTabs, times(numberOfPreviousInvocations)).superCreateItems();
-
-        bottomTabs.onSizeChanged(100, 0, 0, 0);
-        verify(bottomTabs, times(numberOfPreviousInvocations)).superCreateItems();
-
-        bottomTabs.onSizeChanged(1080, 147, 0, 0);
-        verify(bottomTabs, times(numberOfPreviousInvocations + 1)).superCreateItems();
-
-        bottomTabs.onSizeChanged(1920, 147, 0, 0);
-        verify(bottomTabs, times(numberOfPreviousInvocations + 2)).superCreateItems();
-
-        when(bottomTabs.getItemsCount()).thenReturn(0);
-        bottomTabs.onSizeChanged(1080, 147, 0, 0);
-        verify(bottomTabs, times(numberOfPreviousInvocations + 2)).superCreateItems();
-    }
-
-    @Test
-    public void mergeOptions_currentTabIndex() {
-        uut.ensureViewIsCreated();
-        assertThat(uut.getSelectedIndex()).isZero();
-
-        Options options = new Options();
-        options.bottomTabsOptions.currentTabIndex = new Number(1);
-        uut.mergeOptions(options);
-        assertThat(uut.getSelectedIndex()).isOne();
-        verify(eventEmitter, times(0)).emitBottomTabSelected(any(Integer.class), any(Integer.class));
-    }
-
-    @Test
-    public void mergeOptions_drawBehind() {
-        assertThat(uut.getBottomInset(child1)).isEqualTo(uut.getBottomTabs().getHeight());
-
-        Options o1 = new Options();
-        o1.bottomTabsOptions.drawBehind = new Bool(true);
-        child1.mergeOptions(o1);
-        assertThat(uut.getBottomInset(child1)).isEqualTo(0);
-
-        Options o2 = new Options();
-        o2.topBar.title.text = new Text("Some text");
-        child1.mergeOptions(o1);
-        assertThat(uut.getBottomInset(child1)).isEqualTo(0);
-    }
-
-    @Test
-    public void mergeOptions_drawBehind_stack() {
-        uut.ensureViewIsCreated();
-        uut.selectTab(3);
-
-        assertThat(((MarginLayoutParams) stackChild.getView().getLayoutParams()).bottomMargin).isEqualTo(bottomTabs.getHeight());
-
-        Options o1 = new Options();
-        o1.bottomTabsOptions.drawBehind = new Bool(true);
-        stackChild.mergeOptions(o1);
-
-        assertThat(((MarginLayoutParams) stackChild.getView().getLayoutParams()).bottomMargin).isEqualTo(0);
-    }
-
-    @Test
-    public void mergeOptions_mergesBottomTabOptions() {
-        Options options = new Options();
-        uut.mergeOptions(options);
-        verify(bottomTabPresenter).mergeOptions(options);
-    }
-
-    @Test
-    public void applyChildOptions_resolvedOptionsAreUsed() {
-        Options childOptions = new Options();
-        SimpleViewController pushedScreen = new SimpleViewController(activity, childRegistry, "child4.1", childOptions);
-        disablePushAnimation(pushedScreen);
-        child4 = spyOnStack(pushedScreen);
-
-        tabs = new ArrayList<>(Collections.singletonList(child4));
-        tabsAttacher = new BottomTabsAttacher(tabs, presenter, Options.EMPTY);
-
-        initialOptions.bottomTabsOptions.currentTabIndex = new Number(0);
-        Options resolvedOptions = new Options();
-        uut = new BottomTabsController(activity,
-                tabs,
-                childRegistry,
-                eventEmitter,
-                imageLoaderMock,
-                "uut",
-                initialOptions,
-                new Presenter(activity, new Options()),
-                tabsAttacher,
-                presenter,
-                new BottomTabPresenter(activity, tabs, ImageLoaderMock.mock(), new TypefaceLoaderMock(), new Options())) {
-            @Override
-            public Options resolveCurrentOptions() {
-                return resolvedOptions;
-            }
-
-            @NonNull
-            @Override
-            protected BottomTabs createBottomTabs() {
-                return new BottomTabs(activity) {
-                    @Override
-                    protected void createItems() {
-
-                    }
-                };
-            }
-        };
-
-        activity.setContentView(uut.getView());
-        idleMainLooper();
-        verify(presenter, times(2)).applyChildOptions(eq(resolvedOptions), any());
-    }
-
-    @Test
-    public void child_mergeOptions_currentTabIndex() {
-        uut.ensureViewIsCreated();
-
-        assertThat(uut.getSelectedIndex()).isZero();
-
-        Options options = new Options();
-        options.bottomTabsOptions.currentTabIndex = new Number(1);
-        child1.mergeOptions(options);
-
-        assertThat(uut.getSelectedIndex()).isOne();
-    }
-
-    @Test
-    public void resolveCurrentOptions_returnsFirstTabIfInvokedBeforeViewIsCreated() {
-        uut = createBottomTabs();
-        assertThat(uut.getCurrentChild()).isEqualTo(tabs.get(0));
-    }
-
-    @Test
-    public void buttonPressInvokedOnCurrentTab() {
-        uut.ensureViewIsCreated();
-        uut.selectTab(4);
-
-        uut.sendOnNavigationButtonPressed("btn1");
-        verify(child5, times(1)).sendOnNavigationButtonPressed("btn1");
-    }
-
-    @Test
-    public void push() {
-        uut.selectTab(3);
-
-        SimpleViewController stackChild2 = new SimpleViewController(activity, childRegistry, "stackChild2", new Options());
-        disablePushAnimation(stackChild2);
-        hideBackButton(stackChild2);
-
-        assertThat(child4.size()).isEqualTo(1);
-        child4.push(stackChild2, new CommandListenerAdapter());
-        assertThat(child4.size()).isEqualTo(2);
-    }
-
-    @Test
-    public void oneTimeOptionsAreAppliedOnce() {
-        Options options = new Options();
-        options.bottomTabsOptions.currentTabIndex = new Number(1);
-
-        assertThat(uut.getSelectedIndex()).isZero();
-        uut.mergeOptions(options);
-        assertThat(uut.getSelectedIndex()).isOne();
-        assertThat(uut.options.bottomTabsOptions.currentTabIndex.hasValue()).isFalse();
-        assertThat(uut.initialOptions.bottomTabsOptions.currentTabIndex.hasValue()).isFalse();
-    }
-
-    @Test
-    public void selectTab() {
-        uut.selectTab(1);
-        verify(tabsAttacher).onTabSelected(tabs.get(1));
-    }
-
-    @Test
-    public void selectTab_onViewDidAppearIsInvokedAfterSelection() {
-        uut.selectTab(1);
-        verify(child2).onViewDidAppear();
-    }
-
-    @Test
-    public void creatingTabs_onViewDidAppearInvokedAfterInitialTabIndexSet() {
-        Options options = Options.EMPTY.copy();
-        options.bottomTabsOptions.currentTabIndex = new Number(1);
-        prepareViewsForTests(options.bottomTabsOptions);
-        idleMainLooper();
-        verify(tabs.get(0), times(0)).onViewDidAppear();
-        verify(tabs.get(1), times(1)).onViewDidAppear();
-        verify(tabs.get(2), times(0)).onViewDidAppear();
-        verify(tabs.get(3), times(0)).onViewDidAppear();
-        verify(tabs.get(4), times(0)).onViewDidAppear();
-    }
-
-    @Test
-    public void getTopInset() {
-        assertThat(child1.getTopInset()).isEqualTo(getStatusBarHeight());
-        assertThat(child2.getTopInset()).isEqualTo(getStatusBarHeight());
-
-        child1.options.statusBar.drawBehind = new Bool(true);
-        assertThat(child1.getTopInset()).isEqualTo(0);
-        assertThat(child2.getTopInset()).isEqualTo(getStatusBarHeight());
-
-        assertThat(stackChild.getTopInset()).isEqualTo(getStatusBarHeight() + child4.getTopBar().getHeight());
-    }
-
-    @Test
-    public void getBottomInset_defaultOptionsAreTakenIntoAccount() {
-        Options defaultOptions = new Options();
-        defaultOptions.bottomTabsOptions.visible = new Bool(false);
-
-        assertThat(uut.getBottomInset(child1)).isEqualTo(bottomTabs.getHeight());
-        uut.setDefaultOptions(defaultOptions);
-        assertThat(uut.getBottomInset(child1)).isZero();
-    }
-
-    @Test
-    public void destroy() {
-        uut.destroy();
-        verify(tabsAttacher).destroy();
-    }
-
-    private void prepareViewsForTests() {
-        prepareViewsForTests(initialOptions.bottomTabsOptions);
-    }
-
-    private void prepareViewsForTests(BottomTabsOptions bottomTabsOptions) {
-        perform(uut, ViewController::destroy);
-        bottomTabs = spy(new BottomTabs(activity) {
-            @Override
-            public void superCreateItems() {
-
-            }
-        });
-        bottomTabsContainer = spy(new BottomTabsContainer(activity, bottomTabs));
-
-        createChildren();
-        tabs = Arrays.asList(child1, child2, child3, child4, child5);
-        initialOptions.bottomTabsOptions = bottomTabsOptions;
-        presenter = spy(new BottomTabsPresenter(tabs, initialOptions, new BottomTabsAnimator()));
-        bottomTabPresenter = spy(new BottomTabPresenter(activity, tabs, ImageLoaderMock.mock(), new TypefaceLoaderMock(), initialOptions));
-        tabsAttacher = spy(new BottomTabsAttacher(tabs, presenter, initialOptions));
-        uut = createBottomTabs();
-        activity.setContentView(new FakeParentController(activity, childRegistry, uut).getView());
-    }
-
-    private void createChildren() {
-        child1 = spy(new SimpleViewController(activity, childRegistry, "child1", tabOptions));
-        child2 = spy(new SimpleViewController(activity, childRegistry, "child2", tabOptions));
-        child3 = spy(new SimpleViewController(activity, childRegistry, "child3", tabOptions));
-        stackChild = spy(new SimpleViewController(activity, childRegistry, "stackChild", tabOptions));
-        child4 = spyOnStack(stackChild);
-        child5 = spy(new SimpleViewController(activity, childRegistry, "child5", tabOptions));
-        when(child5.handleBack(any())).thenReturn(true);
-    }
-
-    private StackController spyOnStack(ViewController<?> initialChild) {
-        StackController build = TestUtils.newStackController(activity)
-                .setInitialOptions(tabOptions)
-                .build();
-        StackController stack = spy(build);
-        disablePushAnimation(initialChild);
-        stack.ensureViewIsCreated();
-        stack.push(initialChild, new CommandListenerAdapter());
-        return stack;
-    }
-
-    private BottomTabsController createBottomTabs() {
-        return new BottomTabsController(activity,
-                tabs,
-                childRegistry,
-                eventEmitter,
-                imageLoaderMock,
-                "uut",
-                initialOptions,
-                new Presenter(activity, initialOptions),
-                tabsAttacher,
-                presenter,
-                bottomTabPresenter) {
-            @Override
-            public void ensureViewIsCreated() {
-                super.ensureViewIsCreated();
-                uut.getView().layout(0, 0, 1000, 1000);
-            }
-
-            @NonNull
-            @Override
-            public BottomTabsLayout createView() {
-                BottomTabsLayout view = super.createView();
-                bottomTabs.getLayoutParams().height = 100;
-                return view;
-            }
-
-            @NonNull
-            @Override
-            protected BottomTabsContainer createBottomTabsContainer() {
-                return bottomTabsContainer;
-            }
-
-            @NonNull
-            @Override
-            protected BottomTabs createBottomTabs() {
-                return bottomTabs;
-            }
-        };
-    }
-
-    private int getStatusBarHeight() {
-        return StatusBarUtils.getStatusBarHeight(activity);
-    }
-}
diff --git a/node_modules/react-native-navigation/lib/android/app/src/test/java/com/reactnativenavigation/viewcontrollers/bottomtabs/BottomTabsControllerTest.kt b/node_modules/react-native-navigation/lib/android/app/src/test/java/com/reactnativenavigation/viewcontrollers/bottomtabs/BottomTabsControllerTest.kt
new file mode 100644
index 0000000..2d14b4c
--- /dev/null
+++ b/node_modules/react-native-navigation/lib/android/app/src/test/java/com/reactnativenavigation/viewcontrollers/bottomtabs/BottomTabsControllerTest.kt
@@ -0,0 +1,572 @@
+package com.reactnativenavigation.viewcontrollers.bottomtabs
+
+import android.app.Activity
+import android.graphics.Color
+import android.view.Gravity
+import android.view.View
+import android.view.ViewGroup.MarginLayoutParams
+import androidx.coordinatorlayout.widget.CoordinatorLayout
+import com.aurelhubert.ahbottomnavigation.AHBottomNavigation.TitleState
+import com.reactnativenavigation.BaseTest
+import com.reactnativenavigation.TestUtils
+import com.reactnativenavigation.mocks.ImageLoaderMock.mock
+import com.reactnativenavigation.mocks.SimpleViewController
+import com.reactnativenavigation.mocks.TypefaceLoaderMock
+import com.reactnativenavigation.options.BottomTabsOptions
+import com.reactnativenavigation.options.HwBackBottomTabsBehaviour
+import com.reactnativenavigation.options.Options
+import com.reactnativenavigation.options.params.*
+import com.reactnativenavigation.react.CommandListenerAdapter
+import com.reactnativenavigation.react.events.EventEmitter
+import com.reactnativenavigation.utils.OptionHelper
+import com.reactnativenavigation.utils.SystemUiUtils.getStatusBarHeight
+import com.reactnativenavigation.utils.SystemUiUtils.saveStatusBarHeight
+import com.reactnativenavigation.viewcontrollers.bottomtabs.attacher.BottomTabsAttacher
+import com.reactnativenavigation.viewcontrollers.child.ChildControllersRegistry
+import com.reactnativenavigation.viewcontrollers.fakes.FakeParentController
+import com.reactnativenavigation.viewcontrollers.parent.ParentController
+import com.reactnativenavigation.viewcontrollers.stack.StackController
+import com.reactnativenavigation.viewcontrollers.viewcontroller.Presenter
+import com.reactnativenavigation.viewcontrollers.viewcontroller.ViewController
+import com.reactnativenavigation.views.bottomtabs.BottomTabs
+import com.reactnativenavigation.views.bottomtabs.BottomTabsContainer
+import com.reactnativenavigation.views.bottomtabs.BottomTabsLayout
+import org.assertj.core.api.Java6Assertions
+import org.junit.Test
+import org.mockito.ArgumentCaptor
+import org.mockito.ArgumentMatchers
+import org.mockito.Mockito
+import org.mockito.kotlin.any
+import org.mockito.kotlin.eq
+import org.mockito.kotlin.times
+import java.util.*
+
+class BottomTabsControllerTest : BaseTest() {
+    private lateinit var activity: Activity
+    private lateinit var bottomTabs: BottomTabs
+    private lateinit var bottomTabsContainer: BottomTabsContainer
+    private lateinit var uut: BottomTabsController
+    private val initialOptions = Options()
+    private lateinit var child1: ViewController<*>
+    private lateinit var child2: ViewController<*>
+    private lateinit var child3: ViewController<*>
+    private lateinit var stackChild: ViewController<*>
+    private lateinit var child4: StackController
+    private lateinit var child5: ViewController<*>
+    private val tabOptions = OptionHelper.createBottomTabOptions()
+    private val imageLoaderMock = mock()
+    private lateinit var eventEmitter: EventEmitter
+    private lateinit var childRegistry: ChildControllersRegistry
+    private lateinit var tabs: MutableList<ViewController<*>>
+    private lateinit var presenter: BottomTabsPresenter
+    private lateinit var bottomTabPresenter: BottomTabPresenter
+    private lateinit var tabsAttacher: BottomTabsAttacher
+    override fun beforeEach() {
+        super.beforeEach()
+        activity = newActivity()
+        childRegistry = ChildControllersRegistry()
+        eventEmitter = Mockito.mock(EventEmitter::class.java)
+        prepareViewsForTests()
+        saveStatusBarHeight(63)
+    }
+
+    @Test
+    fun createView_checkProperStructure() {
+        idleMainLooper()
+        Java6Assertions.assertThat(uut.view).isInstanceOf(CoordinatorLayout::class.java)
+        Java6Assertions.assertThat(uut.view.getChildAt(uut.view.childCount - 1)).isInstanceOf(
+            BottomTabsContainer::class.java
+        )
+        Java6Assertions.assertThat((uut.bottomTabsContainer.layoutParams as CoordinatorLayout.LayoutParams).gravity)
+            .isEqualTo(Gravity.BOTTOM)
+    }
+
+    @Test
+    fun createView_tabsWithoutIconsAreAccepted() {
+        tabOptions.bottomTabOptions.icon = NullText()
+        prepareViewsForTests()
+        Java6Assertions.assertThat(uut.bottomTabs.itemsCount).isEqualTo(tabs.size)
+    }
+
+    @Test
+    fun createView_showTitlesWhenAllTabsDontHaveIcons() {
+        tabOptions.bottomTabOptions.icon = NullText()
+        Java6Assertions.assertThat(tabOptions.bottomTabsOptions.titleDisplayMode.hasValue()).isFalse
+        prepareViewsForTests()
+        presenter.applyOptions(Options.EMPTY)
+        Java6Assertions.assertThat(bottomTabsContainer.bottomTabs.titleState).isEqualTo(TitleState.ALWAYS_SHOW)
+    }
+
+    @Test(expected = RuntimeException::class)
+    fun setTabs_ThrowWhenMoreThan5() {
+        tabs.add(SimpleViewController(activity, childRegistry, "6", tabOptions))
+        createBottomTabs()
+        idleMainLooper()
+    }
+
+    @Test
+    fun parentControllerIsSet() {
+        uut = createBottomTabs()
+        for (tab in tabs) {
+            Java6Assertions.assertThat(tab.parentController).isEqualTo(uut)
+        }
+    }
+
+    @Test
+    fun setTabs_allChildViewsAreAttachedToHierarchy() {
+        uut.onViewWillAppear()
+        Java6Assertions.assertThat(uut.view.childCount).isEqualTo(6)
+        for (child in uut.childControllers) {
+            Java6Assertions.assertThat(child.view.parent).isNotNull
+        }
+    }
+
+    @Test
+    fun setTabs_firstChildIsVisibleOtherAreGone() {
+        uut.onViewWillAppear()
+        for (i in uut.childControllers.indices) {
+            Java6Assertions.assertThat(uut.view.getChildAt(i)).isEqualTo(tabs[i].view)
+            Java6Assertions.assertThat(uut.view.getChildAt(i).visibility)
+                .isEqualTo(if (i == 0) View.VISIBLE else View.INVISIBLE)
+        }
+    }
+
+    @Test
+    fun onTabSelected() {
+        uut.ensureViewIsCreated()
+        Java6Assertions.assertThat(uut.selectedIndex).isZero
+        Java6Assertions.assertThat(((uut.childControllers as List<*>)[0] as ViewController<*>).view.visibility)
+            .isEqualTo(
+                View.VISIBLE
+            )
+        uut.onTabSelected(3, false)
+        Java6Assertions.assertThat(uut.selectedIndex).isEqualTo(3)
+        Java6Assertions.assertThat(((uut.childControllers as List<*>)[0] as ViewController<*>).view.visibility)
+            .isEqualTo(
+                View.INVISIBLE
+            )
+        Java6Assertions.assertThat(((uut.childControllers as List<*>)[3] as ViewController<*>).view.visibility)
+            .isEqualTo(
+                View.VISIBLE
+            )
+        Mockito.verify(eventEmitter).emitBottomTabSelected(0, 3)
+    }
+
+    @Test
+    fun onTabReSelected() {
+        uut.ensureViewIsCreated()
+        Java6Assertions.assertThat(uut.selectedIndex).isZero
+        uut.onTabSelected(0, true)
+        Java6Assertions.assertThat(uut.selectedIndex).isEqualTo(0)
+        Java6Assertions.assertThat(((uut.childControllers as List<*>)[0] as ViewController<*>).view.parent).isNotNull
+        Mockito.verify(eventEmitter).emitBottomTabSelected(0, 0)
+    }
+
+    @Test
+    fun handleBack_DelegatesToSelectedChild() {
+        uut.ensureViewIsCreated()
+        Java6Assertions.assertThat(uut.handleBack(CommandListenerAdapter())).isFalse
+        uut.selectTab(4)
+        Java6Assertions.assertThat(uut.handleBack(CommandListenerAdapter())).isTrue
+        Mockito.verify(child5).handleBack(ArgumentMatchers.any())
+    }
+
+    @Test
+    fun `handleBack - PrevSelection - reselect tab selection history of navigation when root has bottom tabs`() {
+        val options = Options().apply {
+            hardwareBack.bottomTabOnPress = HwBackBottomTabsBehaviour.PrevSelection
+        }
+        prepareViewsForTests(options = options)
+        idleMainLooper()
+        Java6Assertions.assertThat(uut.selectedIndex).isEqualTo(0)
+
+        uut.selectTab(1)
+        Java6Assertions.assertThat(uut.selectedIndex).isEqualTo(1)
+
+        uut.selectTab(3)
+        Java6Assertions.assertThat(uut.selectedIndex).isEqualTo(3)
+
+        uut.selectTab(2)
+        Java6Assertions.assertThat(uut.selectedIndex).isEqualTo(2)
+
+        Java6Assertions.assertThat(uut.handleBack(CommandListenerAdapter())).isTrue
+        Java6Assertions.assertThat(uut.selectedIndex).isEqualTo(3)
+
+        Java6Assertions.assertThat(uut.handleBack(CommandListenerAdapter())).isTrue
+        Java6Assertions.assertThat(uut.selectedIndex).isEqualTo(1)
+
+        Java6Assertions.assertThat(uut.handleBack(CommandListenerAdapter())).isTrue
+        Java6Assertions.assertThat(uut.selectedIndex).isEqualTo(0)
+
+        Java6Assertions.assertThat(uut.handleBack(CommandListenerAdapter())).isFalse
+    }
+
+    @Test
+    fun `handleBack - JumpToFirst - reselect first tab`() {
+        val options = Options().apply {
+            hardwareBack.bottomTabOnPress = HwBackBottomTabsBehaviour.JumpToFirst
+        }
+        prepareViewsForTests(options = options)
+        idleMainLooper()
+        Java6Assertions.assertThat(uut.selectedIndex).isEqualTo(0)
+
+        uut.selectTab(1)
+        Java6Assertions.assertThat(uut.selectedIndex).isEqualTo(1)
+
+        uut.selectTab(3)
+        Java6Assertions.assertThat(uut.selectedIndex).isEqualTo(3)
+
+        uut.selectTab(2)
+        Java6Assertions.assertThat(uut.selectedIndex).isEqualTo(2)
+
+        Java6Assertions.assertThat(uut.handleBack(CommandListenerAdapter())).isTrue
+        Java6Assertions.assertThat(uut.selectedIndex).isEqualTo(0)
+
+        Java6Assertions.assertThat(uut.handleBack(CommandListenerAdapter())).isFalse
+    }
+
+    @Test
+    fun `handleBack - Default - should exit app with no reselection`() {
+
+        prepareViewsForTests()
+        idleMainLooper()
+        Java6Assertions.assertThat(uut.selectedIndex).isEqualTo(0)
+
+        uut.selectTab(1)
+        Java6Assertions.assertThat(uut.selectedIndex).isEqualTo(1)
+
+        uut.selectTab(3)
+        Java6Assertions.assertThat(uut.selectedIndex).isEqualTo(3)
+
+        uut.selectTab(2)
+        Java6Assertions.assertThat(uut.selectedIndex).isEqualTo(2)
+
+        Java6Assertions.assertThat(uut.handleBack(CommandListenerAdapter())).isFalse
+    }
+
+    @Test
+    fun `handleBack - Exit - reselect first tab`() {
+        val options = Options().apply {
+            hardwareBack.bottomTabOnPress = HwBackBottomTabsBehaviour.Exit
+        }
+        prepareViewsForTests(options = options)
+        idleMainLooper()
+        Java6Assertions.assertThat(uut.selectedIndex).isEqualTo(0)
+
+        uut.selectTab(1)
+        Java6Assertions.assertThat(uut.selectedIndex).isEqualTo(1)
+
+        uut.selectTab(3)
+        Java6Assertions.assertThat(uut.selectedIndex).isEqualTo(3)
+
+        uut.selectTab(2)
+        Java6Assertions.assertThat(uut.selectedIndex).isEqualTo(2)
+
+        Java6Assertions.assertThat(uut.handleBack(CommandListenerAdapter())).isFalse
+    }
+
+    @Test
+    fun applyChildOptions_bottomTabsOptionsAreClearedAfterApply() {
+        val parent = Mockito.mock(ParentController::class.java)
+        uut.parentController = parent
+        child1.options.bottomTabsOptions.backgroundColor = ThemeColour(Colour(Color.RED))
+        child1.onViewWillAppear()
+        val optionsCaptor = ArgumentCaptor.forClass(
+            Options::class.java
+        )
+        Mockito.verify(parent).applyChildOptions(optionsCaptor.capture(), ArgumentMatchers.any())
+        Java6Assertions.assertThat(optionsCaptor.value.bottomTabsOptions.backgroundColor.hasValue()).isFalse
+    }
+
+    @Test
+    fun applyOptions_bottomTabsCreateViewOnlyOnce() {
+        idleMainLooper()
+        Mockito.verify(presenter).applyOptions(any())
+        Mockito.verify(bottomTabsContainer.bottomTabs, times(2))
+            .superCreateItems() // first time when view is created, second time when options are applied
+    }
+
+    @Test
+    fun onSizeChanged_recreateItemsIfSizeHasChanged() {
+        val numberOfPreviousInvocations = 1
+        bottomTabs.onSizeChanged(0, 0, 0, 0)
+        Mockito.verify(bottomTabs, Mockito.times(numberOfPreviousInvocations)).superCreateItems()
+        bottomTabs.onSizeChanged(100, 0, 0, 0)
+        Mockito.verify(bottomTabs, Mockito.times(numberOfPreviousInvocations)).superCreateItems()
+        bottomTabs.onSizeChanged(1080, 147, 0, 0)
+        Mockito.verify(bottomTabs, Mockito.times(numberOfPreviousInvocations + 1)).superCreateItems()
+        bottomTabs.onSizeChanged(1920, 147, 0, 0)
+        Mockito.verify(bottomTabs, Mockito.times(numberOfPreviousInvocations + 2)).superCreateItems()
+        Mockito.`when`(bottomTabs.itemsCount).thenReturn(0)
+        bottomTabs.onSizeChanged(1080, 147, 0, 0)
+        Mockito.verify(bottomTabs, Mockito.times(numberOfPreviousInvocations + 2)).superCreateItems()
+    }
+
+    @Test
+    fun mergeOptions_currentTabIndex() {
+        uut.ensureViewIsCreated()
+        Java6Assertions.assertThat(uut.selectedIndex).isZero
+        val options = Options()
+        options.bottomTabsOptions.currentTabIndex = Number(1)
+        uut.mergeOptions(options)
+        Java6Assertions.assertThat(uut.selectedIndex).isOne
+        Mockito.verify(eventEmitter, Mockito.times(0)).emitBottomTabSelected(
+            ArgumentMatchers.any(
+                Int::class.java
+            ), ArgumentMatchers.any(Int::class.java)
+        )
+    }
+
+    @Test
+    fun mergeOptions_drawBehind() {
+        Java6Assertions.assertThat(uut.getBottomInset(child1)).isEqualTo(uut.bottomTabs.height)
+        val o1 = Options()
+        o1.bottomTabsOptions.drawBehind = Bool(true)
+        child1.mergeOptions(o1)
+        Java6Assertions.assertThat(uut.getBottomInset(child1)).isEqualTo(0)
+        val o2 = Options()
+        o2.topBar.title.text = Text("Some text")
+        child1.mergeOptions(o1)
+        Java6Assertions.assertThat(uut.getBottomInset(child1)).isEqualTo(0)
+    }
+
+    @Test
+    fun mergeOptions_drawBehind_stack() {
+        uut.ensureViewIsCreated()
+        uut.selectTab(3)
+        Java6Assertions.assertThat((stackChild.view.layoutParams as MarginLayoutParams).bottomMargin).isEqualTo(
+            bottomTabs.height
+        )
+        val o1 = Options()
+        o1.bottomTabsOptions.drawBehind = Bool(true)
+        stackChild.mergeOptions(o1)
+        Java6Assertions.assertThat((stackChild.view.layoutParams as MarginLayoutParams).bottomMargin).isEqualTo(0)
+    }
+
+    @Test
+    fun mergeOptions_mergesBottomTabOptions() {
+        val options = Options()
+        uut.mergeOptions(options)
+        Mockito.verify(bottomTabPresenter).mergeOptions(options)
+    }
+
+    @Test
+    fun applyChildOptions_resolvedOptionsAreUsed() {
+        val childOptions = Options()
+        val pushedScreen = SimpleViewController(activity, childRegistry, "child4.1", childOptions)
+        disablePushAnimation(pushedScreen)
+        child4 = spyOnStack(pushedScreen)
+        tabs = ArrayList(listOf(child4))
+        tabsAttacher = BottomTabsAttacher(tabs, presenter, Options.EMPTY)
+        initialOptions.bottomTabsOptions.currentTabIndex = Number(0)
+        val resolvedOptions = Options()
+        uut = object : BottomTabsController(
+            activity,
+            tabs,
+            childRegistry,
+            eventEmitter,
+            imageLoaderMock,
+            "uut",
+            initialOptions,
+            Presenter(activity, Options()),
+            tabsAttacher,
+            presenter,
+            BottomTabPresenter(activity, tabs, mock(), TypefaceLoaderMock(), Options())
+        ) {
+            override fun resolveCurrentOptions(): Options {
+                return resolvedOptions
+            }
+
+            override fun createBottomTabs(): BottomTabs {
+                return object : BottomTabs(activity) {
+                    override fun createItems() {}
+                }
+            }
+        }
+        activity.setContentView(uut.view)
+        idleMainLooper()
+        Mockito.verify(presenter, Mockito.times(2))
+            .applyChildOptions(eq(resolvedOptions), any())
+    }
+
+    @Test
+    fun child_mergeOptions_currentTabIndex() {
+        uut.ensureViewIsCreated()
+        Java6Assertions.assertThat(uut.selectedIndex).isZero
+        val options = Options()
+        options.bottomTabsOptions.currentTabIndex = Number(1)
+        child1.mergeOptions(options)
+        Java6Assertions.assertThat(uut.selectedIndex).isOne
+    }
+
+    @Test
+    fun resolveCurrentOptions_returnsFirstTabIfInvokedBeforeViewIsCreated() {
+        uut = createBottomTabs()
+        Java6Assertions.assertThat(uut.currentChild).isEqualTo(tabs[0])
+    }
+
+    @Test
+    fun buttonPressInvokedOnCurrentTab() {
+        uut.ensureViewIsCreated()
+        uut.selectTab(4)
+        uut.sendOnNavigationButtonPressed("btn1")
+        Mockito.verify(child5, Mockito.times(1)).sendOnNavigationButtonPressed("btn1")
+    }
+
+    @Test
+    fun push() {
+        uut.selectTab(3)
+        val stackChild2 = SimpleViewController(activity, childRegistry, "stackChild2", Options())
+        disablePushAnimation(stackChild2)
+        TestUtils.hideBackButton(stackChild2)
+        Java6Assertions.assertThat(child4.size()).isEqualTo(1)
+        child4.push(stackChild2, CommandListenerAdapter())
+        Java6Assertions.assertThat(child4.size()).isEqualTo(2)
+    }
+
+    @Test
+    fun oneTimeOptionsAreAppliedOnce() {
+        val options = Options()
+        options.bottomTabsOptions.currentTabIndex = Number(1)
+        Java6Assertions.assertThat(uut.selectedIndex).isZero
+        uut.mergeOptions(options)
+        Java6Assertions.assertThat(uut.selectedIndex).isOne
+        Java6Assertions.assertThat(uut.options.bottomTabsOptions.currentTabIndex.hasValue()).isFalse
+        Java6Assertions.assertThat(uut.initialOptions.bottomTabsOptions.currentTabIndex.hasValue()).isFalse
+    }
+
+    @Test
+    fun selectTab() {
+        uut.selectTab(1)
+        Mockito.verify(tabsAttacher).onTabSelected(tabs[1])
+    }
+
+    @Test
+    fun selectTab_onViewDidAppearIsInvokedAfterSelection() {
+        uut.selectTab(1)
+        Mockito.verify(child2).onViewDidAppear()
+    }
+
+    @Test
+    fun creatingTabs_onViewDidAppearInvokedAfterInitialTabIndexSet() {
+        val options = Options.EMPTY.copy()
+        options.bottomTabsOptions.currentTabIndex = Number(1)
+        prepareViewsForTests(options.bottomTabsOptions)
+        idleMainLooper()
+        Mockito.verify(tabs[0], Mockito.times(0)).onViewDidAppear()
+        Mockito.verify(tabs[1], Mockito.times(1)).onViewDidAppear()
+        Mockito.verify(tabs[2], Mockito.times(0)).onViewDidAppear()
+        Mockito.verify(tabs[3], Mockito.times(0)).onViewDidAppear()
+        Mockito.verify(tabs[4], Mockito.times(0)).onViewDidAppear()
+    }
+
+    @Test
+    fun topInset() {
+        Java6Assertions.assertThat(child1.topInset).isEqualTo(statusBarHeight)
+        Java6Assertions.assertThat(child2.topInset).isEqualTo(statusBarHeight)
+        child1.options.statusBar.drawBehind = Bool(true)
+        Java6Assertions.assertThat(child1.topInset).isEqualTo(0)
+        Java6Assertions.assertThat(child2.topInset).isEqualTo(statusBarHeight)
+        Java6Assertions.assertThat(stackChild.topInset).isEqualTo(statusBarHeight + child4.topBar.height)
+    }
+
+    @Test
+    fun bottomInset_defaultOptionsAreTakenIntoAccount() {
+        val defaultOptions = Options()
+        defaultOptions.bottomTabsOptions.visible = Bool(false)
+        Java6Assertions.assertThat(uut.getBottomInset(child1)).isEqualTo(bottomTabs.height)
+        uut.setDefaultOptions(defaultOptions)
+        Java6Assertions.assertThat(uut.getBottomInset(child1)).isZero
+    }
+
+    @Test
+    fun destroy() {
+        uut.destroy()
+        Mockito.verify(tabsAttacher).destroy()
+    }
+
+    private fun prepareViewsForTests(
+        bottomTabsOptions: BottomTabsOptions = initialOptions.bottomTabsOptions,
+        options: Options = initialOptions, defaultOptions: Options = initialOptions
+    ) {
+        if(::uut.isInitialized){
+            uut.destroy()
+        }
+//        ObjectUtils.perform(uut, { obj: BottomTabsController -> obj.destroy() })
+        bottomTabs = Mockito.spy(object : BottomTabs(activity) {
+            override fun superCreateItems() {}
+        })
+        bottomTabsContainer = Mockito.spy(BottomTabsContainer(activity, bottomTabs))
+        createChildren()
+        tabs = mutableListOf(child1, child2, child3, child4, child5)
+        defaultOptions.bottomTabsOptions = bottomTabsOptions
+        presenter = Mockito.spy(BottomTabsPresenter(tabs, defaultOptions, BottomTabsAnimator()))
+        bottomTabPresenter =
+            Mockito.spy(BottomTabPresenter(activity, tabs, mock(), TypefaceLoaderMock(), defaultOptions))
+        tabsAttacher = Mockito.spy(BottomTabsAttacher(tabs, presenter, defaultOptions))
+        uut = createBottomTabs(options = options, defaultOptions = defaultOptions)
+        activity.setContentView(FakeParentController(activity, childRegistry, uut).view)
+    }
+
+    private fun createChildren() {
+        child1 = Mockito.spy(SimpleViewController(activity, childRegistry, "child1", tabOptions))
+        child2 = Mockito.spy(SimpleViewController(activity, childRegistry, "child2", tabOptions))
+        child3 = Mockito.spy(SimpleViewController(activity, childRegistry, "child3", tabOptions))
+        stackChild = Mockito.spy(SimpleViewController(activity, childRegistry, "stackChild", tabOptions))
+        child4 = spyOnStack(stackChild)
+        child5 = Mockito.spy(SimpleViewController(activity, childRegistry, "child5", tabOptions))
+        Mockito.`when`(child5.handleBack(any())).thenReturn(true)
+    }
+
+    private fun spyOnStack(initialChild: ViewController<*>?): StackController {
+        val build = TestUtils.newStackController(activity)
+            .setInitialOptions(tabOptions)
+            .build()
+        val stack = Mockito.spy(build)
+        disablePushAnimation(initialChild)
+        stack.ensureViewIsCreated()
+        stack.push(initialChild, CommandListenerAdapter())
+        return stack
+    }
+
+    private fun createBottomTabs(
+        options: Options = initialOptions,
+        defaultOptions: Options = initialOptions
+    ): BottomTabsController {
+        return object : BottomTabsController(
+            activity,
+            tabs,
+            childRegistry,
+            eventEmitter,
+            imageLoaderMock,
+            "uut",
+            options,
+            Presenter(activity, defaultOptions),
+            tabsAttacher,
+            presenter,
+            bottomTabPresenter
+        ) {
+            override fun ensureViewIsCreated() {
+                super.ensureViewIsCreated()
+                uut.view.layout(0, 0, 1000, 1000)
+            }
+
+            override fun createView(): BottomTabsLayout {
+                val view = super.createView()
+                this@BottomTabsControllerTest.bottomTabs.layoutParams.height = 100
+                return view
+            }
+
+            override fun createBottomTabsContainer(): BottomTabsContainer {
+                return this@BottomTabsControllerTest.bottomTabsContainer
+            }
+
+            override fun createBottomTabs(): BottomTabs {
+                return this@BottomTabsControllerTest.bottomTabs
+            }
+        }
+    }
+
+    private val statusBarHeight: Int
+        get() = getStatusBarHeight(activity)
+}
\ No newline at end of file
diff --git a/node_modules/react-native-navigation/lib/android/app/src/test/java/com/reactnativenavigation/viewcontrollers/bottomtabs/BottomTabsPresenterTest.kt b/node_modules/react-native-navigation/lib/android/app/src/test/java/com/reactnativenavigation/viewcontrollers/bottomtabs/BottomTabsPresenterTest.kt
index 1d52f94..3b01a96 100644
--- a/node_modules/react-native-navigation/lib/android/app/src/test/java/com/reactnativenavigation/viewcontrollers/bottomtabs/BottomTabsPresenterTest.kt
+++ b/node_modules/react-native-navigation/lib/android/app/src/test/java/com/reactnativenavigation/viewcontrollers/bottomtabs/BottomTabsPresenterTest.kt
@@ -3,7 +3,7 @@ package com.reactnativenavigation.viewcontrollers.bottomtabs
 import android.animation.AnimatorSet
 import android.content.res.Configuration
 import android.graphics.Color
-import com.nhaarman.mockitokotlin2.*
+import org.mockito.kotlin.*
 import com.reactnativenavigation.BaseTest
 import com.reactnativenavigation.mocks.SimpleViewController
 import com.reactnativenavigation.options.Options
diff --git a/node_modules/react-native-navigation/lib/android/app/src/test/java/com/reactnativenavigation/viewcontrollers/child/ChildControllerTest.java b/node_modules/react-native-navigation/lib/android/app/src/test/java/com/reactnativenavigation/viewcontrollers/child/ChildControllerTest.java
index e32434e..500a413 100644
--- a/node_modules/react-native-navigation/lib/android/app/src/test/java/com/reactnativenavigation/viewcontrollers/child/ChildControllerTest.java
+++ b/node_modules/react-native-navigation/lib/android/app/src/test/java/com/reactnativenavigation/viewcontrollers/child/ChildControllerTest.java
@@ -32,6 +32,7 @@ public class ChildControllerTest extends BaseTest {
             }
         };
         ParentController<?> parent = Mockito.mock(ParentController.class);
+        Mockito.when(parent.resolveChildOptions(uut)).thenReturn(Options.EMPTY);
         uut.setParentController(parent);
     }
 
@@ -55,7 +56,7 @@ public class ChildControllerTest extends BaseTest {
 
         Options options = new Options();
         uut.mergeOptions(options);
-        verify(presenter).mergeOptions(uut.getView(), options);
+        verify(presenter).mergeOptions(uut, options);
     }
 
     @Test
diff --git a/node_modules/react-native-navigation/lib/android/app/src/test/java/com/reactnativenavigation/viewcontrollers/component/ComponentViewControllerTest.java b/node_modules/react-native-navigation/lib/android/app/src/test/java/com/reactnativenavigation/viewcontrollers/component/ComponentViewControllerTest.java
index 2c14c93..d112d17 100644
--- a/node_modules/react-native-navigation/lib/android/app/src/test/java/com/reactnativenavigation/viewcontrollers/component/ComponentViewControllerTest.java
+++ b/node_modules/react-native-navigation/lib/android/app/src/test/java/com/reactnativenavigation/viewcontrollers/component/ComponentViewControllerTest.java
@@ -11,7 +11,7 @@ import com.reactnativenavigation.mocks.TestComponentLayout;
 import com.reactnativenavigation.mocks.TestReactView;
 import com.reactnativenavigation.options.Options;
 import com.reactnativenavigation.options.params.Bool;
-import com.reactnativenavigation.utils.StatusBarUtils;
+import com.reactnativenavigation.utils.SystemUiUtils;
 import com.reactnativenavigation.views.component.ComponentLayout;
 
 import org.assertj.core.api.Java6Assertions;
@@ -31,7 +31,7 @@ public class ComponentViewControllerTest extends BaseTest {
     public void beforeEach() {
         super.beforeEach();
         activity = newActivity();
-        StatusBarUtils.saveStatusBarHeight(63);
+        SystemUiUtils.saveStatusBarHeight(63);
         view = Mockito.spy(new TestComponentLayout(activity, new TestReactView(activity)));
         parent = TestUtils.newStackController(activity).build();
         Presenter presenter = new Presenter(activity, new Options());
@@ -138,7 +138,7 @@ public class ComponentViewControllerTest extends BaseTest {
         Options options = new Options();
         Java6Assertions.assertThat(uut.isViewShown()).isFalse();
         uut.mergeOptions(options);
-        Mockito.verifyZeroInteractions(presenter);
+        Mockito.verifyNoInteractions(presenter);
 
         Mockito.when(uut.isViewShown()).thenReturn(true);
         uut.mergeOptions(options);
@@ -156,13 +156,13 @@ public class ComponentViewControllerTest extends BaseTest {
     public void getTopInset_returnsStatusBarHeight() {
         //noinspection ConstantConditions
         uut.setParentController(null);
-        Java6Assertions.assertThat(uut.getTopInset()).isEqualTo(StatusBarUtils.getStatusBarHeight(activity));
+        Java6Assertions.assertThat(uut.getTopInset()).isEqualTo(SystemUiUtils.getStatusBarHeight(activity));
     }
 
     @Test
     public void getTopInset_resolveWithParent() {
         Java6Assertions
-                .assertThat(uut.getTopInset()).isEqualTo(StatusBarUtils.getStatusBarHeight(activity) + parent.getTopInset(uut));
+                .assertThat(uut.getTopInset()).isEqualTo(SystemUiUtils.getStatusBarHeight(activity) + parent.getTopInset(uut));
     }
 
     @Test
diff --git a/node_modules/react-native-navigation/lib/android/app/src/test/java/com/reactnativenavigation/viewcontrollers/fakes/FakeParentController.kt b/node_modules/react-native-navigation/lib/android/app/src/test/java/com/reactnativenavigation/viewcontrollers/fakes/FakeParentController.kt
index a6811a2..bf6a454 100644
--- a/node_modules/react-native-navigation/lib/android/app/src/test/java/com/reactnativenavigation/viewcontrollers/fakes/FakeParentController.kt
+++ b/node_modules/react-native-navigation/lib/android/app/src/test/java/com/reactnativenavigation/viewcontrollers/fakes/FakeParentController.kt
@@ -2,7 +2,7 @@ package com.reactnativenavigation.viewcontrollers.fakes
 
 import android.app.Activity
 import androidx.coordinatorlayout.widget.CoordinatorLayout
-import com.nhaarman.mockitokotlin2.mock
+import org.mockito.kotlin.mock
 import com.reactnativenavigation.options.Options
 import com.reactnativenavigation.viewcontrollers.viewcontroller.Presenter
 import com.reactnativenavigation.utils.CompatUtils
diff --git a/node_modules/react-native-navigation/lib/android/app/src/test/java/com/reactnativenavigation/viewcontrollers/modal/ModalAnimatorTest.kt b/node_modules/react-native-navigation/lib/android/app/src/test/java/com/reactnativenavigation/viewcontrollers/modal/ModalAnimatorTest.kt
index 4ec558d..8b01f72 100644
--- a/node_modules/react-native-navigation/lib/android/app/src/test/java/com/reactnativenavigation/viewcontrollers/modal/ModalAnimatorTest.kt
+++ b/node_modules/react-native-navigation/lib/android/app/src/test/java/com/reactnativenavigation/viewcontrollers/modal/ModalAnimatorTest.kt
@@ -1,7 +1,7 @@
 package com.reactnativenavigation.viewcontrollers.modal
 
 import android.app.Activity
-import com.nhaarman.mockitokotlin2.*
+import org.mockito.kotlin.*
 import com.reactnativenavigation.BaseTest
 import com.reactnativenavigation.mocks.SimpleViewController
 import com.reactnativenavigation.options.*
diff --git a/node_modules/react-native-navigation/lib/android/app/src/test/java/com/reactnativenavigation/viewcontrollers/modal/ModalPresenterTest.java b/node_modules/react-native-navigation/lib/android/app/src/test/java/com/reactnativenavigation/viewcontrollers/modal/ModalPresenterTest.java
index 6450567..b983153 100644
--- a/node_modules/react-native-navigation/lib/android/app/src/test/java/com/reactnativenavigation/viewcontrollers/modal/ModalPresenterTest.java
+++ b/node_modules/react-native-navigation/lib/android/app/src/test/java/com/reactnativenavigation/viewcontrollers/modal/ModalPresenterTest.java
@@ -34,7 +34,7 @@ import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.spy;
 import static org.mockito.Mockito.times;
 import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.verifyZeroInteractions;
+import static org.mockito.Mockito.verifyNoInteractions;
 
 public class ModalPresenterTest extends BaseTest {
     private static final String MODAL_ID_1 = "modalId1";
@@ -50,6 +50,7 @@ public class ModalPresenterTest extends BaseTest {
 
     @Override
     public void beforeEach() {
+        super.beforeEach();
         Activity activity = newActivity();
         ChildControllersRegistry childRegistry = new ChildControllersRegistry();
 
@@ -108,7 +109,7 @@ public class ModalPresenterTest extends BaseTest {
         defaultOptions.animations.showModal = TransitionAnimationOptionsKt.parseTransitionAnimationOptions(disabledShowModalAnimation);
         uut.setDefaultOptions(defaultOptions);
         uut.showModal(modal1, root, new CommandListenerAdapter());
-        verifyZeroInteractions(animator);
+        verifyNoInteractions(animator);
     }
 
     @Test
@@ -162,7 +163,7 @@ public class ModalPresenterTest extends BaseTest {
         modal1.options.animations.showModal.setWaitForRender(new Bool(true));
         uut.showModal(modal1, root, new CommandListenerAdapter());
         verify(modal1).addOnAppearedListener(any());
-        verifyZeroInteractions(animator);
+        verifyNoInteractions(animator);
     }
 
     @Test
@@ -210,6 +211,7 @@ public class ModalPresenterTest extends BaseTest {
         uut.setRootLayout(spy);
 
         uut.showModal(modal1, root, new CommandListenerAdapter());
+        idleMainLooper();
         uut.dismissModal(modal1, root, root, new CommandListenerAdapter());
 
         verify(spy).addView(root.getView(), 0);
@@ -237,6 +239,7 @@ public class ModalPresenterTest extends BaseTest {
         verify(modal1).onViewWillAppear();
 
         uut.showModal(modal2, modal1, new CommandListenerAdapter());
+        idleMainLooper();
         assertThat(modal1.getView().getParent()).isNull();
 
         Shadows.shadowOf(Looper.getMainLooper()).idle();
@@ -253,6 +256,7 @@ public class ModalPresenterTest extends BaseTest {
 
         uut.showModal(modal1, root, new CommandListenerAdapter());
         uut.showModal(modal2, modal1, new CommandListenerAdapter());
+        idleMainLooper();
         assertThat(modal1.getView().getParent()).isNull();
         assertThat(root.getView().getParent()).isNull();
 
diff --git a/node_modules/react-native-navigation/lib/android/app/src/test/java/com/reactnativenavigation/viewcontrollers/modal/ModalStackTest.java b/node_modules/react-native-navigation/lib/android/app/src/test/java/com/reactnativenavigation/viewcontrollers/modal/ModalStackTest.java
index 733f517..db22bb8 100644
--- a/node_modules/react-native-navigation/lib/android/app/src/test/java/com/reactnativenavigation/viewcontrollers/modal/ModalStackTest.java
+++ b/node_modules/react-native-navigation/lib/android/app/src/test/java/com/reactnativenavigation/viewcontrollers/modal/ModalStackTest.java
@@ -13,7 +13,7 @@ import com.reactnativenavigation.react.events.EventEmitter;
 import com.reactnativenavigation.viewcontrollers.child.ChildControllersRegistry;
 import com.reactnativenavigation.viewcontrollers.stack.StackController;
 import com.reactnativenavigation.viewcontrollers.viewcontroller.ViewController;
-
+import com.reactnativenavigation.options.TransitionAnimationOptions;
 import org.junit.Test;
 import org.mockito.Mockito;
 
@@ -30,7 +30,8 @@ import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.spy;
 import static org.mockito.Mockito.times;
 import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.verifyZeroInteractions;
+import static org.mockito.Mockito.verifyNoInteractions;
+import static org.mockito.Mockito.verifyNoMoreInteractions;
 import static org.mockito.Mockito.when;
 
 public class ModalStackTest extends BaseTest {
@@ -54,6 +55,7 @@ public class ModalStackTest extends BaseTest {
 
     @Override
     public void beforeEach() {
+        super.beforeEach();
         activity = newActivity();
         childRegistry = new ChildControllersRegistry();
         root = new SimpleViewController(activity, childRegistry, "root", new Options());
@@ -81,6 +83,16 @@ public class ModalStackTest extends BaseTest {
                 .build();
     }
 
+    @Test
+    public void showModal_DidAppearEventShouldWaitForReactViewToBeShown(){
+        CommandListener listener = spy(new CommandListenerAdapter());
+        uut.showModal(modal1, root, listener);
+        verify(modal1).addOnAppearedListener(any());
+        verify(listener).onSuccess(modal1.getId());
+        idleMainLooper();
+        verify(modal1).onViewDidAppear();
+    }
+
     @Test
     public void modalRefIsSaved() {
         disableShowModalAnimation(modal1);
@@ -94,6 +106,7 @@ public class ModalStackTest extends BaseTest {
     public void showModal() {
         CommandListener listener = spy(new CommandListenerAdapter());
         uut.showModal(modal1, root, listener);
+        idleMainLooper();
         verify(listener).onSuccess(modal1.getId());
         verify(modal1).onViewDidAppear();
         assertThat(uut.size()).isOne();
@@ -140,7 +153,7 @@ public class ModalStackTest extends BaseTest {
         uut.dismissModal(MODAL_ID_1, root, listener);
         verify(onModalWillDismiss, times(0)).run();
         verify(listener, times(1)).onError(anyString());
-        verifyZeroInteractions(listener);
+        verifyNoMoreInteractions(listener);
     }
 
     @Test
@@ -176,7 +189,7 @@ public class ModalStackTest extends BaseTest {
         });
         uut.dismissAllModals(root, Options.EMPTY, listener);
         verify(listener, times(1)).onSuccess(anyString());
-        verifyZeroInteractions(listener);
+        verifyNoMoreInteractions(listener);
     }
 
     @Test
diff --git a/node_modules/react-native-navigation/lib/android/app/src/test/java/com/reactnativenavigation/viewcontrollers/navigator/NavigatorTest.java b/node_modules/react-native-navigation/lib/android/app/src/test/java/com/reactnativenavigation/viewcontrollers/navigator/NavigatorTest.java
index 2490271..9f43fe0 100644
--- a/node_modules/react-native-navigation/lib/android/app/src/test/java/com/reactnativenavigation/viewcontrollers/navigator/NavigatorTest.java
+++ b/node_modules/react-native-navigation/lib/android/app/src/test/java/com/reactnativenavigation/viewcontrollers/navigator/NavigatorTest.java
@@ -507,7 +507,7 @@ public class NavigatorTest extends BaseTest {
         StackController stack2 = newStack(child2, child3, child4);
         BottomTabsController bottomTabsController = newTabs(Arrays.asList(stack1, stack2));
         uut.setRoot(bottomTabsController, new CommandListenerAdapter(), reactInstanceManager);
-
+        idleMainLooper();
         CommandListenerAdapter listener = spy(new CommandListenerAdapter() {
             @Override
             public void onSuccess(String childId) {
@@ -670,7 +670,7 @@ public class NavigatorTest extends BaseTest {
         final StackController stack2 = newStack(child2, child3);
         BottomTabsController bottomTabsController = newTabs(Arrays.asList(stack1, stack2));
         uut.setRoot(bottomTabsController, new CommandListenerAdapter(), reactInstanceManager);
-
+        idleMainLooper();
         CommandListenerAdapter listener = spy(new CommandListenerAdapter() {
             @Override
             public void onSuccess(String childId) {
diff --git a/node_modules/react-native-navigation/lib/android/app/src/test/java/com/reactnativenavigation/viewcontrollers/navigator/RootPresenterTest.kt b/node_modules/react-native-navigation/lib/android/app/src/test/java/com/reactnativenavigation/viewcontrollers/navigator/RootPresenterTest.kt
index 9c9c8fd..8c9879b 100644
--- a/node_modules/react-native-navigation/lib/android/app/src/test/java/com/reactnativenavigation/viewcontrollers/navigator/RootPresenterTest.kt
+++ b/node_modules/react-native-navigation/lib/android/app/src/test/java/com/reactnativenavigation/viewcontrollers/navigator/RootPresenterTest.kt
@@ -3,9 +3,6 @@ package com.reactnativenavigation.viewcontrollers.navigator
 import android.app.Activity
 import androidx.coordinatorlayout.widget.CoordinatorLayout
 import com.facebook.react.ReactInstanceManager
-import com.nhaarman.mockitokotlin2.any
-import com.nhaarman.mockitokotlin2.eq
-import com.nhaarman.mockitokotlin2.never
 import com.reactnativenavigation.BaseTest
 import com.reactnativenavigation.TestActivity
 import com.reactnativenavigation.hierarchy.root.RootAnimator
@@ -22,6 +19,9 @@ import org.assertj.core.api.Java6Assertions
 import org.junit.Test
 import org.mockito.ArgumentCaptor
 import org.mockito.Mockito
+import org.mockito.kotlin.any
+import org.mockito.kotlin.eq
+import org.mockito.kotlin.never
 import org.robolectric.android.controller.ActivityController
 
 class RootPresenterTest : BaseTest() {
@@ -76,7 +76,7 @@ class RootPresenterTest : BaseTest() {
     fun setRoot_doesNotAnimateByDefault() {
         val listener = Mockito.spy(CommandListenerAdapter())
         uut.setRoot(root, null, defaultOptions, listener, reactInstanceManager)
-        Mockito.verifyZeroInteractions(animator)
+        Mockito.verifyNoInteractions(animator)
         Mockito.verify(listener).onSuccess(root.id)
     }
 
@@ -210,7 +210,7 @@ class RootPresenterTest : BaseTest() {
         uut.setRoot(spy, null, defaultOptions, listener, reactInstanceManager)
         Mockito.verify(spy).addOnAppearedListener(any())
         Java6Assertions.assertThat(spy.view.alpha).isZero()
-        Mockito.verifyZeroInteractions(listener)
+        Mockito.verifyNoInteractions(listener)
         spy.onViewWillAppear()
         idleMainLooper()
         Java6Assertions.assertThat(spy.view.alpha).isOne()
diff --git a/node_modules/react-native-navigation/lib/android/app/src/test/java/com/reactnativenavigation/viewcontrollers/overlay/OverlayManagerTest.java b/node_modules/react-native-navigation/lib/android/app/src/test/java/com/reactnativenavigation/viewcontrollers/overlay/OverlayManagerTest.java
index 1346c41..16d890a 100644
--- a/node_modules/react-native-navigation/lib/android/app/src/test/java/com/reactnativenavigation/viewcontrollers/overlay/OverlayManagerTest.java
+++ b/node_modules/react-native-navigation/lib/android/app/src/test/java/com/reactnativenavigation/viewcontrollers/overlay/OverlayManagerTest.java
@@ -32,6 +32,7 @@ public class OverlayManagerTest extends BaseTest {
 
     @Override
     public void beforeEach() {
+        super.beforeEach();
         Activity activity = newActivity();
         contentLayout = new FrameLayout(activity);
         contentLayout.layout(0, 0, 1000, 1000);
diff --git a/node_modules/react-native-navigation/lib/android/app/src/test/java/com/reactnativenavigation/viewcontrollers/parent/ParentControllerTest.java b/node_modules/react-native-navigation/lib/android/app/src/test/java/com/reactnativenavigation/viewcontrollers/parent/ParentControllerTest.java
index 5e2fe64..3b6eb9d 100644
--- a/node_modules/react-native-navigation/lib/android/app/src/test/java/com/reactnativenavigation/viewcontrollers/parent/ParentControllerTest.java
+++ b/node_modules/react-native-navigation/lib/android/app/src/test/java/com/reactnativenavigation/viewcontrollers/parent/ParentControllerTest.java
@@ -264,6 +264,8 @@ public class ParentControllerTest extends BaseTest {
     @Test
     public void getTopInsetForChild() {
         ParentController<?> parent = Mockito.mock(ParentController.class);
+        Mockito.when(parent.resolveChildOptions(uut)).thenReturn(Options.EMPTY);
+
         when(parent.getTopInset(any())).thenReturn(123);
         uut.setParentController(parent);
 
@@ -280,6 +282,8 @@ public class ParentControllerTest extends BaseTest {
     @Test
     public void getBottomInsetForChild() {
         ParentController<?> parent = Mockito.mock(ParentController.class);
+        Mockito.when(parent.resolveChildOptions(uut)).thenReturn(Options.EMPTY);
+
         when(parent.getBottomInset(any())).thenReturn(123);
         uut.setParentController(parent);
 
diff --git a/node_modules/react-native-navigation/lib/android/app/src/test/java/com/reactnativenavigation/viewcontrollers/sidemenu/SideMenuControllerTest.java b/node_modules/react-native-navigation/lib/android/app/src/test/java/com/reactnativenavigation/viewcontrollers/sidemenu/SideMenuControllerTest.java
index 1a5b6d7..e59e478 100644
--- a/node_modules/react-native-navigation/lib/android/app/src/test/java/com/reactnativenavigation/viewcontrollers/sidemenu/SideMenuControllerTest.java
+++ b/node_modules/react-native-navigation/lib/android/app/src/test/java/com/reactnativenavigation/viewcontrollers/sidemenu/SideMenuControllerTest.java
@@ -2,6 +2,7 @@ package com.reactnativenavigation.viewcontrollers.sidemenu;
 
 import android.app.Activity;
 import android.content.res.Resources;
+import android.graphics.Path;
 import android.util.TypedValue;
 import android.view.Gravity;
 import android.view.View;
@@ -55,6 +56,7 @@ public class SideMenuControllerTest extends BaseTest {
 
     @Override
     public void beforeEach() {
+        super.beforeEach();
         activity = createActivity();
 
         childRegistry = new ChildControllersRegistry();
@@ -72,6 +74,7 @@ public class SideMenuControllerTest extends BaseTest {
         };
         uut.setCenterController(center);
         parent = mock(ParentController.class);
+        Mockito.when(parent.resolveChildOptions(uut)).thenReturn(Options.EMPTY);
         uut.setParentController(parent);
     }
 
@@ -118,12 +121,12 @@ public class SideMenuControllerTest extends BaseTest {
 
     @Test
     public void onViewAppeared() {
-        ViewController<?> left = spy(this.left);
+        ViewController left = spy(this.left);
         ViewGroup leftView = spy(left.getView());
         when(left.findController(leftView)).thenReturn(left);
         Mockito.doReturn(leftView).when(left).getView();
 
-        ViewController<?> right = spy(this.right);
+        ViewController right = spy(this.right);
         ViewGroup rightView = spy(right.getView());
         when(right.findController(rightView)).thenReturn(right);
         Mockito.doReturn(rightView).when(right).getView();
@@ -369,6 +372,7 @@ public class SideMenuControllerTest extends BaseTest {
     @Test
     public void onMeasureChild_topInsetsAreApplied() {
         setLeftRight(spy(left), spy(right));
+        idleMainLooper();
         uut.applyTopInset();
         forEach(uut.getChildControllers(), c -> verify(c).applyTopInset());
     }
diff --git a/node_modules/react-native-navigation/lib/android/app/src/test/java/com/reactnativenavigation/viewcontrollers/stack/StackAnimatorTest.kt b/node_modules/react-native-navigation/lib/android/app/src/test/java/com/reactnativenavigation/viewcontrollers/stack/StackAnimatorTest.kt
index 080c971..ffbae17 100644
--- a/node_modules/react-native-navigation/lib/android/app/src/test/java/com/reactnativenavigation/viewcontrollers/stack/StackAnimatorTest.kt
+++ b/node_modules/react-native-navigation/lib/android/app/src/test/java/com/reactnativenavigation/viewcontrollers/stack/StackAnimatorTest.kt
@@ -4,7 +4,7 @@ import android.animation.AnimatorSet
 import android.animation.ObjectAnimator
 import android.app.Activity
 import android.widget.FrameLayout
-import com.nhaarman.mockitokotlin2.*
+import org.mockito.kotlin.*
 import com.reactnativenavigation.BaseTest
 import com.reactnativenavigation.mocks.Mocks
 import com.reactnativenavigation.mocks.SimpleViewController
diff --git a/node_modules/react-native-navigation/lib/android/app/src/test/java/com/reactnativenavigation/viewcontrollers/stack/StackControllerTest.kt b/node_modules/react-native-navigation/lib/android/app/src/test/java/com/reactnativenavigation/viewcontrollers/stack/StackControllerTest.kt
index 19bc3c6..7d1b4de 100644
--- a/node_modules/react-native-navigation/lib/android/app/src/test/java/com/reactnativenavigation/viewcontrollers/stack/StackControllerTest.kt
+++ b/node_modules/react-native-navigation/lib/android/app/src/test/java/com/reactnativenavigation/viewcontrollers/stack/StackControllerTest.kt
@@ -6,7 +6,7 @@ import android.content.Context
 import android.view.View
 import android.widget.FrameLayout
 import androidx.coordinatorlayout.widget.CoordinatorLayout
-import com.nhaarman.mockitokotlin2.*
+import org.mockito.kotlin.*
 import com.reactnativenavigation.BaseTest
 import com.reactnativenavigation.TestUtils
 import com.reactnativenavigation.mocks.*
@@ -61,7 +61,7 @@ class StackControllerTest : BaseTest() {
         eventEmitter = mock()
         backButtonHelper = spy(BackButtonHelper())
         activity = newActivity()
-        StatusBarUtils.saveStatusBarHeight(63)
+        SystemUiUtils.saveStatusBarHeight(63)
         animator = spy(StackAnimator(activity))
         childRegistry = ChildControllersRegistry()
         presenter = spy(StackPresenter(
@@ -197,7 +197,7 @@ class StackControllerTest : BaseTest() {
     fun setRoot_pushDuringSetRootAnimationShouldNotCrash() {
         uut.push(child1, CommandListenerAdapter())
         uut.push(child2, CommandListenerAdapter())
-
+        idleMainLooper()
         uut.setRoot(listOf(child1), CommandListenerAdapter())
         uut.push(child3, CommandListenerAdapter())
         assertThat(uut.currentChild).isEqualTo(child3)
@@ -281,6 +281,7 @@ class StackControllerTest : BaseTest() {
         disablePushAnimation(child1, child2)
         uut.push(child1, CommandListenerAdapter()) // Initialize stack with a child
         uut.push(child2, CommandListenerAdapter())
+        idleMainLooper()
         verify(child2).onViewDidAppear()
     }
 
@@ -608,8 +609,9 @@ class StackControllerTest : BaseTest() {
         assertNotChildOf(uut.view, child1.view)
         uut.push(child1, CommandListenerAdapter())
         assertIsChild(uut.view, child1.view)
-
+        idleMainLooper()
         uut.push(child2, CommandListenerAdapter())
+        idleMainLooper()
         assertIsChild(uut.view, child2)
         assertNotChildOf(uut.view, child1)
     }
@@ -663,7 +665,7 @@ class StackControllerTest : BaseTest() {
         val child1View: View = child1.view
         uut.push(child1, CommandListenerAdapter())
         uut.push(child2, CommandListenerAdapter())
-
+        idleMainLooper()
         assertIsChild(uut.view, child2View)
         assertNotChildOf(uut.view, child1View)
         uut.pop(Options.EMPTY, CommandListenerAdapter())
@@ -715,7 +717,7 @@ class StackControllerTest : BaseTest() {
         uut.push(child2, CommandListenerAdapter())
         uut.push(child3, CommandListenerAdapter())
         uut.push(child4, CommandListenerAdapter())
-
+        idleMainLooper()
         uut.popTo(child2, Options.EMPTY, CommandListenerAdapter())
         verify(animator, never()).pop(any(), eq(child1), any(), any(), any())
         verify(animator, never()).pop(any(), eq(child2), any(), any(), any())
@@ -729,6 +731,7 @@ class StackControllerTest : BaseTest() {
         uut.push(child1, mock())
         uut.push(child2, mock())
         uut.push(child3, mock())
+        idleMainLooper()
         uut.popTo(child1, Options.EMPTY, mock())
         animator.endPushAnimation(child3)
         assertContainsOnlyId(child1.id)
@@ -759,8 +762,8 @@ class StackControllerTest : BaseTest() {
         disablePushAnimation(child1, child2, child3)
         uut.push(child1, CommandListenerAdapter())
         uut.push(child2, CommandListenerAdapter())
-
         uut.push(child3, CommandListenerAdapter())
+        idleMainLooper()
         uut.popToRoot(Options.EMPTY, object : CommandListenerAdapter() {
             override fun onSuccess(childId: String) {
                 verify(animator).pop(eq(child1), eq(child3), any(), any(), any())
@@ -776,6 +779,7 @@ class StackControllerTest : BaseTest() {
         uut.push(child1, CommandListenerAdapter())
         uut.push(child2, CommandListenerAdapter())
         uut.push(child3, CommandListenerAdapter())
+        idleMainLooper()
         uut.popToRoot(Options.EMPTY, object : CommandListenerAdapter() {
             override fun onSuccess(childId: String) {
                 verify(child1, never()).destroy()
@@ -811,6 +815,7 @@ class StackControllerTest : BaseTest() {
         uut.push(child1, mock())
         uut.push(child2, mock())
         uut.push(child3, mock())
+        idleMainLooper()
         uut.popToRoot(Options.EMPTY, mock())
         animator.endPushAnimation(child3)
         assertContainsOnlyId(child1.id)
@@ -1084,7 +1089,7 @@ class StackControllerTest : BaseTest() {
         disablePushAnimation(child1)
         uut.push(child1, CommandListenerAdapter())
         ShadowLooper.idleMainLooper()
-        assertThat(ViewUtils.topMargin(uut.topBar)).isEqualTo(StatusBarUtils.getStatusBarHeight(activity))
+        assertThat(ViewUtils.topMargin(uut.topBar)).isEqualTo(SystemUiUtils.getStatusBarHeight(activity))
     }
 
     @Test
diff --git a/node_modules/react-native-navigation/lib/android/app/src/test/java/com/reactnativenavigation/viewcontrollers/stack/StackPresenterTest.kt b/node_modules/react-native-navigation/lib/android/app/src/test/java/com/reactnativenavigation/viewcontrollers/stack/StackPresenterTest.kt
index 779d9b3..4b1b3ce 100644
--- a/node_modules/react-native-navigation/lib/android/app/src/test/java/com/reactnativenavigation/viewcontrollers/stack/StackPresenterTest.kt
+++ b/node_modules/react-native-navigation/lib/android/app/src/test/java/com/reactnativenavigation/viewcontrollers/stack/StackPresenterTest.kt
@@ -7,7 +7,7 @@ import android.graphics.Color
 import android.graphics.Typeface
 import android.view.View
 import android.view.ViewGroup
-import com.nhaarman.mockitokotlin2.*
+import org.mockito.kotlin.*
 import com.reactnativenavigation.BaseTest
 import com.reactnativenavigation.TestUtils
 import com.reactnativenavigation.fakes.IconResolverFake
@@ -17,7 +17,10 @@ import com.reactnativenavigation.options.params.*
 import com.reactnativenavigation.options.params.Number
 import com.reactnativenavigation.options.parsers.TypefaceLoader
 import com.reactnativenavigation.react.CommandListenerAdapter
-import com.reactnativenavigation.utils.*
+import com.reactnativenavigation.utils.CollectionUtils
+import com.reactnativenavigation.utils.RenderChecker
+import com.reactnativenavigation.utils.TitleBarHelper
+import com.reactnativenavigation.utils.UiUtils
 import com.reactnativenavigation.viewcontrollers.child.ChildControllersRegistry
 import com.reactnativenavigation.viewcontrollers.stack.topbar.TopBarController
 import com.reactnativenavigation.viewcontrollers.stack.topbar.button.ButtonController
@@ -99,6 +102,7 @@ class StackPresenterTest : BaseTest() {
 
     @Test
     fun onConfigurationChange_shouldApplyColors() {
+        parent.setRoot(listOf(child), CommandListenerAdapter())
         val options = Options.EMPTY.copy()
         options.topBar.borderColor = ThemeColour.of(Color.BLACK, Color.RED)
         options.topBar.background = TopBarBackgroundOptions().apply {
@@ -122,7 +126,7 @@ class StackPresenterTest : BaseTest() {
         options.topTabs.unselectedTabColor = ThemeColour.of(Color.BLACK, Color.RED)
 
         mockConfiguration.uiMode = Configuration.UI_MODE_NIGHT_NO
-        uut.onConfigurationChanged(options)
+        uut.onConfigurationChanged(options, getCurrentChild())
 
         verify(topBar).setTitleTextColor(Color.BLACK)
         verify(topBar).setSubtitleColor(Color.BLACK)
@@ -133,7 +137,7 @@ class StackPresenterTest : BaseTest() {
         verify(topBar).setBackButton(any())
 
         mockConfiguration.uiMode = Configuration.UI_MODE_NIGHT_YES
-        uut.onConfigurationChanged(options)
+        uut.onConfigurationChanged(options, getCurrentChild())
 
         verify(topBar).setTitleTextColor(Color.RED)
         verify(topBar).setSubtitleColor(Color.RED)
@@ -147,15 +151,18 @@ class StackPresenterTest : BaseTest() {
 
     @Test
     fun onConfigurationChange_shouldApplyColorsOnTopBarButtons() {
+        parent.setRoot(listOf(child), CommandListenerAdapter())
+
         val options = Options.EMPTY.copy()
         options.topBar.buttons.left = arrayListOf(ButtonOptions())
         options.topBar.buttons.right = arrayListOf(ButtonOptions())
-        uut.applyChildOptions(options,parent,child)
 
-        uut.onConfigurationChanged(options)
+        uut.applyChildOptions(options,parent,child)
+        verify(topBarController, times(1)).applyRightButtonsOptions(any(),any(),any())
+        verify(topBarController, times(1)).applyLeftButtonsOptions(any(),any(),any())
 
-        verify(topBarController, times(2)).applyRightButtons(any())
-        verify(topBarController, times(2)).applyLeftButtons(any())
+        uut.onConfigurationChanged(options, getCurrentChild())
+        verify(topBarController, times(1)).onConfigurationChanged(any(), any(), any())
     }
 
     @Test
@@ -252,19 +259,19 @@ class StackPresenterTest : BaseTest() {
     @Test
     fun mergeButtons() {
         uut.mergeChildOptions(EMPTY_OPTIONS, EMPTY_OPTIONS, parent, child)
-        verify(topBarController, never()).applyRightButtons(any())
-        verify(topBarController, never()).applyLeftButtons(any())
+        verify(topBarController, never()).mergeLeftButtonsOptions(any(),any(),any())
+        verify(topBarController, never()).mergeRightButtonsOptions(any(),any(),any())
 
         val options = Options()
         val button = ButtonOptions()
         button.text = Text("btn")
         options.topBar.buttons.right = ArrayList(setOf(button))
         uut.mergeChildOptions(options, EMPTY_OPTIONS, parent, child)
-        verify(topBarController).mergeRightButtons(any(), any())
+        verify(topBarController).mergeRightButtonsOptions(any(), any(),any())
 
         options.topBar.buttons.left = ArrayList(setOf(button))
         uut.mergeChildOptions(options, EMPTY_OPTIONS, parent, child)
-        verify(topBarController).mergeLeftButtons(any(), any())
+        verify(topBarController).mergeLeftButtonsOptions(any(), any(), any())
     }
 
     @Test
@@ -313,8 +320,8 @@ class StackPresenterTest : BaseTest() {
         toApply.topBar.buttons.right = arrayListOf(textBtn1, componentBtn1)
         uut.applyChildOptions(toApply, parent, child)
 
-        val captor1 = argumentCaptor<List<ButtonController>>()
-        verify(topBarController).applyRightButtons(captor1.capture())
+        val captor1 = argumentCaptor<List<ButtonOptions>>()
+        verify(topBarController).applyRightButtonsOptions(any(),captor1.capture(), any())
         assertThat(topBar.rightButtonBar.menu.size()).isEqualTo(2)
 
         val appliedButtons = captor1.firstValue
@@ -325,12 +332,12 @@ class StackPresenterTest : BaseTest() {
         uut.mergeChildOptions(toMerge, Options.EMPTY, parent, child)
 
         assertThat(topBar.rightButtonBar.menu.size()).isEqualTo(3)
-        val captor2 = argumentCaptor<List<ButtonController>>()
-        verify(topBarController).mergeRightButtons(captor2.capture(), any())
+        val captor2 = argumentCaptor<List<ButtonOptions>>()
+        verify(topBarController).mergeRightButtonsOptions(any(),captor2.capture(), any())
         val mergedButtons = captor2.firstValue
         assertThat(mergedButtons).hasSize(3)
-        assertThat(appliedButtons[0]).isNotEqualTo(mergedButtons[0])
-        assertThat(appliedButtons[1]).isEqualTo(mergedButtons[2])
+        assertThat(appliedButtons[0].id).isNotEqualTo(mergedButtons[1].id)
+        assertThat(appliedButtons[1].id).isEqualTo(mergedButtons[2].id)
     }
 
     @Test
@@ -357,15 +364,14 @@ class StackPresenterTest : BaseTest() {
         options.topBar.buttons.left = ArrayList(listOf(textBtn2))
         uut.applyChildOptions(options, parent, child)
         ShadowLooper.idleMainLooper()
-        verify(topBar, times(1)).clearLeftButtons()
-        verify(topBar, times(1)).clearBackButton()
+        verify(topBarController, times(1)).applyLeftButtonsOptions(any(), any(), any())
+        verify(topBar, never()).setBackButton(any())
 
         val backButtonHidden = Options()
         backButtonHidden.topBar.buttons.back.setHidden()
         uut.mergeChildOptions(backButtonHidden, options, parent, child)
         ShadowLooper.idleMainLooper()
-        verify(topBar, times(1)).clearLeftButtons()
-        verify(topBar, times(2)).clearBackButton()
+        verify(topBar, times(1)).clearBackButton()
     }
 
     @Test
@@ -400,7 +406,7 @@ class StackPresenterTest : BaseTest() {
 
         assertThat(toMerge.topBar.buttons.back.hasValue()).isTrue()
         uut.mergeChildOptions(toMerge, Options.EMPTY, parent, child)
-        verify(topBarController).mergeLeftButtons(any(), any())
+        verify(topBarController).mergeLeftButtonsOptions(any(), any(),any())
         verify(topBar, never()).clearLeftButtons()
     }
 
@@ -662,15 +668,15 @@ class StackPresenterTest : BaseTest() {
         options.topBar.buttons.left = ArrayList()
         options.topBar.buttons.left!!.add(leftButton)
         uut.applyChildOptions(options, parent, child)
-        val rightCaptor = argumentCaptor<List<ButtonController>>()
-        verify(topBarController).applyRightButtons(rightCaptor.capture())
-        assertThat(rightCaptor.firstValue[0].button.color.get()).isEqualTo(options.topBar.rightButtonColor.get())
-        assertThat(rightCaptor.firstValue[1].button.color.get()).isEqualTo(options.topBar.rightButtonColor.get())
+        val rightCaptor = argumentCaptor<List<ButtonOptions>>()
+        verify(topBarController).applyRightButtonsOptions(any(),rightCaptor.capture(), any())
+        assertThat(rightCaptor.firstValue[0].color.get()).isEqualTo(options.topBar.rightButtonColor.get())
+        assertThat(rightCaptor.firstValue[1].color.get()).isEqualTo(options.topBar.rightButtonColor.get())
         assertThat(rightCaptor.firstValue[0]).isNotEqualTo(rightButton1)
         assertThat(rightCaptor.firstValue[1]).isNotEqualTo(rightButton2)
-        val leftCaptor = argumentCaptor<List<ButtonController>>()
-        verify(topBarController).applyLeftButtons(leftCaptor.capture())
-        assertThat(leftCaptor.firstValue[0].button.color).isEqualTo(options.topBar.leftButtonColor)
+        val leftCaptor = argumentCaptor<List<ButtonOptions>>()
+        verify(topBarController).applyLeftButtonsOptions(any(),leftCaptor.capture(),any())
+        assertThat(leftCaptor.firstValue[0].color).isEqualTo(options.topBar.leftButtonColor)
         assertThat(leftCaptor.firstValue[0]).isNotEqualTo(leftButton)
     }
 
@@ -790,15 +796,15 @@ class StackPresenterTest : BaseTest() {
         options2.topBar.buttons.left = ArrayList(listOf(leftButton))
 
         uut.mergeChildOptions(options2, appliedOptions, parent, child)
-        val rightCaptor = argumentCaptor<List<ButtonController>>()
-        verify(topBarController).mergeRightButtons(rightCaptor.capture(), any())
-        assertThat(rightCaptor.firstValue[0].button.color.get()).isEqualTo(appliedOptions.topBar.rightButtonColor.get())
-        assertThat(rightCaptor.firstValue[1].button.color.get()).isEqualTo(appliedOptions.topBar.rightButtonColor.get())
+        val rightCaptor = argumentCaptor<List<ButtonOptions>>()
+        verify(topBarController).mergeRightButtonsOptions(any(),rightCaptor.capture(), any())
+        assertThat(rightCaptor.firstValue[0].color.get()).isEqualTo(appliedOptions.topBar.rightButtonColor.get())
+        assertThat(rightCaptor.firstValue[1].color.get()).isEqualTo(appliedOptions.topBar.rightButtonColor.get())
         assertThat(rightCaptor.firstValue[0]).isNotEqualTo(rightButton1)
         assertThat(rightCaptor.firstValue[1]).isNotEqualTo(rightButton2)
-        val leftCaptor = argumentCaptor<List<ButtonController>>()
-        verify(topBarController).mergeLeftButtons(leftCaptor.capture(), any())
-        assertThat(leftCaptor.firstValue[0].button.color.get()).isEqualTo(appliedOptions.topBar.leftButtonColor.get())
+        val leftCaptor = argumentCaptor<List<ButtonOptions>>()
+        verify(topBarController).mergeLeftButtonsOptions(any(),leftCaptor.capture(), any())
+        assertThat(leftCaptor.firstValue[0].color.get()).isEqualTo(appliedOptions.topBar.leftButtonColor.get())
         assertThat(leftCaptor.firstValue[0]).isNotEqualTo(leftButton)
     }
 
@@ -816,15 +822,15 @@ class StackPresenterTest : BaseTest() {
         options2.topBar.buttons.left = ArrayList(listOf(leftButton))
 
         uut.mergeChildOptions(options2, resolvedOptions, parent, child)
-        val rightCaptor = argumentCaptor<List<ButtonController>>()
-        verify(topBarController).mergeRightButtons(rightCaptor.capture(), any())
-        assertThat(rightCaptor.firstValue[0].button.color.get()).isEqualTo(resolvedOptions.topBar.rightButtonColor.get())
-        assertThat(rightCaptor.firstValue[1].button.color.get()).isEqualTo(resolvedOptions.topBar.rightButtonColor.get())
+        val rightCaptor = argumentCaptor<List<ButtonOptions>>()
+        verify(topBarController).mergeRightButtonsOptions(any(),rightCaptor.capture(), any())
+        assertThat(rightCaptor.firstValue[0].color.get()).isEqualTo(resolvedOptions.topBar.rightButtonColor.get())
+        assertThat(rightCaptor.firstValue[1].color.get()).isEqualTo(resolvedOptions.topBar.rightButtonColor.get())
         assertThat(rightCaptor.firstValue[0]).isNotEqualTo(rightButton1)
         assertThat(rightCaptor.firstValue[1]).isNotEqualTo(rightButton2)
-        val leftCaptor = argumentCaptor<List<ButtonController>>()
-        verify(topBarController).mergeLeftButtons(leftCaptor.capture(), any())
-        assertThat(leftCaptor.firstValue[0].button.color.get()).isEqualTo(resolvedOptions.topBar.leftButtonColor.get())
+        val leftCaptor = argumentCaptor<List<ButtonOptions>>()
+        verify(topBarController).mergeLeftButtonsOptions(any(),leftCaptor.capture(), any())
+        assertThat(leftCaptor.firstValue[0].color.get()).isEqualTo(resolvedOptions.topBar.leftButtonColor.get())
         assertThat(leftCaptor.firstValue[0]).isNotEqualTo(leftButton)
     }
 
@@ -834,10 +840,10 @@ class StackPresenterTest : BaseTest() {
         options.topBar.buttons.right = ArrayList(listOf(textBtn1))
         options.topBar.buttons.left = ArrayList(listOf(textBtn1))
         uut.applyChildOptions(options, parent, child)
-        val rightCaptor = argumentCaptor<List<ButtonController>>()
-        val leftCaptor = argumentCaptor<List<ButtonController>>()
-        verify(topBarController).applyRightButtons(rightCaptor.capture())
-        verify(topBarController).applyLeftButtons(leftCaptor.capture())
+        val rightCaptor = argumentCaptor<List<ButtonOptions>>()
+        val leftCaptor = argumentCaptor<List<ButtonOptions>>()
+        verify(topBarController).applyRightButtonsOptions(any(),rightCaptor.capture(),any())
+        verify(topBarController).applyLeftButtonsOptions(any(),leftCaptor.capture(),any())
         assertThat(rightCaptor.firstValue.size).isOne()
         assertThat(leftCaptor.firstValue.size).isOne()
     }
@@ -939,7 +945,7 @@ class StackPresenterTest : BaseTest() {
             statusBar.drawBehind = Bool(true)
         }
         Mockito.`when`(child.resolveCurrentOptions()).thenReturn(options)
-        mockStatusBarUtils(statusBarHeight, statusBarHeightDp) {
+        mockSystemUiUtils(statusBarHeight, statusBarHeightDp) {
             uut.applyChildOptions(Options.EMPTY.copy().apply {
                 topBar.height = Number(topBarHeightDp)
             }, parent, child)
@@ -955,7 +961,7 @@ class StackPresenterTest : BaseTest() {
         val statusBarHeightDp = 20
         val topBarHeightDp = 100
 
-        mockStatusBarUtils(statusBarHeight, statusBarHeightDp) {
+        mockSystemUiUtils(statusBarHeight, statusBarHeightDp) {
             uut.mergeChildOptions(Options.EMPTY.copy().apply {
                 topBar.height = Number(topBarHeightDp)
                 statusBar.drawBehind = Bool(true)
@@ -972,7 +978,7 @@ class StackPresenterTest : BaseTest() {
         val statusBarHeightDp = 20
         val topBarHeightDp = 100
 
-        mockStatusBarUtils(statusBarHeight, statusBarHeightDp) {
+        mockSystemUiUtils(statusBarHeight, statusBarHeightDp) {
             uut.mergeChildOptions(Options.EMPTY.copy().apply {
                 topBar.height = Number(topBarHeightDp)
                 statusBar.drawBehind = Bool(false)
@@ -1022,6 +1028,7 @@ class StackPresenterTest : BaseTest() {
         assertThat((topBar.layoutParams as ViewGroup.MarginLayoutParams).topMargin).isEqualTo(10)
     }
 
+    private fun getCurrentChild()=parent.currentChild
     private fun assertTopBarOptions(options: Options, t: Int) {
         if (options.topBar.title.component.hasValue()) {
             verify(topBar, never()).title = any()
diff --git a/node_modules/react-native-navigation/lib/android/app/src/test/java/com/reactnativenavigation/viewcontrollers/stack/TopBarControllerTest.kt b/node_modules/react-native-navigation/lib/android/app/src/test/java/com/reactnativenavigation/viewcontrollers/stack/TopBarControllerTest.kt
index fc0baeb..37f7a3f 100644
--- a/node_modules/react-native-navigation/lib/android/app/src/test/java/com/reactnativenavigation/viewcontrollers/stack/TopBarControllerTest.kt
+++ b/node_modules/react-native-navigation/lib/android/app/src/test/java/com/reactnativenavigation/viewcontrollers/stack/TopBarControllerTest.kt
@@ -4,26 +4,28 @@ import android.animation.AnimatorSet
 import android.app.Activity
 import android.content.Context
 import android.view.View
-import com.nhaarman.mockitokotlin2.*
+import org.mockito.kotlin.*
 import com.reactnativenavigation.BaseTest
+import com.reactnativenavigation.fakes.IconResolverFake
+import com.reactnativenavigation.mocks.TitleBarButtonCreatorMock
 import com.reactnativenavigation.options.BackButton
 import com.reactnativenavigation.options.ButtonOptions
+import com.reactnativenavigation.options.ComponentOptions
 import com.reactnativenavigation.options.Options
 import com.reactnativenavigation.options.params.Bool
 import com.reactnativenavigation.options.params.Text
 import com.reactnativenavigation.react.Constants
 import com.reactnativenavigation.react.ReactView
-import com.reactnativenavigation.utils.CollectionUtils
 import com.reactnativenavigation.utils.TitleBarHelper
 import com.reactnativenavigation.utils.resetViewProperties
 import com.reactnativenavigation.viewcontrollers.stack.topbar.TopBarAnimator
 import com.reactnativenavigation.viewcontrollers.stack.topbar.TopBarController
 import com.reactnativenavigation.viewcontrollers.stack.topbar.button.ButtonController
+import com.reactnativenavigation.viewcontrollers.stack.topbar.button.ButtonPresenter
 import com.reactnativenavigation.views.stack.StackLayout
 import com.reactnativenavigation.views.stack.topbar.TopBar
 import org.assertj.core.api.Java6Assertions.assertThat
 import org.junit.Test
-import java.util.*
 
 class TopBarControllerTest : BaseTest() {
     private lateinit var uut: TopBarController
@@ -34,10 +36,16 @@ class TopBarControllerTest : BaseTest() {
     private lateinit var textButton2: ButtonOptions
     private lateinit var componentButton: ButtonOptions
     private lateinit var animator: TopBarAnimator
+    private lateinit var leftButtonControllers: MutableMap<String,ButtonController>
+    private lateinit var rightButtonControllers:  MutableMap<String,ButtonController>
+
+
     private val topBar: View
         get() = uut.view
 
     override fun beforeEach() {
+        leftButtonControllers= mutableMapOf()
+        rightButtonControllers= mutableMapOf()
         activity = newActivity()
         animator = spy(TopBarAnimator())
         uut = createTopBarController()
@@ -48,68 +56,111 @@ class TopBarControllerTest : BaseTest() {
 
     @Test
     fun setButton_setsTextButton() {
-        uut.applyRightButtons(rightButtons(textButton1)!!)
-        uut.applyLeftButtons(leftButton(leftButton))
+        uut.applyRightButtonsOptions(rightButtonControllers, listOf(textButton1)){
+            createButtonController(it)
+        }
+        uut.applyLeftButtonsOptions(leftButtonControllers, listOf(leftButton)){
+            createButtonController(it)
+        }
         assertThat(uut.getRightButton(0).title.toString()).isEqualTo(textButton1.text.get())
     }
 
     @Test
     fun setButton_setsCustomButton() {
-        uut.applyLeftButtons(leftButton(leftButton))
-        uut.applyRightButtons(rightButtons(componentButton)!!)
+        uut.applyLeftButtonsOptions(leftButtonControllers, listOf(leftButton)){
+            createButtonController(it)
+        }
+        uut.applyRightButtonsOptions(rightButtonControllers, listOf(componentButton)){
+            createButtonController(it)
+        }
         val btnView = uut.getRightButton(0).actionView as ReactView
         assertThat(btnView.componentName).isEqualTo(componentButton.component.name.get())
     }
 
     @Test
     fun applyRightButtons_emptyButtonsListClearsRightButtons() {
-        uut.applyLeftButtons(leftButton(leftButton))
-        uut.applyRightButtons(rightButtons(componentButton, textButton1)!!)
-        uut.applyLeftButtons(leftButton(leftButton))
-        uut.applyRightButtons(ArrayList())
+        uut.applyLeftButtonsOptions(leftButtonControllers, listOf(leftButton)){
+            createButtonController(it)
+        }
+        uut.applyRightButtonsOptions(rightButtonControllers, listOf(componentButton, textButton1)){
+            createButtonController(it)
+        }
+        uut.applyLeftButtonsOptions(leftButtonControllers, listOf(leftButton)){
+            createButtonController(it)
+        }
+        uut.applyRightButtonsOptions(rightButtonControllers, listOf()){
+            createButtonController(it)
+        }
         assertThat(uut.rightButtonCount).isEqualTo(0)
     }
 
     @Test
     fun applyRightButtons_previousButtonsAreCleared() {
-        uut.applyRightButtons(rightButtons(textButton1, componentButton)!!)
+        uut.applyRightButtonsOptions(rightButtonControllers, listOf(textButton1, componentButton)){
+            createButtonController(it)
+        }
         assertThat(uut.rightButtonCount).isEqualTo(2)
-        uut.applyRightButtons(rightButtons(textButton2)!!)
+        uut.applyRightButtonsOptions(rightButtonControllers, listOf(textButton2)){
+            createButtonController(it)
+        }
         assertThat(uut.rightButtonCount).isEqualTo(1)
     }
 
     @Test
     fun applyRightButtons_buttonsAreAddedInReversedOrderToMatchOrderOnIOs() {
-        uut.applyLeftButtons(leftButton(leftButton))
-        uut.applyRightButtons(rightButtons(textButton1, componentButton)!!)
+        uut.applyLeftButtonsOptions(leftButtonControllers, listOf(leftButton)){
+            createButtonController(it)
+        }
+        uut.applyRightButtonsOptions(rightButtonControllers, listOf(textButton1, componentButton)){
+            createButtonController(it)
+        }
         assertThat(uut.getRightButton(1).title.toString()).isEqualTo(textButton1.text.get())
     }
 
     @Test
     fun applyRightButtons_componentButtonIsReapplied() {
-        val initialButtons = rightButtons(componentButton)
-        uut.applyRightButtons(initialButtons!!)
+        uut.applyRightButtonsOptions(rightButtonControllers, listOf( componentButton)){
+            createButtonController(it)
+        }
         assertThat(uut.getRightButton(0).itemId).isEqualTo(componentButton.intId)
-        uut.applyRightButtons(rightButtons(textButton1)!!)
+        uut.applyRightButtonsOptions(rightButtonControllers, listOf( textButton1)){
+            createButtonController(it)
+        }
         assertThat(uut.getRightButton(0).itemId).isEqualTo(textButton1.intId)
-        uut.applyRightButtons(initialButtons)
+        uut.applyRightButtonsOptions(rightButtonControllers, listOf( componentButton)){
+            createButtonController(it)
+        }
         assertThat(uut.getRightButton(0).itemId).isEqualTo(componentButton.intId)
     }
 
     @Test
-    fun mergeRightButtons_componentButtonIsNotAddedIfAlreadyAddedToMenu() {
-        val initialButtons = rightButtons(componentButton)
-        uut.applyRightButtons(initialButtons!!)
-        uut.mergeRightButtons(initialButtons, emptyList())
+    fun mergeRightButtonsOptions_componentButtonIsNotAddedIfAlreadyAddedToMenu() {
+        val controllers = mutableMapOf<String,ButtonController>()
+        uut.applyRightButtonsOptions(controllers, listOf(componentButton)){
+            createButtonController(it)
+        }
+        verify(controllers[componentButton.id]!!, times(1)).addToMenu(any(), any())
+        uut.mergeRightButtonsOptions(controllers, listOf(componentButton.copy())){
+            createButtonController(it)
+        }
+        verify(controllers[componentButton.id]!!, times(1)).addToMenu(any(), any())
     }
 
     @Test
     fun setLeftButtons_emptyButtonsListClearsLeftButton() {
-        uut.applyLeftButtons(leftButton(leftButton))
-        uut.applyRightButtons(rightButtons(componentButton)!!)
+        uut.applyLeftButtonsOptions(leftButtonControllers, listOf(leftButton)){
+            createButtonController(it)
+        }
+        uut.applyRightButtonsOptions(rightButtonControllers, listOf( componentButton)){
+            createButtonController(it)
+        }
         assertThat(uut.leftButtonCount).isNotZero()
-        uut.applyLeftButtons(emptyList())
-        uut.applyRightButtons(rightButtons(textButton1)!!)
+        uut.applyLeftButtonsOptions(leftButtonControllers, listOf()){
+            createButtonController(it)
+        }
+        uut.applyRightButtonsOptions(rightButtonControllers, listOf( textButton1)){
+            createButtonController(it)
+        }
         assertThat(uut.leftButtonCount).isZero()
     }
 
@@ -117,7 +168,9 @@ class TopBarControllerTest : BaseTest() {
     fun setLeftButtons_clearsBackButton() {
         uut.view.setBackButton(TitleBarHelper.createButtonController(activity, backButton))
         assertThat(uut.view.navigationIcon).isNotNull()
-        uut.applyLeftButtons(leftButton(leftButton))
+        uut.applyLeftButtonsOptions(leftButtonControllers, listOf(leftButton)){
+            createButtonController(it)
+        }
         assertThat(uut.view.navigationIcon).isNull()
     }
 
@@ -125,25 +178,35 @@ class TopBarControllerTest : BaseTest() {
     fun setLeftButtons_emptyButtonsListClearsBackButton() {
         uut.view.setBackButton(TitleBarHelper.createButtonController(activity, backButton))
         assertThat(uut.view.navigationIcon).isNotNull()
-        uut.applyLeftButtons(emptyList())
+        uut.applyLeftButtonsOptions(leftButtonControllers, listOf()){
+            createButtonController(it)
+        }
         assertThat(uut.view.navigationIcon).isNull()
     }
 
     @Test
     fun mergeLeftButtons_clearsBackButton() {
+        val controllers = mutableMapOf<String,ButtonController>()
         uut.view.setBackButton(TitleBarHelper.createButtonController(activity, backButton))
         assertThat(uut.view.navigationIcon).isNotNull()
-        uut.mergeLeftButtons(emptyList(), leftButton(leftButton))
+        uut.mergeLeftButtonsOptions(controllers, listOf(leftButton)){
+            createButtonController(it)
+        }
         assertThat(uut.view.navigationIcon).isNull()
     }
 
     @Test
     fun mergeLeftButtons_emptyButtonsListClearsBackButton() {
+        val controllers = mutableMapOf<String,ButtonController>()
+
         uut.view.setBackButton(TitleBarHelper.createButtonController(activity, backButton))
         assertThat(uut.view.navigationIcon).isNotNull()
-        val initialButtons = leftButton(leftButton)
-        uut.applyLeftButtons(initialButtons)
-        uut.mergeLeftButtons(initialButtons, emptyList())
+        uut.applyLeftButtonsOptions(controllers, listOf(leftButton)){
+            createButtonController(it)
+        }
+        uut.mergeLeftButtonsOptions(controllers, emptyList()){
+            createButtonController(it)
+        }
         assertThat(uut.view.navigationIcon).isNull()
     }
 
@@ -219,6 +282,128 @@ class TopBarControllerTest : BaseTest() {
         assertThat(result).isEqualTo(someAnimator)
     }
 
+    @Test
+    fun `mergeRightButtons - should add buttons`(){
+        val controllers = spy(LinkedHashMap<String,ButtonController>())
+        val controller = spy(ButtonController(activity, ButtonPresenter(activity, textButton1, IconResolverFake(activity)),
+            textButton1, TitleBarButtonCreatorMock(), object : ButtonController.OnClickListener {
+                override fun onPress(button: ButtonOptions) {
+
+                }
+
+            }))
+        uut.mergeRightButtonsOptions(controllers, listOf(textButton1)) {
+                controller
+        }
+        assertThat(uut.rightButtonCount).isEqualTo(1)
+        verify(controllers, never()).remove(any())
+        assertThat(controllers[textButton1.id]).isEqualTo(controller)
+    }
+    @Test
+    fun `mergeRightOptions - should destroy all buttons that was removed`(){
+       val componentButton2 = componentButton.copy()
+        componentButton2.component = ComponentOptions().apply {
+           this.name = componentButton.component.name
+           this.componentId = Text("CustomNewComponent")
+        }
+        uut.mergeRightButtonsOptions(rightButtonControllers, listOf(textButton1, textButton2, componentButton)) {
+            createButtonController(it)
+        }
+        val removedControllers = mutableMapOf<String, ButtonController>().apply {
+            putAll(rightButtonControllers)
+        }
+        uut.mergeRightButtonsOptions(rightButtonControllers, listOf(componentButton2)) {
+            createButtonController(it)
+        }
+        verify(removedControllers[textButton1.id]!!, times(1)).destroy()
+        verify(removedControllers[textButton2.id]!!, times(1)).destroy()
+        verify(removedControllers[componentButton.id]!!, times(1)).destroy()
+    }
+    @Test
+    fun `mergeRightButtons - should remove all and re-add buttons in case of reorder, without destroy`(){
+        uut.mergeRightButtonsOptions(rightButtonControllers, listOf(textButton1, textButton2)) {
+            createButtonController(it)
+        }
+        assertThat(uut.getRightButton(1).itemId ).isEqualTo(textButton1.intId)
+        assertThat(uut.getRightButton(0).itemId ).isEqualTo(textButton2.intId)
+        val removedControllers = mutableMapOf<String, ButtonController>().apply { putAll(rightButtonControllers) }
+        uut.mergeRightButtonsOptions(rightButtonControllers, listOf(textButton2.copy(), textButton1.copy())) {
+            createButtonController(it)
+        }
+        assertThat(uut.getRightButton(1).itemId ).isEqualTo(textButton2.intId)
+        assertThat(uut.getRightButton(0).itemId ).isEqualTo(textButton1.intId)
+
+        verify(removedControllers[textButton1.id]!!, never()).destroy()
+        verify(removedControllers[textButton2.id]!!, never()).destroy()
+
+        verify(rightButtonControllers[textButton1.id]!!, times(2)).addToMenu(any(), any())
+        verify(rightButtonControllers[textButton2.id]!!, times(2)).addToMenu(any(), any())
+    }
+    @Test
+    fun `mergeRightButtons - should rebuild menu when adding menu items, existing should not be destroyed`(){
+        val controllers = spy(LinkedHashMap<String,ButtonController>())
+        uut.mergeRightButtonsOptions(controllers, listOf(textButton1)) {
+            createButtonController(it)
+        }
+        assertThat(uut.rightButtonCount).isEqualTo(1)
+
+        uut.mergeRightButtonsOptions(controllers, listOf(textButton1, textButton2)) {
+            createButtonController(it)
+        }
+        assertThat(uut.rightButtonCount).isEqualTo(2)
+        verify(controllers, never()).remove(any())
+        verify(controllers[textButton1.id]!!, times(2)).addToMenu(any(), any())
+    }
+    @Test
+    fun `mergeRightButtons - should modify changed buttons`(){
+        val controllers = spy(LinkedHashMap<String,ButtonController>())
+        uut.mergeRightButtonsOptions(controllers, listOf(textButton1.apply {
+            this.enabled = Bool(true)
+        })) {
+            createButtonController(it)
+        }
+        assertThat(uut.rightButtonCount).isEqualTo(1)
+        verify(controllers[textButton1.id]!!, times(1)).addToMenu(any(), any())
+
+        uut.mergeRightButtonsOptions(controllers, listOf(textButton1.copy().apply { this.enabled= Bool(false) })) {
+            createButtonController(it)
+        }
+        verify(controllers, never()).remove(any())
+        verify(controllers[textButton1.id]!!, times(1)).mergeButtonOptions(any(), any())
+        verify(controllers[textButton1.id]!!, times(1)).addToMenu(any(), any())
+        verify(controllers[textButton1.id]!!, never()).destroy()
+    }
+
+    @Test
+    fun `mergeRightButtons - reorder of same menu items should rebuild menu, not view recreation`(){
+        val controllers = spy(LinkedHashMap<String,ButtonController>())
+        uut.mergeRightButtonsOptions(controllers, listOf(textButton1, textButton2)) {
+            createButtonController(it)
+        }
+        assertThat(uut.rightButtonCount).isEqualTo(2)
+        verify(controllers[textButton1.id]!!, times(1)).addToMenu(any(), any())
+        verify(controllers[textButton2.id]!!, times(1)).addToMenu(any(), any())
+
+        uut.mergeRightButtonsOptions(controllers, listOf(textButton2.copy(), textButton1.copy())) {
+            createButtonController(it)
+        }
+        verify(controllers[textButton1.id]!!, never()).mergeButtonOptions(any(), any())
+        verify(controllers[textButton2.id]!!, never()).mergeButtonOptions(any(), any())
+        verify(controllers[textButton1.id]!!, times(2)).addToMenu(any(), any())
+        verify(controllers[textButton2.id]!!, times(2)).addToMenu(any(), any())
+        verify(controllers[textButton1.id]!!, never()).destroy()
+        verify(controllers[textButton2.id]!!, never()).destroy()
+    }
+
+    private fun createButtonController(it: ButtonOptions) =
+        spy(ButtonController(activity, ButtonPresenter(activity, it, IconResolverFake(activity)),
+            it, TitleBarButtonCreatorMock(), object : ButtonController.OnClickListener {
+                override fun onPress(button: ButtonOptions) {
+
+                }
+
+            }))
+
     private fun createButtons() {
         leftButton = ButtonOptions()
         leftButton.id = Constants.BACK_BUTTON_ID
@@ -238,17 +423,10 @@ class TopBarControllerTest : BaseTest() {
         return button
     }
 
-    private fun leftButton(leftButton: ButtonOptions): List<ButtonController> {
-        return listOf(TitleBarHelper.createButtonController(activity, leftButton))
-    }
-
-    private fun rightButtons(vararg buttons: ButtonOptions): List<ButtonController>? {
-        return CollectionUtils.map(listOf(*buttons)) { button: ButtonOptions? -> TitleBarHelper.createButtonController(activity, button) }
-    }
-
     private fun createTopBarController() = spy(object : TopBarController(animator) {
         override fun createTopBar(context: Context, stackLayout: StackLayout): TopBar {
             return spy(super.createTopBar(context, stackLayout))
         }
     })
+
 }
\ No newline at end of file
diff --git a/node_modules/react-native-navigation/lib/android/app/src/test/java/com/reactnativenavigation/viewcontrollers/viewcontroller/ViewControllerTest.java b/node_modules/react-native-navigation/lib/android/app/src/test/java/com/reactnativenavigation/viewcontrollers/viewcontroller/ViewControllerTest.java
index adf30de..90c29e3 100644
--- a/node_modules/react-native-navigation/lib/android/app/src/test/java/com/reactnativenavigation/viewcontrollers/viewcontroller/ViewControllerTest.java
+++ b/node_modules/react-native-navigation/lib/android/app/src/test/java/com/reactnativenavigation/viewcontrollers/viewcontroller/ViewControllerTest.java
@@ -31,6 +31,7 @@ import org.robolectric.Shadows;
 import java.lang.reflect.Field;
 
 import static org.assertj.core.api.Java6Assertions.assertThat;
+import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.spy;
 import static org.mockito.Mockito.times;
@@ -51,7 +52,9 @@ public class ViewControllerTest extends BaseTest {
         activity = newActivity();
         childRegistry = new ChildControllersRegistry();
         uut = new SimpleViewController(activity, childRegistry, "uut", new Options());
-        uut.setParentController(mock(ParentController.class));
+        final ParentController<?> parent = mock(ParentController.class);
+        uut.setParentController(parent);
+        Mockito.when(parent.resolveChildOptions(any())).thenReturn(Options.EMPTY);
     }
 
     @Test
diff --git a/node_modules/react-native-navigation/lib/android/app/src/test/java/com/reactnativenavigation/views/TitleAndButtonsContainerTest.kt b/node_modules/react-native-navigation/lib/android/app/src/test/java/com/reactnativenavigation/views/TitleAndButtonsContainerTest.kt
index 30738ce..068ea81 100644
--- a/node_modules/react-native-navigation/lib/android/app/src/test/java/com/reactnativenavigation/views/TitleAndButtonsContainerTest.kt
+++ b/node_modules/react-native-navigation/lib/android/app/src/test/java/com/reactnativenavigation/views/TitleAndButtonsContainerTest.kt
@@ -7,8 +7,8 @@ import android.view.View
 import android.view.ViewGroup
 import android.widget.FrameLayout
 import android.widget.LinearLayout
-import com.nhaarman.mockitokotlin2.spy
-import com.nhaarman.mockitokotlin2.verify
+import org.mockito.kotlin.spy
+import org.mockito.kotlin.verify
 import com.reactnativenavigation.BaseTest
 import com.reactnativenavigation.options.Alignment
 import com.reactnativenavigation.options.params.Colour
diff --git a/node_modules/react-native-navigation/lib/android/app/src/test/java/com/reactnativenavigation/views/animations/BaseViewAnimatorTest.kt b/node_modules/react-native-navigation/lib/android/app/src/test/java/com/reactnativenavigation/views/animations/BaseViewAnimatorTest.kt
index a8917d0..61707c4 100644
--- a/node_modules/react-native-navigation/lib/android/app/src/test/java/com/reactnativenavigation/views/animations/BaseViewAnimatorTest.kt
+++ b/node_modules/react-native-navigation/lib/android/app/src/test/java/com/reactnativenavigation/views/animations/BaseViewAnimatorTest.kt
@@ -2,14 +2,14 @@ package com.reactnativenavigation.views.animations
 
 import android.animation.Animator
 import android.view.View
-import com.nhaarman.mockitokotlin2.mock
-import com.nhaarman.mockitokotlin2.spy
-import com.nhaarman.mockitokotlin2.verify
-import com.nhaarman.mockitokotlin2.whenever
 import com.reactnativenavigation.BaseTest
 import com.reactnativenavigation.options.AnimationOptions
 import org.assertj.core.api.Java6Assertions.assertThat
 import org.junit.Test
+import org.mockito.kotlin.mock
+import org.mockito.kotlin.spy
+import org.mockito.kotlin.verify
+import org.mockito.kotlin.whenever
 
 class BaseViewAnimatorTest : BaseTest() {
     private lateinit var uut: BaseViewAnimator<View>
diff --git a/node_modules/react-native-navigation/lib/android/app/src/test/java/com/reactnativenavigation/views/bottomtabs/BottomTabsContainerTest.kt b/node_modules/react-native-navigation/lib/android/app/src/test/java/com/reactnativenavigation/views/bottomtabs/BottomTabsContainerTest.kt
index 61fccbc..134c394 100644
--- a/node_modules/react-native-navigation/lib/android/app/src/test/java/com/reactnativenavigation/views/bottomtabs/BottomTabsContainerTest.kt
+++ b/node_modules/react-native-navigation/lib/android/app/src/test/java/com/reactnativenavigation/views/bottomtabs/BottomTabsContainerTest.kt
@@ -6,7 +6,7 @@ import android.graphics.drawable.ColorDrawable
 import android.view.View
 import android.widget.LinearLayout
 import androidx.core.graphics.ColorUtils
-import com.nhaarman.mockitokotlin2.*
+import org.mockito.kotlin.*
 import com.reactnativenavigation.BaseTest
 import org.assertj.core.api.Assertions.assertThat
 import org.junit.Test
diff --git a/node_modules/react-native-navigation/lib/android/app/src/test/java/com/reactnativenavigation/views/bottomtabs/BottomTabsTest.kt b/node_modules/react-native-navigation/lib/android/app/src/test/java/com/reactnativenavigation/views/bottomtabs/BottomTabsTest.kt
index 8fb02c1..d75b5e4 100644
--- a/node_modules/react-native-navigation/lib/android/app/src/test/java/com/reactnativenavigation/views/bottomtabs/BottomTabsTest.kt
+++ b/node_modules/react-native-navigation/lib/android/app/src/test/java/com/reactnativenavigation/views/bottomtabs/BottomTabsTest.kt
@@ -1,9 +1,9 @@
 package com.reactnativenavigation.views.bottomtabs
 
-import com.nhaarman.mockitokotlin2.never
-import com.nhaarman.mockitokotlin2.spy
-import com.nhaarman.mockitokotlin2.times
-import com.nhaarman.mockitokotlin2.verify
+import org.mockito.kotlin.never
+import org.mockito.kotlin.spy
+import org.mockito.kotlin.times
+import org.mockito.kotlin.verify
 import com.reactnativenavigation.BaseTest
 import org.junit.Test
 
diff --git a/node_modules/react-native-navigation/lib/dist/Mock/Application.js b/node_modules/react-native-navigation/lib/dist/Mock/Application.js
index bb7566a..32be1e8 100644
--- a/node_modules/react-native-navigation/lib/dist/Mock/Application.js
+++ b/node_modules/react-native-navigation/lib/dist/Mock/Application.js
@@ -2,10 +2,10 @@
 Object.defineProperty(exports, "__esModule", { value: true });
 exports.Application = void 0;
 const tslib_1 = require("tslib");
-const React = tslib_1.__importStar(require("react"));
+const React = (0, tslib_1.__importStar)(require("react"));
 const react_native_1 = require("react-native");
 const connect_1 = require("./connect");
-exports.Application = connect_1.connect(class extends React.Component {
+exports.Application = (0, connect_1.connect)(class extends React.Component {
     constructor(props) {
         super(props);
         props.entryPoint();
diff --git a/node_modules/react-native-navigation/lib/dist/Mock/Components/BottomTabs.js b/node_modules/react-native-navigation/lib/dist/Mock/Components/BottomTabs.js
index 0eacd9f..ffd403d 100644
--- a/node_modules/react-native-navigation/lib/dist/Mock/Components/BottomTabs.js
+++ b/node_modules/react-native-navigation/lib/dist/Mock/Components/BottomTabs.js
@@ -2,10 +2,10 @@
 Object.defineProperty(exports, "__esModule", { value: true });
 exports.BottomTabs = void 0;
 const tslib_1 = require("tslib");
-const react_1 = tslib_1.__importStar(require("react"));
+const react_1 = (0, tslib_1.__importStar)(require("react"));
 const LayoutComponent_1 = require("./LayoutComponent");
 const connect_1 = require("../connect");
-exports.BottomTabs = connect_1.connect(class extends react_1.Component {
+exports.BottomTabs = (0, connect_1.connect)(class extends react_1.Component {
     render() {
         return this.props.layoutNode.children.map((child) => {
             return react_1.default.createElement(LayoutComponent_1.LayoutComponent, { key: child.nodeId, layoutNode: child });
diff --git a/node_modules/react-native-navigation/lib/dist/Mock/Components/ComponentScreen.js b/node_modules/react-native-navigation/lib/dist/Mock/Components/ComponentScreen.js
index c23f91d..b08caa6 100644
--- a/node_modules/react-native-navigation/lib/dist/Mock/Components/ComponentScreen.js
+++ b/node_modules/react-native-navigation/lib/dist/Mock/Components/ComponentScreen.js
@@ -2,14 +2,16 @@
 Object.defineProperty(exports, "__esModule", { value: true });
 exports.ComponentScreen = void 0;
 const tslib_1 = require("tslib");
-const react_1 = tslib_1.__importStar(require("react"));
+const react_1 = (0, tslib_1.__importStar)(require("react"));
 const react_native_1 = require("react-native");
-const __1 = require("../..");
+const src_1 = require("../../src");
 const constants_1 = require("../constants");
 const LayoutStore_1 = require("../Stores/LayoutStore");
 const connect_1 = require("../connect");
 const TopBar_1 = require("./TopBar");
-exports.ComponentScreen = connect_1.connect(class extends react_1.Component {
+const EventsStore_1 = require("../Stores/EventsStore");
+const lodash_1 = (0, tslib_1.__importDefault)(require("lodash"));
+exports.ComponentScreen = (0, connect_1.connect)(class extends react_1.Component {
     constructor(props) {
         super(props);
     }
@@ -29,13 +31,21 @@ exports.ComponentScreen = connect_1.connect(class extends react_1.Component {
         const buttons = bottomTabs.children.map((child, i) => {
             const bottomTabOptions = child.resolveOptions().bottomTab;
             return (react_1.default.createElement(react_native_1.View, { key: `tab-${i}` },
-                react_1.default.createElement(react_native_1.Button, { testID: bottomTabOptions?.testID, title: bottomTabOptions?.text || '', onPress: () => LayoutStore_1.LayoutStore.selectTabIndex(this.props.layoutNode.getBottomTabs(), i) }),
+                react_1.default.createElement(react_native_1.Button, { testID: bottomTabOptions?.testID, title: bottomTabOptions?.text || '', onPress: () => {
+                        EventsStore_1.events.invokeBottomTabPressed({
+                            tabIndex: i,
+                        });
+                        if (lodash_1.default.defaultTo(bottomTabOptions?.selectTabOnPress, true))
+                            LayoutStore_1.LayoutStore.selectTabIndex(this.props.layoutNode.getBottomTabs(), i);
+                    } }),
                 react_1.default.createElement(react_native_1.Text, null, bottomTabOptions?.badge)));
         });
         return react_1.default.createElement(react_native_1.View, { testID: bottomTabsOptions?.testID }, buttons);
     }
     render() {
-        const Component = __1.Navigation.mock.store.getWrappedComponent(this.props.layoutNode.data.name);
+        const Component = src_1.Navigation.mock.store.getWrappedComponent(this.props.layoutNode.data.name);
+        if (!Component)
+            throw new Error(`${this.props.layoutNode.data.name} has not been registered.`);
         return (react_1.default.createElement(react_native_1.View, { testID: this.isVisible() ? constants_1.VISIBLE_SCREEN_TEST_ID : undefined },
             this.props.layoutNode.getStack() && (react_1.default.createElement(TopBar_1.TopBar, { layoutNode: this.props.layoutNode, topBarOptions: this.props.layoutNode.resolveOptions().topBar, backButtonOptions: this.props.layoutNode.resolveOptions().topBar?.backButton })),
             this.renderTabBar(),
diff --git a/node_modules/react-native-navigation/lib/dist/Mock/Components/LayoutComponent.js b/node_modules/react-native-navigation/lib/dist/Mock/Components/LayoutComponent.js
index f29b2eb..5933829 100644
--- a/node_modules/react-native-navigation/lib/dist/Mock/Components/LayoutComponent.js
+++ b/node_modules/react-native-navigation/lib/dist/Mock/Components/LayoutComponent.js
@@ -2,12 +2,12 @@
 Object.defineProperty(exports, "__esModule", { value: true });
 exports.LayoutComponent = void 0;
 const tslib_1 = require("tslib");
-const react_1 = tslib_1.__importStar(require("react"));
+const react_1 = (0, tslib_1.__importStar)(require("react"));
 const react_native_1 = require("react-native");
 const BottomTabs_1 = require("./BottomTabs");
 const ComponentScreen_1 = require("./ComponentScreen");
 const Stack_1 = require("./Stack");
-exports.LayoutComponent = class extends react_1.Component {
+const LayoutComponent = class extends react_1.Component {
     render() {
         switch (this.props.layoutNode.type) {
             case 'BottomTabs':
@@ -20,3 +20,4 @@ exports.LayoutComponent = class extends react_1.Component {
         return react_1.default.createElement(react_native_1.View, null);
     }
 };
+exports.LayoutComponent = LayoutComponent;
diff --git a/node_modules/react-native-navigation/lib/dist/Mock/Components/Modals.js b/node_modules/react-native-navigation/lib/dist/Mock/Components/Modals.js
index 8ac96a7..c627545 100644
--- a/node_modules/react-native-navigation/lib/dist/Mock/Components/Modals.js
+++ b/node_modules/react-native-navigation/lib/dist/Mock/Components/Modals.js
@@ -2,12 +2,12 @@
 Object.defineProperty(exports, "__esModule", { value: true });
 exports.Modals = void 0;
 const tslib_1 = require("tslib");
-const react_1 = tslib_1.__importStar(require("react"));
+const react_1 = (0, tslib_1.__importStar)(require("react"));
 const react_native_1 = require("react-native");
 const LayoutComponent_1 = require("./LayoutComponent");
 const LayoutStore_1 = require("../Stores/LayoutStore");
 const connect_1 = require("../connect");
-exports.Modals = connect_1.connect(class extends react_1.Component {
+exports.Modals = (0, connect_1.connect)(class extends react_1.Component {
     render() {
         const children = LayoutStore_1.LayoutStore.getModals();
         return (react_1.default.createElement(react_native_1.View, { testID: 'MODALS' }, children.map((child) => {
diff --git a/node_modules/react-native-navigation/lib/dist/Mock/Components/NavigationButton.d.ts b/node_modules/react-native-navigation/lib/dist/Mock/Components/NavigationButton.d.ts
index 5ab3ed6..00891e7 100644
--- a/node_modules/react-native-navigation/lib/dist/Mock/Components/NavigationButton.d.ts
+++ b/node_modules/react-native-navigation/lib/dist/Mock/Components/NavigationButton.d.ts
@@ -1,5 +1,5 @@
 import React from 'react';
-import { OptionsTopBarButton } from '../../';
+import { OptionsTopBarButton } from '../../src';
 interface ButtonProps {
     button: OptionsTopBarButton;
     componentId: string;
diff --git a/node_modules/react-native-navigation/lib/dist/Mock/Components/NavigationButton.js b/node_modules/react-native-navigation/lib/dist/Mock/Components/NavigationButton.js
index 2cb3287..f6220b2 100644
--- a/node_modules/react-native-navigation/lib/dist/Mock/Components/NavigationButton.js
+++ b/node_modules/react-native-navigation/lib/dist/Mock/Components/NavigationButton.js
@@ -2,15 +2,12 @@
 Object.defineProperty(exports, "__esModule", { value: true });
 exports.NavigationButton = void 0;
 const tslib_1 = require("tslib");
-const react_1 = tslib_1.__importStar(require("react"));
+const react_1 = (0, tslib_1.__importStar)(require("react"));
 const react_native_1 = require("react-native");
-const __1 = require("../../");
+const src_1 = require("../../src");
 const EventsStore_1 = require("../Stores/EventsStore");
-exports.NavigationButton = class extends react_1.Component {
-    constructor() {
-        super(...arguments);
-        this.ref = undefined;
-    }
+const NavigationButton = class extends react_1.Component {
+    ref = undefined;
     render() {
         const { button, componentId } = this.props;
         if (button.component)
@@ -26,8 +23,8 @@ exports.NavigationButton = class extends react_1.Component {
         //@ts-ignore
         const buttonComponentId = button.component.componentId;
         //@ts-ignore
-        const Component = __1.Navigation.mock.store.getComponentClassForName(button.component.name)();
-        const props = __1.Navigation.mock.store.getPropsForId(buttonComponentId);
+        const Component = src_1.Navigation.mock.store.getComponentClassForName(button.component.name)();
+        const props = src_1.Navigation.mock.store.getPropsForId(buttonComponentId);
         return (react_1.default.createElement(react_native_1.TouchableOpacity, { onPress: () => {
                 if (this.ref) {
                     // @ts-ignore
@@ -38,7 +35,7 @@ exports.NavigationButton = class extends react_1.Component {
                     componentId: componentId,
                 });
             }, testID: button.testID },
-            react_1.default.createElement(Component, Object.assign({ key: buttonComponentId }, props, { componentId: buttonComponentId, ref: (ref) => (this.ref = ref) }))));
+            react_1.default.createElement(Component, { key: buttonComponentId, ...props, componentId: buttonComponentId, ref: (ref) => (this.ref = ref) })));
     }
     invokeOnClick(stateNode) {
         if (stateNode.children) {
@@ -53,3 +50,4 @@ exports.NavigationButton = class extends react_1.Component {
         }
     }
 };
+exports.NavigationButton = NavigationButton;
diff --git a/node_modules/react-native-navigation/lib/dist/Mock/Components/Overlays.js b/node_modules/react-native-navigation/lib/dist/Mock/Components/Overlays.js
index f20cb39..f9d336b 100644
--- a/node_modules/react-native-navigation/lib/dist/Mock/Components/Overlays.js
+++ b/node_modules/react-native-navigation/lib/dist/Mock/Components/Overlays.js
@@ -2,13 +2,13 @@
 Object.defineProperty(exports, "__esModule", { value: true });
 exports.Overlays = void 0;
 const tslib_1 = require("tslib");
-const react_1 = tslib_1.__importStar(require("react"));
+const react_1 = (0, tslib_1.__importStar)(require("react"));
 const react_native_1 = require("react-native");
 const constants_1 = require("../constants");
 const LayoutComponent_1 = require("./LayoutComponent");
 const LayoutStore_1 = require("../Stores/LayoutStore");
 const connect_1 = require("../connect");
-exports.Overlays = connect_1.connect(class extends react_1.Component {
+exports.Overlays = (0, connect_1.connect)(class extends react_1.Component {
     render() {
         const children = LayoutStore_1.LayoutStore.getOverlays();
         return (react_1.default.createElement(react_native_1.View, { testID: constants_1.VISIBLE_OVERLAY_TEST_ID }, children.map((child) => {
diff --git a/node_modules/react-native-navigation/lib/dist/Mock/Components/Stack.js b/node_modules/react-native-navigation/lib/dist/Mock/Components/Stack.js
index d2586c8..602089f 100644
--- a/node_modules/react-native-navigation/lib/dist/Mock/Components/Stack.js
+++ b/node_modules/react-native-navigation/lib/dist/Mock/Components/Stack.js
@@ -2,10 +2,10 @@
 Object.defineProperty(exports, "__esModule", { value: true });
 exports.Stack = void 0;
 const tslib_1 = require("tslib");
-const react_1 = tslib_1.__importStar(require("react"));
+const react_1 = (0, tslib_1.__importStar)(require("react"));
 const LayoutComponent_1 = require("./LayoutComponent");
 const connect_1 = require("../connect");
-exports.Stack = connect_1.connect(class extends react_1.Component {
+exports.Stack = (0, connect_1.connect)(class extends react_1.Component {
     render() {
         const children = this.props.layoutNode.children;
         return children.map((child, i) => {
diff --git a/node_modules/react-native-navigation/lib/dist/Mock/Components/TopBar.d.ts b/node_modules/react-native-navigation/lib/dist/Mock/Components/TopBar.d.ts
index ccfb29d..1cfae16 100644
--- a/node_modules/react-native-navigation/lib/dist/Mock/Components/TopBar.d.ts
+++ b/node_modules/react-native-navigation/lib/dist/Mock/Components/TopBar.d.ts
@@ -1,6 +1,6 @@
 import React from 'react';
-import { OptionsTopBarButton } from '../..';
-import { OptionsTopBar, OptionsTopBarBackButton } from '../../interfaces/Options';
+import { OptionsTopBarButton } from '../../src';
+import { OptionsTopBar, OptionsTopBarBackButton } from '../../src/interfaces/Options';
 import ParentNode from '../Layouts/ParentNode';
 export interface TopBarProps {
     layoutNode: ParentNode;
diff --git a/node_modules/react-native-navigation/lib/dist/Mock/Components/TopBar.js b/node_modules/react-native-navigation/lib/dist/Mock/Components/TopBar.js
index 9482bc4..97564f2 100644
--- a/node_modules/react-native-navigation/lib/dist/Mock/Components/TopBar.js
+++ b/node_modules/react-native-navigation/lib/dist/Mock/Components/TopBar.js
@@ -2,14 +2,14 @@
 Object.defineProperty(exports, "__esModule", { value: true });
 exports.TopBar = void 0;
 const tslib_1 = require("tslib");
-const react_1 = tslib_1.__importStar(require("react"));
+const react_1 = (0, tslib_1.__importStar)(require("react"));
 const react_native_1 = require("react-native");
-const __1 = require("../..");
+const src_1 = require("../../src");
 const LayoutStore_1 = require("../Stores/LayoutStore");
 const NavigationButton_1 = require("./NavigationButton");
 const EventsStore_1 = require("../Stores/EventsStore");
 const DEFAULT_BACK_BUTTON_ID = 'RNN.back';
-exports.TopBar = class extends react_1.Component {
+const TopBar = class extends react_1.Component {
     constructor(props) {
         super(props);
     }
@@ -54,9 +54,10 @@ exports.TopBar = class extends react_1.Component {
             } }));
     }
     renderComponent(id, name, testID) {
-        const Component = __1.Navigation.mock.store.getComponentClassForName(name)();
-        const props = __1.Navigation.mock.store.getPropsForId(id);
+        const Component = src_1.Navigation.mock.store.getComponentClassForName(name)();
+        const props = src_1.Navigation.mock.store.getPropsForId(id);
         return (react_1.default.createElement(react_native_1.View, { key: id, testID: testID },
-            react_1.default.createElement(Component, Object.assign({}, props, { componentId: id }))));
+            react_1.default.createElement(Component, { ...props, componentId: id })));
     }
 };
+exports.TopBar = TopBar;
diff --git a/node_modules/react-native-navigation/lib/dist/Mock/Layouts/BottomTabsNode.d.ts b/node_modules/react-native-navigation/lib/dist/Mock/Layouts/BottomTabsNode.d.ts
index 9d6540d..fe148ca 100644
--- a/node_modules/react-native-navigation/lib/dist/Mock/Layouts/BottomTabsNode.d.ts
+++ b/node_modules/react-native-navigation/lib/dist/Mock/Layouts/BottomTabsNode.d.ts
@@ -1,4 +1,4 @@
-import { Options } from '../../index';
+import { Options } from '../../src/index';
 import ParentNode from './ParentNode';
 export default class BottomTabsNode extends ParentNode {
     selectedIndex: number;
diff --git a/node_modules/react-native-navigation/lib/dist/Mock/Layouts/BottomTabsNode.js b/node_modules/react-native-navigation/lib/dist/Mock/Layouts/BottomTabsNode.js
index 8262560..97a97df 100644
--- a/node_modules/react-native-navigation/lib/dist/Mock/Layouts/BottomTabsNode.js
+++ b/node_modules/react-native-navigation/lib/dist/Mock/Layouts/BottomTabsNode.js
@@ -1,13 +1,13 @@
 "use strict";
 Object.defineProperty(exports, "__esModule", { value: true });
 const tslib_1 = require("tslib");
-const lodash_1 = tslib_1.__importDefault(require("lodash"));
+const lodash_1 = (0, tslib_1.__importDefault)(require("lodash"));
 const LayoutStore_1 = require("../Stores/LayoutStore");
-const ParentNode_1 = tslib_1.__importDefault(require("./ParentNode"));
+const ParentNode_1 = (0, tslib_1.__importDefault)(require("./ParentNode"));
 class BottomTabsNode extends ParentNode_1.default {
+    selectedIndex = 0;
     constructor(layout, parentNode) {
         super(layout, 'BottomTabs', parentNode);
-        this.selectedIndex = 0;
     }
     mergeOptions(options) {
         super.mergeOptions(options);
diff --git a/node_modules/react-native-navigation/lib/dist/Mock/Layouts/ComponentNode.d.ts b/node_modules/react-native-navigation/lib/dist/Mock/Layouts/ComponentNode.d.ts
index 2982e5c..d4f6e85 100644
--- a/node_modules/react-native-navigation/lib/dist/Mock/Layouts/ComponentNode.d.ts
+++ b/node_modules/react-native-navigation/lib/dist/Mock/Layouts/ComponentNode.d.ts
@@ -1,4 +1,4 @@
-import { OptionsTopBarButton } from 'react-native-navigation/interfaces/Options';
+import { OptionsTopBarButton } from '../../src';
 import ParentNode from './ParentNode';
 export default class ComponentNode extends ParentNode {
     componentDidMountOnce: boolean;
diff --git a/node_modules/react-native-navigation/lib/dist/Mock/Layouts/ComponentNode.js b/node_modules/react-native-navigation/lib/dist/Mock/Layouts/ComponentNode.js
index 6ff44f8..50f3629 100644
--- a/node_modules/react-native-navigation/lib/dist/Mock/Layouts/ComponentNode.js
+++ b/node_modules/react-native-navigation/lib/dist/Mock/Layouts/ComponentNode.js
@@ -1,14 +1,14 @@
 "use strict";
 Object.defineProperty(exports, "__esModule", { value: true });
 const tslib_1 = require("tslib");
-const lodash_1 = tslib_1.__importDefault(require("lodash"));
+const lodash_1 = (0, tslib_1.__importDefault)(require("lodash"));
 const EventsStore_1 = require("../Stores/EventsStore");
-const ParentNode_1 = tslib_1.__importDefault(require("./ParentNode"));
+const ParentNode_1 = (0, tslib_1.__importDefault)(require("./ParentNode"));
 class ComponentNode extends ParentNode_1.default {
+    componentDidMountOnce = false;
+    componentDidAppearPending = false;
     constructor(layout, parentNode) {
         super(layout, 'Component', parentNode);
-        this.componentDidMountOnce = false;
-        this.componentDidAppearPending = false;
     }
     componentDidMount() {
         this.componentDidMountOnce = true;
diff --git a/node_modules/react-native-navigation/lib/dist/Mock/Layouts/LayoutNodeFactory.js b/node_modules/react-native-navigation/lib/dist/Mock/Layouts/LayoutNodeFactory.js
index 2a5d9fa..1ea4e18 100644
--- a/node_modules/react-native-navigation/lib/dist/Mock/Layouts/LayoutNodeFactory.js
+++ b/node_modules/react-native-navigation/lib/dist/Mock/Layouts/LayoutNodeFactory.js
@@ -1,9 +1,9 @@
 "use strict";
 Object.defineProperty(exports, "__esModule", { value: true });
 const tslib_1 = require("tslib");
-const BottomTabsNode_1 = tslib_1.__importDefault(require("./BottomTabsNode"));
-const ComponentNode_1 = tslib_1.__importDefault(require("./ComponentNode"));
-const StackNode_1 = tslib_1.__importDefault(require("./StackNode"));
+const BottomTabsNode_1 = (0, tslib_1.__importDefault)(require("./BottomTabsNode"));
+const ComponentNode_1 = (0, tslib_1.__importDefault)(require("./ComponentNode"));
+const StackNode_1 = (0, tslib_1.__importDefault)(require("./StackNode"));
 class LayoutNodeFactory {
     static create(layout, parentNode) {
         switch (layout.type) {
diff --git a/node_modules/react-native-navigation/lib/dist/Mock/Layouts/Node.d.ts b/node_modules/react-native-navigation/lib/dist/Mock/Layouts/Node.d.ts
index 8f31302..6162d3a 100644
--- a/node_modules/react-native-navigation/lib/dist/Mock/Layouts/Node.d.ts
+++ b/node_modules/react-native-navigation/lib/dist/Mock/Layouts/Node.d.ts
@@ -1,4 +1,4 @@
-import { Options } from '../../index';
+import { Options } from '../../src/index';
 import ParentNode from './ParentNode';
 interface Data {
     name: string;
diff --git a/node_modules/react-native-navigation/lib/dist/Mock/Layouts/Node.js b/node_modules/react-native-navigation/lib/dist/Mock/Layouts/Node.js
index f035991..04bc683 100644
--- a/node_modules/react-native-navigation/lib/dist/Mock/Layouts/Node.js
+++ b/node_modules/react-native-navigation/lib/dist/Mock/Layouts/Node.js
@@ -1,6 +1,11 @@
 "use strict";
 Object.defineProperty(exports, "__esModule", { value: true });
 class Node {
+    nodeId;
+    data;
+    type;
+    // options: Options;
+    parentNode;
     constructor(layout, type, parentNode) {
         this.nodeId = layout.id;
         this.data = layout.data;
diff --git a/node_modules/react-native-navigation/lib/dist/Mock/Layouts/ParentNode.d.ts b/node_modules/react-native-navigation/lib/dist/Mock/Layouts/ParentNode.d.ts
index ea22d3d..6adf7d3 100644
--- a/node_modules/react-native-navigation/lib/dist/Mock/Layouts/ParentNode.d.ts
+++ b/node_modules/react-native-navigation/lib/dist/Mock/Layouts/ParentNode.d.ts
@@ -1,5 +1,5 @@
-import { OptionsTopBarButton } from '../../interfaces/Options';
-import { Options } from '../../index';
+import { OptionsTopBarButton } from '../../src/interfaces/Options';
+import { Options } from '../../src/index';
 import ComponentNode from './ComponentNode';
 import Node, { NodeType } from './Node';
 export default class ParentNode extends Node {
diff --git a/node_modules/react-native-navigation/lib/dist/Mock/Layouts/ParentNode.js b/node_modules/react-native-navigation/lib/dist/Mock/Layouts/ParentNode.js
index c446dcd..0ba4f70 100644
--- a/node_modules/react-native-navigation/lib/dist/Mock/Layouts/ParentNode.js
+++ b/node_modules/react-native-navigation/lib/dist/Mock/Layouts/ParentNode.js
@@ -1,11 +1,12 @@
 "use strict";
 Object.defineProperty(exports, "__esModule", { value: true });
 const tslib_1 = require("tslib");
-const lodash_1 = tslib_1.__importDefault(require("lodash"));
+const lodash_1 = (0, tslib_1.__importDefault)(require("lodash"));
 const LayoutStore_1 = require("../Stores/LayoutStore");
-const LayoutNodeFactory_1 = tslib_1.__importDefault(require("./LayoutNodeFactory"));
-const Node_1 = tslib_1.__importDefault(require("./Node"));
+const LayoutNodeFactory_1 = (0, tslib_1.__importDefault)(require("./LayoutNodeFactory"));
+const Node_1 = (0, tslib_1.__importDefault)(require("./Node"));
 class ParentNode extends Node_1.default {
+    children;
     constructor(layout, type, parentNode) {
         super(layout, type, parentNode);
         this.children = layout.children.map((childLayout) => LayoutNodeFactory_1.default.create(childLayout, this));
diff --git a/node_modules/react-native-navigation/lib/dist/Mock/Layouts/StackNode.js b/node_modules/react-native-navigation/lib/dist/Mock/Layouts/StackNode.js
index 2093e7b..7d78383 100644
--- a/node_modules/react-native-navigation/lib/dist/Mock/Layouts/StackNode.js
+++ b/node_modules/react-native-navigation/lib/dist/Mock/Layouts/StackNode.js
@@ -1,7 +1,7 @@
 "use strict";
 Object.defineProperty(exports, "__esModule", { value: true });
 const tslib_1 = require("tslib");
-const ParentNode_1 = tslib_1.__importDefault(require("./ParentNode"));
+const ParentNode_1 = (0, tslib_1.__importDefault)(require("./ParentNode"));
 class StackNode extends ParentNode_1.default {
     constructor(layout, parentNode) {
         super(layout, 'Stack', parentNode);
diff --git a/node_modules/react-native-navigation/lib/dist/Mock/Stores/EventsStore.d.ts b/node_modules/react-native-navigation/lib/dist/Mock/Stores/EventsStore.d.ts
index 78dedaa..b82289f 100644
--- a/node_modules/react-native-navigation/lib/dist/Mock/Stores/EventsStore.d.ts
+++ b/node_modules/react-native-navigation/lib/dist/Mock/Stores/EventsStore.d.ts
@@ -1,14 +1,17 @@
-import { ComponentDidDisappearEvent, ComponentWillAppearEvent, ModalDismissedEvent } from '../../interfaces/ComponentEvents';
-import { ComponentDidAppearEvent, NavigationButtonPressedEvent } from '../../index';
+import { ComponentDidDisappearEvent, ComponentWillAppearEvent, ModalDismissedEvent } from '../../src/interfaces/ComponentEvents';
+import { ComponentDidAppearEvent, NavigationButtonPressedEvent } from '../../src/index';
+import { BottomTabPressedEvent } from '../../src/interfaces/Events';
 export declare const events: {
     navigationButtonPressed: ((_event: NavigationButtonPressedEvent) => void)[];
     componentWillAppear: ((_event: ComponentWillAppearEvent) => void)[];
     componentDidAppear: ((_event: ComponentDidAppearEvent) => void)[];
     componentDidDisappear: ((_event: ComponentDidDisappearEvent) => void)[];
     modalDismissed: ((_event: ModalDismissedEvent) => void)[];
+    bottomTabPressed: ((_event: BottomTabPressedEvent) => void)[];
     invokeComponentWillAppear: (event: ComponentWillAppearEvent) => void;
     invokeComponentDidAppear: (event: ComponentDidAppearEvent) => void;
     invokeComponentDidDisappear: (event: ComponentDidDisappearEvent) => void;
     invokeModalDismissed: (event: ModalDismissedEvent) => void;
     invokeNavigationButtonPressed: (event: NavigationButtonPressedEvent) => void;
+    invokeBottomTabPressed: (event: BottomTabPressedEvent) => void;
 };
diff --git a/node_modules/react-native-navigation/lib/dist/Mock/Stores/EventsStore.js b/node_modules/react-native-navigation/lib/dist/Mock/Stores/EventsStore.js
index 40426e2..4b08b2b 100644
--- a/node_modules/react-native-navigation/lib/dist/Mock/Stores/EventsStore.js
+++ b/node_modules/react-native-navigation/lib/dist/Mock/Stores/EventsStore.js
@@ -7,6 +7,7 @@ exports.events = {
     componentDidAppear: [(_event) => { }],
     componentDidDisappear: [(_event) => { }],
     modalDismissed: [(_event) => { }],
+    bottomTabPressed: [(_event) => { }],
     invokeComponentWillAppear: (event) => {
         exports.events.componentWillAppear &&
             exports.events.componentWillAppear.forEach((listener) => {
@@ -37,4 +38,10 @@ exports.events = {
                 listener(event);
             });
     },
+    invokeBottomTabPressed: (event) => {
+        exports.events.bottomTabPressed &&
+            exports.events.bottomTabPressed?.forEach((listener) => {
+                listener(event);
+            });
+    },
 };
diff --git a/node_modules/react-native-navigation/lib/dist/Mock/Stores/LayoutStore.js b/node_modules/react-native-navigation/lib/dist/Mock/Stores/LayoutStore.js
index 1aa3bcd..380d2a6 100644
--- a/node_modules/react-native-navigation/lib/dist/Mock/Stores/LayoutStore.js
+++ b/node_modules/react-native-navigation/lib/dist/Mock/Stores/LayoutStore.js
@@ -2,8 +2,8 @@
 Object.defineProperty(exports, "__esModule", { value: true });
 exports.LayoutStore = void 0;
 const tslib_1 = require("tslib");
-const lodash_1 = tslib_1.__importDefault(require("lodash"));
-const LayoutNodeFactory_1 = tslib_1.__importDefault(require("../Layouts/LayoutNodeFactory"));
+const lodash_1 = (0, tslib_1.__importDefault)(require("lodash"));
+const LayoutNodeFactory_1 = (0, tslib_1.__importDefault)(require("../Layouts/LayoutNodeFactory"));
 const remx = require('remx');
 const state = remx.state({
     root: {},
@@ -75,7 +75,10 @@ const setters = remx.setters({
     },
     mergeOptions(componentId, options) {
         const layout = getters.getLayoutById(componentId);
-        layout.mergeOptions(options);
+        if (layout)
+            layout.mergeOptions(options);
+        else
+            console.warn(`[RNN error] Merge options failure: cannot find layout for: ${componentId}`);
     },
 });
 const getters = remx.getters({
diff --git a/node_modules/react-native-navigation/lib/dist/Mock/connect.js b/node_modules/react-native-navigation/lib/dist/Mock/connect.js
index ca7b3b4..c9fa9cd 100644
--- a/node_modules/react-native-navigation/lib/dist/Mock/connect.js
+++ b/node_modules/react-native-navigation/lib/dist/Mock/connect.js
@@ -4,6 +4,6 @@ exports.connect = void 0;
 const remx_1 = require("remx");
 function connect(component) {
     // @ts-ignore
-    return remx_1.connect()(component);
+    return (0, remx_1.connect)()(component);
 }
 exports.connect = connect;
diff --git a/node_modules/react-native-navigation/lib/dist/Mock/index.js b/node_modules/react-native-navigation/lib/dist/Mock/index.js
index 3720f4c..26e72e8 100644
--- a/node_modules/react-native-navigation/lib/dist/Mock/index.js
+++ b/node_modules/react-native-navigation/lib/dist/Mock/index.js
@@ -3,7 +3,7 @@ Object.defineProperty(exports, "__esModule", { value: true });
 exports.mockNativeComponents = exports.ApplicationMock = void 0;
 const tslib_1 = require("tslib");
 exports.ApplicationMock = require('./Application').Application;
-tslib_1.__exportStar(require("./constants"), exports);
+(0, tslib_1.__exportStar)(require("./constants"), exports);
 function mockNativeComponents() {
     const { NativeCommandsSender } = require('./mocks/NativeCommandsSender');
     const { NativeEventsReceiver } = require('./mocks/NativeEventsReceiver');
diff --git a/node_modules/react-native-navigation/lib/dist/Mock/mocks/NativeCommandsSender.d.ts b/node_modules/react-native-navigation/lib/dist/Mock/mocks/NativeCommandsSender.d.ts
index 82dd97e..5a788a9 100644
--- a/node_modules/react-native-navigation/lib/dist/Mock/mocks/NativeCommandsSender.d.ts
+++ b/node_modules/react-native-navigation/lib/dist/Mock/mocks/NativeCommandsSender.d.ts
@@ -1,4 +1,4 @@
-import { LayoutNode } from 'react-native-navigation/commands/LayoutTreeCrawler';
+import { LayoutNode } from '../../src/commands/LayoutTreeCrawler';
 export declare class NativeCommandsSender {
     constructor();
     setRoot(_commandId: string, layout: {
diff --git a/node_modules/react-native-navigation/lib/dist/Mock/mocks/NativeCommandsSender.js b/node_modules/react-native-navigation/lib/dist/Mock/mocks/NativeCommandsSender.js
index 145c823..3d64226 100644
--- a/node_modules/react-native-navigation/lib/dist/Mock/mocks/NativeCommandsSender.js
+++ b/node_modules/react-native-navigation/lib/dist/Mock/mocks/NativeCommandsSender.js
@@ -3,9 +3,9 @@ Object.defineProperty(exports, "__esModule", { value: true });
 exports.NativeCommandsSender = void 0;
 const tslib_1 = require("tslib");
 const LayoutStore_1 = require("../Stores/LayoutStore");
-const LayoutNodeFactory_1 = tslib_1.__importDefault(require("../Layouts/LayoutNodeFactory"));
+const LayoutNodeFactory_1 = (0, tslib_1.__importDefault)(require("../Layouts/LayoutNodeFactory"));
 const EventsStore_1 = require("../Stores/EventsStore");
-const lodash_1 = tslib_1.__importDefault(require("lodash"));
+const lodash_1 = (0, tslib_1.__importDefault)(require("lodash"));
 class NativeCommandsSender {
     constructor() { }
     setRoot(_commandId, layout) {
diff --git a/node_modules/react-native-navigation/lib/dist/Mock/mocks/NativeEventsReceiver.d.ts b/node_modules/react-native-navigation/lib/dist/Mock/mocks/NativeEventsReceiver.d.ts
index aea5d05..df61587 100644
--- a/node_modules/react-native-navigation/lib/dist/Mock/mocks/NativeEventsReceiver.d.ts
+++ b/node_modules/react-native-navigation/lib/dist/Mock/mocks/NativeEventsReceiver.d.ts
@@ -1,13 +1,13 @@
 import { EmitterSubscription } from 'react-native';
-import { ComponentWillAppearEvent, ComponentDidAppearEvent, ComponentDidDisappearEvent, NavigationButtonPressedEvent, SearchBarUpdatedEvent, SearchBarCancelPressedEvent, PreviewCompletedEvent, ModalDismissedEvent, ScreenPoppedEvent, ModalAttemptedToDismissEvent } from '../../interfaces/ComponentEvents';
-import { CommandCompletedEvent, BottomTabSelectedEvent, BottomTabLongPressedEvent, BottomTabPressedEvent } from '../../interfaces/Events';
+import { ComponentWillAppearEvent, ComponentDidAppearEvent, ComponentDidDisappearEvent, NavigationButtonPressedEvent, SearchBarUpdatedEvent, SearchBarCancelPressedEvent, PreviewCompletedEvent, ModalDismissedEvent, ScreenPoppedEvent, ModalAttemptedToDismissEvent } from '../../src/interfaces/ComponentEvents';
+import { CommandCompletedEvent, BottomTabSelectedEvent, BottomTabLongPressedEvent, BottomTabPressedEvent } from '../../src/interfaces/Events';
 export declare class NativeEventsReceiver {
     registerAppLaunchedListener(callback: () => void): EmitterSubscription;
     registerComponentWillAppearListener(callback: (event: ComponentWillAppearEvent) => void): EmitterSubscription;
     registerComponentDidAppearListener(callback: (event: ComponentDidAppearEvent) => void): EmitterSubscription;
     registerComponentDidDisappearListener(callback: (event: ComponentDidDisappearEvent) => void): EmitterSubscription;
     registerNavigationButtonPressedListener(callback: (event: NavigationButtonPressedEvent) => void): EmitterSubscription;
-    registerBottomTabPressedListener(_callback: (data: BottomTabPressedEvent) => void): EmitterSubscription;
+    registerBottomTabPressedListener(callback: (data: BottomTabPressedEvent) => void): EmitterSubscription;
     registerModalDismissedListener(callback: (event: ModalDismissedEvent) => void): EmitterSubscription;
     registerModalAttemptedToDismissListener(_callback: (event: ModalAttemptedToDismissEvent) => void): EmitterSubscription;
     registerSearchBarUpdatedListener(_callback: (event: SearchBarUpdatedEvent) => void): EmitterSubscription;
diff --git a/node_modules/react-native-navigation/lib/dist/Mock/mocks/NativeEventsReceiver.js b/node_modules/react-native-navigation/lib/dist/Mock/mocks/NativeEventsReceiver.js
index dcb7de6..0ec537c 100644
--- a/node_modules/react-native-navigation/lib/dist/Mock/mocks/NativeEventsReceiver.js
+++ b/node_modules/react-native-navigation/lib/dist/Mock/mocks/NativeEventsReceiver.js
@@ -2,7 +2,7 @@
 Object.defineProperty(exports, "__esModule", { value: true });
 exports.NativeEventsReceiver = void 0;
 const tslib_1 = require("tslib");
-const lodash_1 = tslib_1.__importDefault(require("lodash"));
+const lodash_1 = (0, tslib_1.__importDefault)(require("lodash"));
 const EventsStore_1 = require("./../Stores/EventsStore");
 class NativeEventsReceiver {
     registerAppLaunchedListener(callback) {
@@ -43,9 +43,12 @@ class NativeEventsReceiver {
             },
         };
     }
-    registerBottomTabPressedListener(_callback) {
+    registerBottomTabPressedListener(callback) {
+        EventsStore_1.events.bottomTabPressed.push(callback);
         return {
-            remove: () => { },
+            remove: () => {
+                lodash_1.default.remove(EventsStore_1.events.bottomTabPressed, (value) => value === callback);
+            },
         };
     }
     registerModalDismissedListener(callback) {
diff --git a/node_modules/react-native-navigation/lib/dist/adapters/ColorService.d.ts b/node_modules/react-native-navigation/lib/dist/adapters/ColorService.d.ts
deleted file mode 100644
index ab3e0ca..0000000
--- a/node_modules/react-native-navigation/lib/dist/adapters/ColorService.d.ts
+++ /dev/null
@@ -1,3 +0,0 @@
-export declare class ColorService {
-    toNativeColor(inputColor: string): number | typeof import("react-native").OpaqueColorValue | null | undefined;
-}
diff --git a/node_modules/react-native-navigation/lib/dist/adapters/TouchablePreview.js b/node_modules/react-native-navigation/lib/dist/adapters/TouchablePreview.js
deleted file mode 100644
index 4eb1e86..0000000
--- a/node_modules/react-native-navigation/lib/dist/adapters/TouchablePreview.js
+++ /dev/null
@@ -1,91 +0,0 @@
-"use strict";
-Object.defineProperty(exports, "__esModule", { value: true });
-exports.TouchablePreview = void 0;
-const tslib_1 = require("tslib");
-const React = tslib_1.__importStar(require("react"));
-const PropTypes = tslib_1.__importStar(require("prop-types"));
-const react_native_1 = require("react-native");
-const PREVIEW_DELAY = 350;
-const PREVIEW_MIN_FORCE = 0.1;
-const PREVIEW_TIMEOUT = 1250;
-class TouchablePreview extends React.PureComponent {
-    constructor() {
-        super(...arguments);
-        this.touchStartedAt = 0;
-        this.onRef = React.createRef();
-        this.onPress = () => {
-            const { onPress } = this.props;
-            if (typeof onPress !== 'function' || TouchablePreview.peeking) {
-                return;
-            }
-            return onPress();
-        };
-        this.onPressIn = () => {
-            if (react_native_1.Platform.OS === 'ios') {
-                const { onPressIn } = this.props;
-                if (!onPressIn) {
-                    return;
-                }
-                const reactTag = react_native_1.findNodeHandle(this.onRef.current);
-                return onPressIn({ reactTag });
-            }
-            // Other platforms don't support 3D Touch Preview API
-            return null;
-        };
-        this.onTouchStart = (event) => {
-            // Store a timestamp of the initial touch start
-            this.touchStartedAt = event.nativeEvent.timestamp;
-        };
-        this.onTouchMove = (event) => {
-            clearTimeout(this.timeout);
-            const { force, timestamp } = event.nativeEvent;
-            const diff = timestamp - this.touchStartedAt;
-            if (force > PREVIEW_MIN_FORCE && diff > PREVIEW_DELAY) {
-                TouchablePreview.peeking = true;
-                if (typeof this.props.onPeekIn === 'function') {
-                    this.props.onPeekIn();
-                }
-            }
-            //@ts-ignore
-            this.timeout = setTimeout(this.onTouchEnd, PREVIEW_TIMEOUT);
-        };
-        this.onTouchEnd = () => {
-            clearTimeout(this.timeout);
-            TouchablePreview.peeking = false;
-            if (typeof this.props.onPeekOut === 'function') {
-                this.props.onPeekOut();
-            }
-        };
-    }
-    render() {
-        const { children, touchableComponent, ...props } = this.props;
-        // Default to TouchableWithoutFeedback for iOS if set to TouchableNativeFeedback
-        const Touchable = react_native_1.Platform.OS === 'ios' && touchableComponent instanceof react_native_1.TouchableNativeFeedback
-            ? react_native_1.TouchableWithoutFeedback
-            : touchableComponent;
-        // Wrap component with Touchable for handling platform touches
-        // and a single react View for detecting force and timing.
-        return (
-        /**
-         * @TODO (Jin Shin 25 June 2020)
-         * Ignoring this for now so that it builds.
-         */
-        // @ts-ignore
-        React.createElement(Touchable, Object.assign({}, props, { ref: this.onRef, onPress: this.onPress, onPressIn: this.onPressIn }),
-            React.createElement(react_native_1.View, { onTouchStart: this.onTouchStart, onTouchMove: this.onTouchMove, onTouchEnd: this.onTouchEnd }, children)));
-    }
-}
-exports.TouchablePreview = TouchablePreview;
-TouchablePreview.propTypes = {
-    children: PropTypes.node,
-    touchableComponent: PropTypes.func,
-    onPress: PropTypes.func,
-    onPressIn: PropTypes.func,
-    onPeekIn: PropTypes.func,
-    onPeekOut: PropTypes.func,
-    label: PropTypes.string,
-};
-TouchablePreview.defaultProps = {
-    touchableComponent: react_native_1.TouchableWithoutFeedback,
-};
-TouchablePreview.peeking = false;
diff --git a/node_modules/react-native-navigation/lib/dist/commands/Deprecations.js b/node_modules/react-native-navigation/lib/dist/commands/Deprecations.js
deleted file mode 100644
index cfafec9..0000000
--- a/node_modules/react-native-navigation/lib/dist/commands/Deprecations.js
+++ /dev/null
@@ -1,82 +0,0 @@
-"use strict";
-Object.defineProperty(exports, "__esModule", { value: true });
-exports.Deprecations = void 0;
-const tslib_1 = require("tslib");
-const once_1 = tslib_1.__importDefault(require("lodash/once"));
-const get_1 = tslib_1.__importDefault(require("lodash/get"));
-const each_1 = tslib_1.__importDefault(require("lodash/each"));
-const react_native_1 = require("react-native");
-class Deprecations {
-    constructor() {
-        this.deprecatedOptions = [
-            {
-                key: 'topBar.searchBarHiddenWhenScrolling',
-                showWarning: once_1.default((_key, parentOptions) => {
-                    console.warn(`${_key} is deprecated and will be removed in the next major version. For more information see https://github.com/wix/react-native-navigation/issues/6585`, parentOptions);
-                }),
-            },
-            {
-                key: 'topBar.searchBarPlaceholder',
-                showWarning: once_1.default((_key, parentOptions) => {
-                    console.warn(`${_key} is deprecated and will be removed in the next major version. For more information see https://github.com/wix/react-native-navigation/issues/6585`, parentOptions);
-                }),
-            },
-            {
-                key: 'topBar.searchBarBackgroundColor',
-                showWarning: once_1.default((_key, parentOptions) => {
-                    console.warn(`${_key} is deprecated and will be removed in the next major version. For more information see https://github.com/wix/react-native-navigation/issues/6585`, parentOptions);
-                }),
-            },
-            {
-                key: 'topBar.searchBarTintColor',
-                showWarning: once_1.default((_key, parentOptions) => {
-                    console.warn(`${_key} is deprecated and will be removed in the next major version. For more information see https://github.com/wix/react-native-navigation/issues/6585`, parentOptions);
-                }),
-            },
-            {
-                key: 'topBar.hideNavBarOnFocusSearchBar',
-                showWarning: once_1.default((_key, parentOptions) => {
-                    console.warn(`${_key} is deprecated and will be removed in the next major version. For more information see https://github.com/wix/react-native-navigation/issues/6585`, parentOptions);
-                }),
-            },
-        ];
-        this.deprecateSearchBarOptions = once_1.default((parentOptions) => {
-            console.warn(`toggling searchBar visibility using a boolean value will be removed in the next major version. For more information see https://github.com/wix/react-native-navigation/issues/6585`, parentOptions);
-        });
-        this.deprecateInterpolationOptions = once_1.default((parentOptions) => {
-            console.warn(`Using Interpolation types as strings has been deprecated and will be removed in the next major version. For more information see https://github.com/wix/react-native-navigation/pull/6644`, parentOptions);
-        });
-        this.deprecateBottomTabsVisibility = once_1.default((parentOptions) => {
-            console.warn(`toggling bottomTabs visibility is deprecated on iOS. For more information see https://github.com/wix/react-native-navigation/issues/6416`, parentOptions);
-        });
-    }
-    checkForDeprecatedOptions(options) {
-        each_1.default(this.deprecatedOptions, (option) => {
-            if (get_1.default(options, option.key, null)) {
-                option.showWarning(option.key, options);
-            }
-        });
-    }
-    onProcessOptions(key, parentOptions, commandName) {
-        if (key === 'bottomTabs' &&
-            parentOptions[key]?.visible !== undefined &&
-            react_native_1.Platform.OS === 'ios' &&
-            commandName === 'mergeOptions') {
-            this.deprecateBottomTabsVisibility(parentOptions);
-        }
-        if (key === 'searchBar' && react_native_1.Platform.OS === 'ios' && typeof parentOptions[key] === 'boolean') {
-            this.deprecateSearchBarOptions(parentOptions);
-        }
-        if (key === 'interpolation' && typeof parentOptions[key] === 'string') {
-            this.deprecateInterpolationOptions(parentOptions);
-        }
-        if (key === 'showModal' || key === 'dismissModal') {
-            if (typeof parentOptions[key] === 'object' &&
-                !('enter' in parentOptions[key]) &&
-                !('exit' in parentOptions[key]))
-                console.warn(`${key} without enter/exit is deprecated, and will be changed  in the next major version. For more information see https://wix.github.io/react-native-navigation/docs/style-animations#modal-animations`, parentOptions);
-        }
-    }
-    onProcessDefaultOptions(_key, _parentOptions) { }
-}
-exports.Deprecations = Deprecations;
diff --git a/node_modules/react-native-navigation/lib/dist/index.js b/node_modules/react-native-navigation/lib/dist/index.js
deleted file mode 100644
index cb95166..0000000
--- a/node_modules/react-native-navigation/lib/dist/index.js
+++ /dev/null
@@ -1,22 +0,0 @@
-"use strict";
-Object.defineProperty(exports, "__esModule", { value: true });
-exports.Navigation = void 0;
-const tslib_1 = require("tslib");
-const NavigationDelegate_1 = require("./NavigationDelegate");
-const navigationDelegate = new NavigationDelegate_1.NavigationDelegate();
-exports.Navigation = navigationDelegate;
-tslib_1.__exportStar(require("./components/Modal"), exports);
-tslib_1.__exportStar(require("./events/EventsRegistry"), exports);
-tslib_1.__exportStar(require("./adapters/Constants"), exports);
-tslib_1.__exportStar(require("./interfaces/ComponentEvents"), exports);
-tslib_1.__exportStar(require("./interfaces/Events"), exports);
-tslib_1.__exportStar(require("./interfaces/EventSubscription"), exports);
-tslib_1.__exportStar(require("./interfaces/Layout"), exports);
-tslib_1.__exportStar(require("./interfaces/Options"), exports);
-tslib_1.__exportStar(require("./interfaces/NavigationComponent"), exports);
-tslib_1.__exportStar(require("./interfaces/NavigationComponentProps"), exports);
-tslib_1.__exportStar(require("./interfaces/NavigationComponentListener"), exports);
-tslib_1.__exportStar(require("./interfaces/NavigationFunctionComponent"), exports);
-tslib_1.__exportStar(require("./interfaces/CommandName"), exports);
-tslib_1.__exportStar(require("./interfaces/Processors"), exports);
-tslib_1.__exportStar(require("./interfaces/ProcessorSubscription"), exports);
diff --git a/node_modules/react-native-navigation/lib/dist/Navigation.d.ts b/node_modules/react-native-navigation/lib/dist/src/Navigation.d.ts
similarity index 100%
rename from node_modules/react-native-navigation/lib/dist/Navigation.d.ts
rename to node_modules/react-native-navigation/lib/dist/src/Navigation.d.ts
diff --git a/node_modules/react-native-navigation/lib/dist/Navigation.js b/node_modules/react-native-navigation/lib/dist/src/Navigation.js
similarity index 93%
rename from node_modules/react-native-navigation/lib/dist/Navigation.js
rename to node_modules/react-native-navigation/lib/dist/src/Navigation.js
index 200c8e5..ceabecc 100644
--- a/node_modules/react-native-navigation/lib/dist/Navigation.js
+++ b/node_modules/react-native-navigation/lib/dist/src/Navigation.js
@@ -2,7 +2,7 @@
 Object.defineProperty(exports, "__esModule", { value: true });
 exports.NavigationRoot = void 0;
 const tslib_1 = require("tslib");
-const isArray_1 = tslib_1.__importDefault(require("lodash/isArray"));
+const isArray_1 = (0, tslib_1.__importDefault)(require("lodash/isArray"));
 const UniqueIdProvider_1 = require("./adapters/UniqueIdProvider");
 const Store_1 = require("./components/Store");
 const OptionProcessorsStore_1 = require("./processors/OptionProcessorsStore");
@@ -24,11 +24,27 @@ const LayoutProcessor_1 = require("./processors/LayoutProcessor");
 const LayoutProcessorsStore_1 = require("./processors/LayoutProcessorsStore");
 const OptionsCrawler_1 = require("./commands/OptionsCrawler");
 class NavigationRoot {
+    nativeCommandsSender;
+    nativeEventsReceiver;
+    appRegistryService;
+    TouchablePreview = TouchablePreview_1.TouchablePreview;
+    store;
+    optionProcessorsStore;
+    layoutProcessorsStore;
+    uniqueIdProvider;
+    componentRegistry;
+    layoutTreeParser;
+    layoutTreeCrawler;
+    commands;
+    eventsRegistry;
+    commandsObserver;
+    componentEventsObserver;
+    componentWrapper;
+    optionsCrawler;
     constructor(nativeCommandsSender, nativeEventsReceiver, appRegistryService) {
         this.nativeCommandsSender = nativeCommandsSender;
         this.nativeEventsReceiver = nativeEventsReceiver;
         this.appRegistryService = appRegistryService;
-        this.TouchablePreview = TouchablePreview_1.TouchablePreview;
         this.componentWrapper = new ComponentWrapper_1.ComponentWrapper();
         this.store = new Store_1.Store();
         this.optionProcessorsStore = new OptionProcessorsStore_1.OptionProcessorsStore();
@@ -147,7 +163,7 @@ class NavigationRoot {
      * Sets new root component to stack.
      */
     setStackRoot(componentId, layout) {
-        const children = isArray_1.default(layout) ? layout : [layout];
+        const children = (0, isArray_1.default)(layout) ? layout : [layout];
         return this.commands.setStackRoot(componentId, children);
     }
     /**
diff --git a/node_modules/react-native-navigation/lib/dist/NavigationDelegate.d.ts b/node_modules/react-native-navigation/lib/dist/src/NavigationDelegate.d.ts
similarity index 100%
rename from node_modules/react-native-navigation/lib/dist/NavigationDelegate.d.ts
rename to node_modules/react-native-navigation/lib/dist/src/NavigationDelegate.d.ts
diff --git a/node_modules/react-native-navigation/lib/dist/NavigationDelegate.js b/node_modules/react-native-navigation/lib/dist/src/NavigationDelegate.js
similarity index 99%
rename from node_modules/react-native-navigation/lib/dist/NavigationDelegate.js
rename to node_modules/react-native-navigation/lib/dist/src/NavigationDelegate.js
index 745e950..e4b83a9 100644
--- a/node_modules/react-native-navigation/lib/dist/NavigationDelegate.js
+++ b/node_modules/react-native-navigation/lib/dist/src/NavigationDelegate.js
@@ -6,6 +6,7 @@ const NativeCommandsSender_1 = require("./adapters/NativeCommandsSender");
 const NativeEventsReceiver_1 = require("./adapters/NativeEventsReceiver");
 const AppRegistryService_1 = require("./adapters/AppRegistryService");
 class NavigationDelegate {
+    concreteNavigation;
     constructor() {
         this.concreteNavigation = this.createConcreteNavigation(new NativeCommandsSender_1.NativeCommandsSender(), new NativeEventsReceiver_1.NativeEventsReceiver(), new AppRegistryService_1.AppRegistryService());
     }
diff --git a/node_modules/react-native-navigation/lib/dist/adapters/AppRegistryService.d.ts b/node_modules/react-native-navigation/lib/dist/src/adapters/AppRegistryService.d.ts
similarity index 100%
rename from node_modules/react-native-navigation/lib/dist/adapters/AppRegistryService.d.ts
rename to node_modules/react-native-navigation/lib/dist/src/adapters/AppRegistryService.d.ts
diff --git a/node_modules/react-native-navigation/lib/dist/adapters/AppRegistryService.js b/node_modules/react-native-navigation/lib/dist/src/adapters/AppRegistryService.js
similarity index 100%
rename from node_modules/react-native-navigation/lib/dist/adapters/AppRegistryService.js
rename to node_modules/react-native-navigation/lib/dist/src/adapters/AppRegistryService.js
diff --git a/node_modules/react-native-navigation/lib/dist/adapters/AssetResolver.d.ts b/node_modules/react-native-navigation/lib/dist/src/adapters/AssetResolver.d.ts
similarity index 100%
rename from node_modules/react-native-navigation/lib/dist/adapters/AssetResolver.d.ts
rename to node_modules/react-native-navigation/lib/dist/src/adapters/AssetResolver.d.ts
diff --git a/node_modules/react-native-navigation/lib/dist/adapters/AssetResolver.js b/node_modules/react-native-navigation/lib/dist/src/adapters/AssetResolver.js
similarity index 100%
rename from node_modules/react-native-navigation/lib/dist/adapters/AssetResolver.js
rename to node_modules/react-native-navigation/lib/dist/src/adapters/AssetResolver.js
diff --git a/node_modules/react-native-navigation/lib/dist/src/adapters/ColorService.d.ts b/node_modules/react-native-navigation/lib/dist/src/adapters/ColorService.d.ts
new file mode 100644
index 0000000..6af5467
--- /dev/null
+++ b/node_modules/react-native-navigation/lib/dist/src/adapters/ColorService.d.ts
@@ -0,0 +1,3 @@
+export declare class ColorService {
+    toNativeColor(inputColor: string): import("react-native").ProcessedColorValue | null | undefined;
+}
diff --git a/node_modules/react-native-navigation/lib/dist/adapters/ColorService.js b/node_modules/react-native-navigation/lib/dist/src/adapters/ColorService.js
similarity index 80%
rename from node_modules/react-native-navigation/lib/dist/adapters/ColorService.js
rename to node_modules/react-native-navigation/lib/dist/src/adapters/ColorService.js
index b9ebf7f..96fdc3f 100644
--- a/node_modules/react-native-navigation/lib/dist/adapters/ColorService.js
+++ b/node_modules/react-native-navigation/lib/dist/src/adapters/ColorService.js
@@ -4,7 +4,7 @@ exports.ColorService = void 0;
 const react_native_1 = require("react-native");
 class ColorService {
     toNativeColor(inputColor) {
-        return react_native_1.processColor(inputColor);
+        return (0, react_native_1.processColor)(inputColor);
     }
 }
 exports.ColorService = ColorService;
diff --git a/node_modules/react-native-navigation/lib/dist/adapters/Constants.d.ts b/node_modules/react-native-navigation/lib/dist/src/adapters/Constants.d.ts
similarity index 100%
rename from node_modules/react-native-navigation/lib/dist/adapters/Constants.d.ts
rename to node_modules/react-native-navigation/lib/dist/src/adapters/Constants.d.ts
diff --git a/node_modules/react-native-navigation/lib/dist/adapters/Constants.js b/node_modules/react-native-navigation/lib/dist/src/adapters/Constants.js
similarity index 90%
rename from node_modules/react-native-navigation/lib/dist/adapters/Constants.js
rename to node_modules/react-native-navigation/lib/dist/src/adapters/Constants.js
index dea1293..114a4c8 100644
--- a/node_modules/react-native-navigation/lib/dist/adapters/Constants.js
+++ b/node_modules/react-native-navigation/lib/dist/src/adapters/Constants.js
@@ -3,12 +3,6 @@ Object.defineProperty(exports, "__esModule", { value: true });
 exports.Constants = void 0;
 const react_native_1 = require("react-native");
 class Constants {
-    constructor(constants) {
-        this.statusBarHeight = constants.statusBarHeight;
-        this.topBarHeight = constants.topBarHeight;
-        this.backButtonId = constants.backButtonId;
-        this.bottomTabsHeight = constants.bottomTabsHeight;
-    }
     static async get() {
         const constants = await react_native_1.NativeModules.RNNBridgeModule.getNavigationConstants();
         return new Constants(constants);
@@ -16,5 +10,15 @@ class Constants {
     static getSync() {
         return new Constants(react_native_1.NativeModules.RNNBridgeModule.getNavigationConstantsSync());
     }
+    statusBarHeight;
+    backButtonId;
+    topBarHeight;
+    bottomTabsHeight;
+    constructor(constants) {
+        this.statusBarHeight = constants.statusBarHeight;
+        this.topBarHeight = constants.topBarHeight;
+        this.backButtonId = constants.backButtonId;
+        this.bottomTabsHeight = constants.bottomTabsHeight;
+    }
 }
 exports.Constants = Constants;
diff --git a/node_modules/react-native-navigation/lib/dist/adapters/NativeCommandsSender.d.ts b/node_modules/react-native-navigation/lib/dist/src/adapters/NativeCommandsSender.d.ts
similarity index 100%
rename from node_modules/react-native-navigation/lib/dist/adapters/NativeCommandsSender.d.ts
rename to node_modules/react-native-navigation/lib/dist/src/adapters/NativeCommandsSender.d.ts
diff --git a/node_modules/react-native-navigation/lib/dist/adapters/NativeCommandsSender.js b/node_modules/react-native-navigation/lib/dist/src/adapters/NativeCommandsSender.js
similarity index 98%
rename from node_modules/react-native-navigation/lib/dist/adapters/NativeCommandsSender.js
rename to node_modules/react-native-navigation/lib/dist/src/adapters/NativeCommandsSender.js
index c58050b..3ef9607 100644
--- a/node_modules/react-native-navigation/lib/dist/adapters/NativeCommandsSender.js
+++ b/node_modules/react-native-navigation/lib/dist/src/adapters/NativeCommandsSender.js
@@ -3,6 +3,7 @@ Object.defineProperty(exports, "__esModule", { value: true });
 exports.NativeCommandsSender = void 0;
 const react_native_1 = require("react-native");
 class NativeCommandsSender {
+    nativeCommandsModule;
     constructor() {
         this.nativeCommandsModule = react_native_1.NativeModules.RNNBridgeModule;
     }
diff --git a/node_modules/react-native-navigation/lib/dist/adapters/NativeEventsReceiver.d.ts b/node_modules/react-native-navigation/lib/dist/src/adapters/NativeEventsReceiver.d.ts
similarity index 100%
rename from node_modules/react-native-navigation/lib/dist/adapters/NativeEventsReceiver.d.ts
rename to node_modules/react-native-navigation/lib/dist/src/adapters/NativeEventsReceiver.d.ts
diff --git a/node_modules/react-native-navigation/lib/dist/adapters/NativeEventsReceiver.js b/node_modules/react-native-navigation/lib/dist/src/adapters/NativeEventsReceiver.js
similarity index 99%
rename from node_modules/react-native-navigation/lib/dist/adapters/NativeEventsReceiver.js
rename to node_modules/react-native-navigation/lib/dist/src/adapters/NativeEventsReceiver.js
index af2d45e..f04bcb8 100644
--- a/node_modules/react-native-navigation/lib/dist/adapters/NativeEventsReceiver.js
+++ b/node_modules/react-native-navigation/lib/dist/src/adapters/NativeEventsReceiver.js
@@ -3,6 +3,7 @@ Object.defineProperty(exports, "__esModule", { value: true });
 exports.NativeEventsReceiver = void 0;
 const react_native_1 = require("react-native");
 class NativeEventsReceiver {
+    emitter;
     constructor() {
         // NOTE: This try catch is workaround for integration tests
         // TODO: mock NativeEventEmitter in integration tests rather done adding try catch in source code
diff --git a/node_modules/react-native-navigation/lib/dist/adapters/NativeEventsReceiver.mock.d.ts b/node_modules/react-native-navigation/lib/dist/src/adapters/NativeEventsReceiver.mock.d.ts
similarity index 100%
rename from node_modules/react-native-navigation/lib/dist/adapters/NativeEventsReceiver.mock.d.ts
rename to node_modules/react-native-navigation/lib/dist/src/adapters/NativeEventsReceiver.mock.d.ts
diff --git a/node_modules/react-native-navigation/lib/dist/adapters/NativeEventsReceiver.mock.js b/node_modules/react-native-navigation/lib/dist/src/adapters/NativeEventsReceiver.mock.js
similarity index 100%
rename from node_modules/react-native-navigation/lib/dist/adapters/NativeEventsReceiver.mock.js
rename to node_modules/react-native-navigation/lib/dist/src/adapters/NativeEventsReceiver.mock.js
diff --git a/node_modules/react-native-navigation/lib/dist/adapters/TouchablePreview.d.ts b/node_modules/react-native-navigation/lib/dist/src/adapters/TouchablePreview.d.ts
similarity index 100%
rename from node_modules/react-native-navigation/lib/dist/adapters/TouchablePreview.d.ts
rename to node_modules/react-native-navigation/lib/dist/src/adapters/TouchablePreview.d.ts
diff --git a/node_modules/react-native-navigation/lib/dist/src/adapters/TouchablePreview.js b/node_modules/react-native-navigation/lib/dist/src/adapters/TouchablePreview.js
new file mode 100644
index 0000000..4e792a6
--- /dev/null
+++ b/node_modules/react-native-navigation/lib/dist/src/adapters/TouchablePreview.js
@@ -0,0 +1,89 @@
+"use strict";
+Object.defineProperty(exports, "__esModule", { value: true });
+exports.TouchablePreview = void 0;
+const tslib_1 = require("tslib");
+const React = (0, tslib_1.__importStar)(require("react"));
+const PropTypes = (0, tslib_1.__importStar)(require("prop-types"));
+const react_native_1 = require("react-native");
+const PREVIEW_DELAY = 350;
+const PREVIEW_MIN_FORCE = 0.1;
+const PREVIEW_TIMEOUT = 1250;
+class TouchablePreview extends React.PureComponent {
+    static propTypes = {
+        children: PropTypes.node,
+        touchableComponent: PropTypes.func,
+        onPress: PropTypes.func,
+        onPressIn: PropTypes.func,
+        onPeekIn: PropTypes.func,
+        onPeekOut: PropTypes.func,
+        label: PropTypes.string,
+    };
+    static defaultProps = {
+        touchableComponent: react_native_1.TouchableWithoutFeedback,
+    };
+    static peeking = false;
+    timeout;
+    touchStartedAt = 0;
+    onRef = React.createRef();
+    onPress = () => {
+        const { onPress } = this.props;
+        if (typeof onPress !== 'function' || TouchablePreview.peeking) {
+            return;
+        }
+        return onPress();
+    };
+    onPressIn = () => {
+        if (react_native_1.Platform.OS === 'ios') {
+            const { onPressIn } = this.props;
+            if (!onPressIn) {
+                return;
+            }
+            const reactTag = (0, react_native_1.findNodeHandle)(this.onRef.current);
+            return onPressIn({ reactTag });
+        }
+        // Other platforms don't support 3D Touch Preview API
+        return null;
+    };
+    onTouchStart = (event) => {
+        // Store a timestamp of the initial touch start
+        this.touchStartedAt = event.nativeEvent.timestamp;
+    };
+    onTouchMove = (event) => {
+        clearTimeout(this.timeout);
+        const { force, timestamp } = event.nativeEvent;
+        const diff = timestamp - this.touchStartedAt;
+        if (force > PREVIEW_MIN_FORCE && diff > PREVIEW_DELAY) {
+            TouchablePreview.peeking = true;
+            if (typeof this.props.onPeekIn === 'function') {
+                this.props.onPeekIn();
+            }
+        }
+        //@ts-ignore
+        this.timeout = setTimeout(this.onTouchEnd, PREVIEW_TIMEOUT);
+    };
+    onTouchEnd = () => {
+        clearTimeout(this.timeout);
+        TouchablePreview.peeking = false;
+        if (typeof this.props.onPeekOut === 'function') {
+            this.props.onPeekOut();
+        }
+    };
+    render() {
+        const { children, touchableComponent, ...props } = this.props;
+        // Default to TouchableWithoutFeedback for iOS if set to TouchableNativeFeedback
+        const Touchable = react_native_1.Platform.OS === 'ios' && touchableComponent instanceof react_native_1.TouchableNativeFeedback
+            ? react_native_1.TouchableWithoutFeedback
+            : touchableComponent;
+        // Wrap component with Touchable for handling platform touches
+        // and a single react View for detecting force and timing.
+        return (
+        /**
+         * @TODO (Jin Shin 25 June 2020)
+         * Ignoring this for now so that it builds.
+         */
+        // @ts-ignore
+        React.createElement(Touchable, { ...props, ref: this.onRef, onPress: this.onPress, onPressIn: this.onPressIn },
+            React.createElement(react_native_1.View, { onTouchStart: this.onTouchStart, onTouchMove: this.onTouchMove, onTouchEnd: this.onTouchEnd }, children)));
+    }
+}
+exports.TouchablePreview = TouchablePreview;
diff --git a/node_modules/react-native-navigation/lib/dist/adapters/UniqueIdProvider.d.ts b/node_modules/react-native-navigation/lib/dist/src/adapters/UniqueIdProvider.d.ts
similarity index 100%
rename from node_modules/react-native-navigation/lib/dist/adapters/UniqueIdProvider.d.ts
rename to node_modules/react-native-navigation/lib/dist/src/adapters/UniqueIdProvider.d.ts
diff --git a/node_modules/react-native-navigation/lib/dist/adapters/UniqueIdProvider.js b/node_modules/react-native-navigation/lib/dist/src/adapters/UniqueIdProvider.js
similarity index 66%
rename from node_modules/react-native-navigation/lib/dist/adapters/UniqueIdProvider.js
rename to node_modules/react-native-navigation/lib/dist/src/adapters/UniqueIdProvider.js
index f3b382a..a1f75a0 100644
--- a/node_modules/react-native-navigation/lib/dist/adapters/UniqueIdProvider.js
+++ b/node_modules/react-native-navigation/lib/dist/src/adapters/UniqueIdProvider.js
@@ -2,10 +2,10 @@
 Object.defineProperty(exports, "__esModule", { value: true });
 exports.UniqueIdProvider = void 0;
 const tslib_1 = require("tslib");
-const uniqueId_1 = tslib_1.__importDefault(require("lodash/uniqueId"));
+const uniqueId_1 = (0, tslib_1.__importDefault)(require("lodash/uniqueId"));
 class UniqueIdProvider {
     generate(prefix) {
-        return uniqueId_1.default(prefix);
+        return (0, uniqueId_1.default)(prefix);
     }
 }
 exports.UniqueIdProvider = UniqueIdProvider;
diff --git a/node_modules/react-native-navigation/lib/dist/commands/Commands.d.ts b/node_modules/react-native-navigation/lib/dist/src/commands/Commands.d.ts
similarity index 100%
rename from node_modules/react-native-navigation/lib/dist/commands/Commands.d.ts
rename to node_modules/react-native-navigation/lib/dist/src/commands/Commands.d.ts
diff --git a/node_modules/react-native-navigation/lib/dist/commands/Commands.js b/node_modules/react-native-navigation/lib/dist/src/commands/Commands.js
similarity index 87%
rename from node_modules/react-native-navigation/lib/dist/commands/Commands.js
rename to node_modules/react-native-navigation/lib/dist/src/commands/Commands.js
index c86ed71..586bcce 100644
--- a/node_modules/react-native-navigation/lib/dist/commands/Commands.js
+++ b/node_modules/react-native-navigation/lib/dist/src/commands/Commands.js
@@ -2,11 +2,20 @@
 Object.defineProperty(exports, "__esModule", { value: true });
 exports.Commands = void 0;
 const tslib_1 = require("tslib");
-const cloneDeepWith_1 = tslib_1.__importDefault(require("lodash/cloneDeepWith"));
-const cloneDeep_1 = tslib_1.__importDefault(require("lodash/cloneDeep"));
-const map_1 = tslib_1.__importDefault(require("lodash/map"));
+const cloneDeepWith_1 = (0, tslib_1.__importDefault)(require("lodash/cloneDeepWith"));
+const cloneDeep_1 = (0, tslib_1.__importDefault)(require("lodash/cloneDeep"));
+const map_1 = (0, tslib_1.__importDefault)(require("lodash/map"));
 const CommandName_1 = require("../interfaces/CommandName");
 class Commands {
+    store;
+    nativeCommandsSender;
+    layoutTreeParser;
+    layoutTreeCrawler;
+    commandsObserver;
+    uniqueIdProvider;
+    optionsProcessor;
+    layoutProcessor;
+    optionsCrawler;
     constructor(store, nativeCommandsSender, layoutTreeParser, layoutTreeCrawler, commandsObserver, uniqueIdProvider, optionsProcessor, layoutProcessor, optionsCrawler) {
         this.store = store;
         this.nativeCommandsSender = nativeCommandsSender;
@@ -23,12 +32,12 @@ class Commands {
         this.optionsCrawler.crawl(input.root);
         const processedRoot = this.layoutProcessor.process(input.root, CommandName_1.CommandName.SetRoot);
         const root = this.layoutTreeParser.parse(processedRoot);
-        const modals = map_1.default(input.modals, (modal) => {
+        const modals = (0, map_1.default)(input.modals, (modal) => {
             this.optionsCrawler.crawl(modal);
             const processedModal = this.layoutProcessor.process(modal, CommandName_1.CommandName.SetRoot);
             return this.layoutTreeParser.parse(processedModal);
         });
-        const overlays = map_1.default(input.overlays, (overlay) => {
+        const overlays = (0, map_1.default)(input.overlays, (overlay) => {
             this.optionsCrawler.crawl(overlay);
             const processedOverlay = this.layoutProcessor.process(overlay, CommandName_1.CommandName.SetRoot);
             return this.layoutTreeParser.parse(processedOverlay);
@@ -49,14 +58,14 @@ class Commands {
         return result;
     }
     setDefaultOptions(options) {
-        const input = cloneDeep_1.default(options);
+        const input = (0, cloneDeep_1.default)(options);
         this.optionsProcessor.processDefaultOptions(input, CommandName_1.CommandName.SetDefaultOptions);
         this.nativeCommandsSender.setDefaultOptions(input);
         this.commandsObserver.notify(CommandName_1.CommandName.SetDefaultOptions, { options });
     }
     mergeOptions(componentId, options) {
-        const input = cloneDeep_1.default(options);
-        this.optionsProcessor.processOptions(input, CommandName_1.CommandName.MergeOptions);
+        const input = (0, cloneDeep_1.default)(options);
+        this.optionsProcessor.processOptions(CommandName_1.CommandName.MergeOptions, input);
         const component = this.store.getComponentInstance(componentId);
         if (component && !component.isMounted)
             console.warn(`Navigation.mergeOptions was invoked on component with id: ${componentId} before it is mounted, this can cause UI issues and should be avoided.\n Use static options instead.`);
@@ -80,6 +89,7 @@ class Commands {
     }
     dismissModal(componentId, mergeOptions) {
         const commandId = this.uniqueIdProvider.generate(CommandName_1.CommandName.DismissModal);
+        this.optionsProcessor.processOptions(CommandName_1.CommandName.DismissModal, mergeOptions);
         const result = this.nativeCommandsSender.dismissModal(commandId, componentId, mergeOptions);
         this.commandsObserver.notify(CommandName_1.CommandName.DismissModal, {
             commandId,
@@ -90,6 +100,7 @@ class Commands {
     }
     dismissAllModals(mergeOptions) {
         const commandId = this.uniqueIdProvider.generate(CommandName_1.CommandName.DismissAllModals);
+        this.optionsProcessor.processOptions(CommandName_1.CommandName.DismissAllModals, mergeOptions);
         const result = this.nativeCommandsSender.dismissAllModals(commandId, mergeOptions);
         this.commandsObserver.notify(CommandName_1.CommandName.DismissAllModals, { commandId, mergeOptions });
         return result;
@@ -107,24 +118,27 @@ class Commands {
     }
     pop(componentId, mergeOptions) {
         const commandId = this.uniqueIdProvider.generate(CommandName_1.CommandName.Pop);
+        this.optionsProcessor.processOptions(CommandName_1.CommandName.Pop, mergeOptions);
         const result = this.nativeCommandsSender.pop(commandId, componentId, mergeOptions);
         this.commandsObserver.notify(CommandName_1.CommandName.Pop, { commandId, componentId, mergeOptions });
         return result;
     }
     popTo(componentId, mergeOptions) {
         const commandId = this.uniqueIdProvider.generate(CommandName_1.CommandName.PopTo);
+        this.optionsProcessor.processOptions(CommandName_1.CommandName.PopTo, mergeOptions);
         const result = this.nativeCommandsSender.popTo(commandId, componentId, mergeOptions);
         this.commandsObserver.notify(CommandName_1.CommandName.PopTo, { commandId, componentId, mergeOptions });
         return result;
     }
     popToRoot(componentId, mergeOptions) {
         const commandId = this.uniqueIdProvider.generate(CommandName_1.CommandName.PopToRoot);
+        this.optionsProcessor.processOptions(CommandName_1.CommandName.PopToRoot, mergeOptions);
         const result = this.nativeCommandsSender.popToRoot(commandId, componentId, mergeOptions);
         this.commandsObserver.notify(CommandName_1.CommandName.PopToRoot, { commandId, componentId, mergeOptions });
         return result;
     }
     setStackRoot(componentId, children) {
-        const input = map_1.default(cloneLayout(children), (simpleApi) => {
+        const input = (0, map_1.default)(cloneLayout(children), (simpleApi) => {
             this.optionsCrawler.crawl(simpleApi);
             const layoutProcessed = this.layoutProcessor.process(simpleApi, CommandName_1.CommandName.SetStackRoot);
             const layout = this.layoutTreeParser.parse(layoutProcessed);
@@ -174,7 +188,7 @@ class Commands {
 }
 exports.Commands = Commands;
 function cloneLayout(layout) {
-    return cloneDeepWith_1.default(layout, (value, key) => {
+    return (0, cloneDeepWith_1.default)(layout, (value, key) => {
         if (key === 'passProps' && typeof value === 'object' && value !== null)
             return { ...value };
     });
diff --git a/node_modules/react-native-navigation/lib/dist/commands/Deprecations.d.ts b/node_modules/react-native-navigation/lib/dist/src/commands/Deprecations.d.ts
similarity index 100%
rename from node_modules/react-native-navigation/lib/dist/commands/Deprecations.d.ts
rename to node_modules/react-native-navigation/lib/dist/src/commands/Deprecations.d.ts
diff --git a/node_modules/react-native-navigation/lib/dist/src/commands/Deprecations.js b/node_modules/react-native-navigation/lib/dist/src/commands/Deprecations.js
new file mode 100644
index 0000000..8f5d617
--- /dev/null
+++ b/node_modules/react-native-navigation/lib/dist/src/commands/Deprecations.js
@@ -0,0 +1,80 @@
+"use strict";
+Object.defineProperty(exports, "__esModule", { value: true });
+exports.Deprecations = void 0;
+const tslib_1 = require("tslib");
+const once_1 = (0, tslib_1.__importDefault)(require("lodash/once"));
+const get_1 = (0, tslib_1.__importDefault)(require("lodash/get"));
+const each_1 = (0, tslib_1.__importDefault)(require("lodash/each"));
+const react_native_1 = require("react-native");
+class Deprecations {
+    deprecatedOptions = [
+        {
+            key: 'topBar.searchBarHiddenWhenScrolling',
+            showWarning: (0, once_1.default)((_key, parentOptions) => {
+                console.warn(`${_key} is deprecated and will be removed in the next major version. For more information see https://github.com/wix/react-native-navigation/issues/6585`, parentOptions);
+            }),
+        },
+        {
+            key: 'topBar.searchBarPlaceholder',
+            showWarning: (0, once_1.default)((_key, parentOptions) => {
+                console.warn(`${_key} is deprecated and will be removed in the next major version. For more information see https://github.com/wix/react-native-navigation/issues/6585`, parentOptions);
+            }),
+        },
+        {
+            key: 'topBar.searchBarBackgroundColor',
+            showWarning: (0, once_1.default)((_key, parentOptions) => {
+                console.warn(`${_key} is deprecated and will be removed in the next major version. For more information see https://github.com/wix/react-native-navigation/issues/6585`, parentOptions);
+            }),
+        },
+        {
+            key: 'topBar.searchBarTintColor',
+            showWarning: (0, once_1.default)((_key, parentOptions) => {
+                console.warn(`${_key} is deprecated and will be removed in the next major version. For more information see https://github.com/wix/react-native-navigation/issues/6585`, parentOptions);
+            }),
+        },
+        {
+            key: 'topBar.hideNavBarOnFocusSearchBar',
+            showWarning: (0, once_1.default)((_key, parentOptions) => {
+                console.warn(`${_key} is deprecated and will be removed in the next major version. For more information see https://github.com/wix/react-native-navigation/issues/6585`, parentOptions);
+            }),
+        },
+    ];
+    checkForDeprecatedOptions(options) {
+        (0, each_1.default)(this.deprecatedOptions, (option) => {
+            if ((0, get_1.default)(options, option.key, null)) {
+                option.showWarning(option.key, options);
+            }
+        });
+    }
+    onProcessOptions(key, parentOptions, commandName) {
+        if (key === 'bottomTabs' &&
+            parentOptions[key]?.visible !== undefined &&
+            react_native_1.Platform.OS === 'ios' &&
+            commandName === 'mergeOptions') {
+            this.deprecateBottomTabsVisibility(parentOptions);
+        }
+        if (key === 'searchBar' && react_native_1.Platform.OS === 'ios' && typeof parentOptions[key] === 'boolean') {
+            this.deprecateSearchBarOptions(parentOptions);
+        }
+        if (key === 'interpolation' && typeof parentOptions[key] === 'string') {
+            this.deprecateInterpolationOptions(parentOptions);
+        }
+        if (key === 'showModal' || key === 'dismissModal') {
+            if (typeof parentOptions[key] === 'object' &&
+                !('enter' in parentOptions[key]) &&
+                !('exit' in parentOptions[key]))
+                console.warn(`${key} without enter/exit is deprecated, and will be changed  in the next major version. For more information see https://wix.github.io/react-native-navigation/docs/style-animations#modal-animations`, parentOptions);
+        }
+    }
+    onProcessDefaultOptions(_key, _parentOptions) { }
+    deprecateSearchBarOptions = (0, once_1.default)((parentOptions) => {
+        console.warn(`toggling searchBar visibility using a boolean value will be removed in the next major version. For more information see https://github.com/wix/react-native-navigation/issues/6585`, parentOptions);
+    });
+    deprecateInterpolationOptions = (0, once_1.default)((parentOptions) => {
+        console.warn(`Using Interpolation types as strings has been deprecated and will be removed in the next major version. For more information see https://github.com/wix/react-native-navigation/pull/6644`, parentOptions);
+    });
+    deprecateBottomTabsVisibility = (0, once_1.default)((parentOptions) => {
+        console.warn(`toggling bottomTabs visibility is deprecated on iOS. For more information see https://github.com/wix/react-native-navigation/issues/6416`, parentOptions);
+    });
+}
+exports.Deprecations = Deprecations;
diff --git a/node_modules/react-native-navigation/lib/dist/commands/LayoutTreeCrawler.d.ts b/node_modules/react-native-navigation/lib/dist/src/commands/LayoutTreeCrawler.d.ts
similarity index 100%
rename from node_modules/react-native-navigation/lib/dist/commands/LayoutTreeCrawler.d.ts
rename to node_modules/react-native-navigation/lib/dist/src/commands/LayoutTreeCrawler.d.ts
diff --git a/node_modules/react-native-navigation/lib/dist/commands/LayoutTreeCrawler.js b/node_modules/react-native-navigation/lib/dist/src/commands/LayoutTreeCrawler.js
similarity index 84%
rename from node_modules/react-native-navigation/lib/dist/commands/LayoutTreeCrawler.js
rename to node_modules/react-native-navigation/lib/dist/src/commands/LayoutTreeCrawler.js
index e1a37b4..efcd996 100644
--- a/node_modules/react-native-navigation/lib/dist/commands/LayoutTreeCrawler.js
+++ b/node_modules/react-native-navigation/lib/dist/src/commands/LayoutTreeCrawler.js
@@ -3,6 +3,8 @@ Object.defineProperty(exports, "__esModule", { value: true });
 exports.LayoutTreeCrawler = void 0;
 const LayoutType_1 = require("./LayoutType");
 class LayoutTreeCrawler {
+    store;
+    optionsProcessor;
     constructor(store, optionsProcessor) {
         this.store = store;
         this.optionsProcessor = optionsProcessor;
@@ -12,7 +14,7 @@ class LayoutTreeCrawler {
         if (node.type === LayoutType_1.LayoutType.Component) {
             this.handleComponent(node);
         }
-        this.optionsProcessor.processOptions(node.data.options, commandName);
+        this.optionsProcessor.processOptions(commandName, node.data.options);
         node.children.forEach((value) => this.crawl(value, commandName));
     }
     handleComponent(node) {
@@ -21,7 +23,7 @@ class LayoutTreeCrawler {
         node.data.passProps = undefined;
     }
     savePropsToStore(node) {
-        this.store.updateProps(node.id, node.data.passProps);
+        this.store.setPendingProps(node.id, node.data.passProps);
     }
     assertComponentDataName(component) {
         if (!component.data.name) {
diff --git a/node_modules/react-native-navigation/lib/dist/commands/LayoutTreeParser.d.ts b/node_modules/react-native-navigation/lib/dist/src/commands/LayoutTreeParser.d.ts
similarity index 100%
rename from node_modules/react-native-navigation/lib/dist/commands/LayoutTreeParser.d.ts
rename to node_modules/react-native-navigation/lib/dist/src/commands/LayoutTreeParser.d.ts
diff --git a/node_modules/react-native-navigation/lib/dist/commands/LayoutTreeParser.js b/node_modules/react-native-navigation/lib/dist/src/commands/LayoutTreeParser.js
similarity index 99%
rename from node_modules/react-native-navigation/lib/dist/commands/LayoutTreeParser.js
rename to node_modules/react-native-navigation/lib/dist/src/commands/LayoutTreeParser.js
index 7c141a3..ed11128 100644
--- a/node_modules/react-native-navigation/lib/dist/commands/LayoutTreeParser.js
+++ b/node_modules/react-native-navigation/lib/dist/src/commands/LayoutTreeParser.js
@@ -3,6 +3,7 @@ Object.defineProperty(exports, "__esModule", { value: true });
 exports.LayoutTreeParser = void 0;
 const LayoutType_1 = require("./LayoutType");
 class LayoutTreeParser {
+    uniqueIdProvider;
     constructor(uniqueIdProvider) {
         this.uniqueIdProvider = uniqueIdProvider;
         this.parse = this.parse.bind(this);
diff --git a/node_modules/react-native-navigation/lib/dist/commands/LayoutType.d.ts b/node_modules/react-native-navigation/lib/dist/src/commands/LayoutType.d.ts
similarity index 100%
rename from node_modules/react-native-navigation/lib/dist/commands/LayoutType.d.ts
rename to node_modules/react-native-navigation/lib/dist/src/commands/LayoutType.d.ts
diff --git a/node_modules/react-native-navigation/lib/dist/commands/LayoutType.js b/node_modules/react-native-navigation/lib/dist/src/commands/LayoutType.js
similarity index 100%
rename from node_modules/react-native-navigation/lib/dist/commands/LayoutType.js
rename to node_modules/react-native-navigation/lib/dist/src/commands/LayoutType.js
diff --git a/node_modules/react-native-navigation/lib/dist/commands/OptionsCrawler.d.ts b/node_modules/react-native-navigation/lib/dist/src/commands/OptionsCrawler.d.ts
similarity index 100%
rename from node_modules/react-native-navigation/lib/dist/commands/OptionsCrawler.d.ts
rename to node_modules/react-native-navigation/lib/dist/src/commands/OptionsCrawler.d.ts
diff --git a/node_modules/react-native-navigation/lib/dist/commands/OptionsCrawler.js b/node_modules/react-native-navigation/lib/dist/src/commands/OptionsCrawler.js
similarity index 87%
rename from node_modules/react-native-navigation/lib/dist/commands/OptionsCrawler.js
rename to node_modules/react-native-navigation/lib/dist/src/commands/OptionsCrawler.js
index 9a65cf7..b5cc127 100644
--- a/node_modules/react-native-navigation/lib/dist/commands/OptionsCrawler.js
+++ b/node_modules/react-native-navigation/lib/dist/src/commands/OptionsCrawler.js
@@ -2,10 +2,12 @@
 Object.defineProperty(exports, "__esModule", { value: true });
 exports.OptionsCrawler = void 0;
 const tslib_1 = require("tslib");
-const merge_1 = tslib_1.__importDefault(require("lodash/merge"));
-const isFunction_1 = tslib_1.__importDefault(require("lodash/isFunction"));
+const merge_1 = (0, tslib_1.__importDefault)(require("lodash/merge"));
+const isFunction_1 = (0, tslib_1.__importDefault)(require("lodash/isFunction"));
 const LayoutType_1 = require("./LayoutType");
 class OptionsCrawler {
+    store;
+    uniqueIdProvider;
     constructor(store, uniqueIdProvider) {
         this.store = store;
         this.uniqueIdProvider = uniqueIdProvider;
@@ -63,13 +65,13 @@ class OptionsCrawler {
     }
     applyStaticOptions(layout) {
         const staticOptions = this.staticOptionsIfPossible(layout);
-        layout.options = merge_1.default({}, staticOptions, layout.options);
+        layout.options = (0, merge_1.default)({}, staticOptions, layout.options);
     }
     staticOptionsIfPossible(layout) {
         const foundReactGenerator = this.store.getComponentClassForName(layout.name);
         const reactComponent = foundReactGenerator ? foundReactGenerator() : undefined;
         if (reactComponent && this.isComponentWithOptions(reactComponent)) {
-            return isFunction_1.default(reactComponent.options)
+            return (0, isFunction_1.default)(reactComponent.options)
                 ? reactComponent.options({ componentId: layout.id, ...layout.passProps } || {})
                 : reactComponent.options;
         }
diff --git a/node_modules/react-native-navigation/lib/dist/commands/OptionsProcessor.d.ts b/node_modules/react-native-navigation/lib/dist/src/commands/OptionsProcessor.d.ts
similarity index 95%
rename from node_modules/react-native-navigation/lib/dist/commands/OptionsProcessor.d.ts
rename to node_modules/react-native-navigation/lib/dist/src/commands/OptionsProcessor.d.ts
index f3000d4..bac82ee 100644
--- a/node_modules/react-native-navigation/lib/dist/commands/OptionsProcessor.d.ts
+++ b/node_modules/react-native-navigation/lib/dist/src/commands/OptionsProcessor.d.ts
@@ -14,7 +14,7 @@ export declare class OptionsProcessor {
     private assetService;
     private deprecations;
     constructor(store: Store, uniqueIdProvider: UniqueIdProvider, optionProcessorsRegistry: OptionProcessorsStore, colorService: ColorService, assetService: AssetService, deprecations: Deprecations);
-    processOptions(options: Options, commandName: CommandName, props?: any): void;
+    processOptions(commandName: CommandName, options?: Options, props?: any): void;
     processDefaultOptions(options: Options, commandName: CommandName): void;
     private processObject;
     private resolveObjectPath;
diff --git a/node_modules/react-native-navigation/lib/dist/commands/OptionsProcessor.js b/node_modules/react-native-navigation/lib/dist/src/commands/OptionsProcessor.js
similarity index 74%
rename from node_modules/react-native-navigation/lib/dist/commands/OptionsProcessor.js
rename to node_modules/react-native-navigation/lib/dist/src/commands/OptionsProcessor.js
index 0963cca..1360628 100644
--- a/node_modules/react-native-navigation/lib/dist/commands/OptionsProcessor.js
+++ b/node_modules/react-native-navigation/lib/dist/src/commands/OptionsProcessor.js
@@ -2,16 +2,22 @@
 Object.defineProperty(exports, "__esModule", { value: true });
 exports.OptionsProcessor = void 0;
 const tslib_1 = require("tslib");
-const clone_1 = tslib_1.__importDefault(require("lodash/clone"));
-const isEqual_1 = tslib_1.__importDefault(require("lodash/isEqual"));
-const isObject_1 = tslib_1.__importDefault(require("lodash/isObject"));
-const isArray_1 = tslib_1.__importDefault(require("lodash/isArray"));
-const isString_1 = tslib_1.__importDefault(require("lodash/isString"));
-const endsWith_1 = tslib_1.__importDefault(require("lodash/endsWith"));
-const forEach_1 = tslib_1.__importDefault(require("lodash/forEach"));
-const has_1 = tslib_1.__importDefault(require("lodash/has"));
+const clone_1 = (0, tslib_1.__importDefault)(require("lodash/clone"));
+const isEqual_1 = (0, tslib_1.__importDefault)(require("lodash/isEqual"));
+const isObject_1 = (0, tslib_1.__importDefault)(require("lodash/isObject"));
+const isArray_1 = (0, tslib_1.__importDefault)(require("lodash/isArray"));
+const isString_1 = (0, tslib_1.__importDefault)(require("lodash/isString"));
+const endsWith_1 = (0, tslib_1.__importDefault)(require("lodash/endsWith"));
+const forEach_1 = (0, tslib_1.__importDefault)(require("lodash/forEach"));
+const has_1 = (0, tslib_1.__importDefault)(require("lodash/has"));
 const react_native_1 = require("react-native");
 class OptionsProcessor {
+    store;
+    uniqueIdProvider;
+    optionProcessorsRegistry;
+    colorService;
+    assetService;
+    deprecations;
     constructor(store, uniqueIdProvider, optionProcessorsRegistry, colorService, assetService, deprecations) {
         this.store = store;
         this.uniqueIdProvider = uniqueIdProvider;
@@ -20,19 +26,21 @@ class OptionsProcessor {
         this.assetService = assetService;
         this.deprecations = deprecations;
     }
-    processOptions(options, commandName, props) {
-        this.processObject(options, clone_1.default(options), (key, parentOptions) => {
-            this.deprecations.onProcessOptions(key, parentOptions, commandName);
-            this.deprecations.checkForDeprecatedOptions(parentOptions);
-        }, commandName, props);
+    processOptions(commandName, options, props) {
+        if (options) {
+            this.processObject(options, (0, clone_1.default)(options), (key, parentOptions) => {
+                this.deprecations.onProcessOptions(key, parentOptions, commandName);
+                this.deprecations.checkForDeprecatedOptions(parentOptions);
+            }, commandName, props);
+        }
     }
     processDefaultOptions(options, commandName) {
-        this.processObject(options, clone_1.default(options), (key, parentOptions) => {
+        this.processObject(options, (0, clone_1.default)(options), (key, parentOptions) => {
             this.deprecations.onProcessDefaultOptions(key, parentOptions);
         }, commandName);
     }
     processObject(objectToProcess, parentOptions, onProcess, commandName, props, parentPath) {
-        forEach_1.default(objectToProcess, (value, key) => {
+        (0, forEach_1.default)(objectToProcess, (value, key) => {
             const objectPath = this.resolveObjectPath(key, parentPath);
             this.processWithRegisteredProcessor(key, value, objectToProcess, objectPath, commandName, props);
             this.processColor(key, value, objectToProcess);
@@ -47,7 +55,7 @@ class OptionsProcessor {
             this.processAnimation(key, value, objectToProcess);
             onProcess(key, parentOptions);
             const processedValue = objectToProcess[key];
-            if (!isEqual_1.default(key, 'passProps') && (isObject_1.default(processedValue) || isArray_1.default(processedValue))) {
+            if (!(0, isEqual_1.default)(key, 'passProps') && ((0, isObject_1.default)(processedValue) || (0, isArray_1.default)(processedValue))) {
                 this.processObject(processedValue, parentOptions, onProcess, commandName, props, objectPath);
             }
         });
@@ -60,7 +68,7 @@ class OptionsProcessor {
         return path;
     }
     processColor(key, value, options) {
-        if (isEqual_1.default(key, 'color') || endsWith_1.default(key, 'Color')) {
+        if ((0, isEqual_1.default)(key, 'color') || (0, endsWith_1.default)(key, 'Color')) {
             if (react_native_1.Platform.OS === 'ios')
                 this.processColorIOS(key, value, options);
             else
@@ -77,13 +85,13 @@ class OptionsProcessor {
                     options[key] = value;
                 }
                 else if ('dynamic' in value) {
-                    options[key] = react_native_1.DynamicColorIOS({
+                    options[key] = (0, react_native_1.DynamicColorIOS)({
                         light: this.colorService.toNativeColor(value.dynamic.light),
                         dark: this.colorService.toNativeColor(value.dynamic.dark),
                     });
                 }
                 else {
-                    options[key] = react_native_1.DynamicColorIOS({
+                    options[key] = (0, react_native_1.DynamicColorIOS)({
                         light: this.colorService.toNativeColor(value.light),
                         dark: this.colorService.toNativeColor(value.dark),
                     });
@@ -129,29 +137,29 @@ class OptionsProcessor {
         }
     }
     processImage(key, value, options) {
-        if (isEqual_1.default(key, 'icon') ||
-            isEqual_1.default(key, 'image') ||
-            endsWith_1.default(key, 'Icon') ||
-            endsWith_1.default(key, 'Image')) {
-            options[key] = isString_1.default(value) ? value : this.assetService.resolveFromRequire(value);
+        if ((0, isEqual_1.default)(key, 'icon') ||
+            (0, isEqual_1.default)(key, 'image') ||
+            (0, endsWith_1.default)(key, 'Icon') ||
+            (0, endsWith_1.default)(key, 'Image')) {
+            options[key] = (0, isString_1.default)(value) ? value : this.assetService.resolveFromRequire(value);
         }
     }
     processButtonsPassProps(key, value) {
-        if (endsWith_1.default(key, 'Buttons')) {
-            forEach_1.default(value, (button) => {
+        if ((0, endsWith_1.default)(key, 'Buttons')) {
+            (0, forEach_1.default)(value, (button) => {
                 if (button.passProps && button.id) {
-                    this.store.updateProps(button.id, button.passProps);
+                    this.store.setPendingProps(button.id, button.passProps);
                     button.passProps = undefined;
                 }
             });
         }
     }
     processComponent(key, value, options) {
-        if (isEqual_1.default(key, 'component')) {
+        if ((0, isEqual_1.default)(key, 'component')) {
             value.componentId = value.id ? value.id : this.uniqueIdProvider.generate('CustomComponent');
             this.store.ensureClassForName(value.name);
             if (value.passProps) {
-                this.store.updateProps(value.componentId, value.passProps);
+                this.store.setPendingProps(value.componentId, value.passProps);
             }
             options[key].passProps = undefined;
         }
@@ -185,7 +193,7 @@ class OptionsProcessor {
         }
     }
     processInterpolation(key, value, options) {
-        if (isEqual_1.default(key, 'interpolation')) {
+        if ((0, isEqual_1.default)(key, 'interpolation')) {
             if (typeof value === 'string') {
                 this.deprecations.onProcessOptions(key, options, '');
                 options[key] = {
@@ -210,19 +218,19 @@ class OptionsProcessor {
         this.convertDeprecatedViewAnimationApiToNewStackAnimationApi(animation, parentOptions);
     }
     isNewStackAnimationApi(animation) {
-        return has_1.default(animation, 'content') || has_1.default(animation, 'topBar') || has_1.default(animation, 'bottomTabs');
+        return (0, has_1.default)(animation, 'content') || (0, has_1.default)(animation, 'topBar') || (0, has_1.default)(animation, 'bottomTabs');
     }
     convertDeprecatedViewAnimationApiToNewStackAnimationApi(animation, parentOptions) {
-        if (!has_1.default(animation, 'content.enter') && !has_1.default(animation, 'content.exit')) {
+        if (!(0, has_1.default)(animation, 'content.enter') && !(0, has_1.default)(animation, 'content.exit')) {
             parentOptions.setStackRoot = {
                 content: {
                     enter: animation,
                 },
             };
-            if (has_1.default(animation, 'enabled')) {
+            if ((0, has_1.default)(animation, 'enabled')) {
                 parentOptions.setStackRoot.enabled = animation.enabled;
             }
-            if (has_1.default(animation, 'waitForRender')) {
+            if ((0, has_1.default)(animation, 'waitForRender')) {
                 parentOptions.setStackRoot.waitForRender = animation.waitForRender;
             }
         }
@@ -230,19 +238,19 @@ class OptionsProcessor {
     processPop(key, animation, parentOptions) {
         if (key !== 'pop')
             return;
-        if (animation.content && !has_1.default(animation, 'content.enter') && !has_1.default(animation, 'content.exit')) {
+        if (animation.content && !(0, has_1.default)(animation, 'content.enter') && !(0, has_1.default)(animation, 'content.exit')) {
             parentOptions.pop.content = {
                 exit: animation.content,
             };
         }
-        if (animation.topBar && !has_1.default(animation, 'topBar.enter') && !has_1.default(animation, 'topBar.exit')) {
+        if (animation.topBar && !(0, has_1.default)(animation, 'topBar.enter') && !(0, has_1.default)(animation, 'topBar.exit')) {
             parentOptions.pop.topBar = {
                 exit: animation.topBar,
             };
         }
         if (animation.bottomTabs &&
-            !has_1.default(animation, 'bottomTabs.enter') &&
-            !has_1.default(animation, 'bottomTabs.exit')) {
+            !(0, has_1.default)(animation, 'bottomTabs.enter') &&
+            !(0, has_1.default)(animation, 'bottomTabs.exit')) {
             parentOptions.pop.bottomTabs = {
                 exit: animation.bottomTabs,
             };
@@ -295,19 +303,19 @@ class OptionsProcessor {
     processPush(key, animation, parentOptions) {
         if (key !== 'push')
             return;
-        if (animation.content && !has_1.default(animation, 'content.enter') && !has_1.default(animation, 'content.exit')) {
+        if (animation.content && !(0, has_1.default)(animation, 'content.enter') && !(0, has_1.default)(animation, 'content.exit')) {
             parentOptions.push.content = {
                 enter: animation.content,
             };
         }
-        if (animation.topBar && !has_1.default(animation, 'topBar.enter') && !has_1.default(animation, 'topBar.exit')) {
+        if (animation.topBar && !(0, has_1.default)(animation, 'topBar.enter') && !(0, has_1.default)(animation, 'topBar.exit')) {
             parentOptions.push.topBar = {
                 enter: animation.topBar,
             };
         }
         if (animation.bottomTabs &&
-            !has_1.default(animation, 'bottomTabs.enter') &&
-            !has_1.default(animation, 'bottomTabs.exit')) {
+            !(0, has_1.default)(animation, 'bottomTabs.enter') &&
+            !(0, has_1.default)(animation, 'bottomTabs.exit')) {
             parentOptions.push.bottomTabs = {
                 enter: animation.bottomTabs,
             };
diff --git a/node_modules/react-native-navigation/lib/dist/components/ComponentRegistry.d.ts b/node_modules/react-native-navigation/lib/dist/src/components/ComponentRegistry.d.ts
similarity index 100%
rename from node_modules/react-native-navigation/lib/dist/components/ComponentRegistry.d.ts
rename to node_modules/react-native-navigation/lib/dist/src/components/ComponentRegistry.d.ts
diff --git a/node_modules/react-native-navigation/lib/dist/components/ComponentRegistry.js b/node_modules/react-native-navigation/lib/dist/src/components/ComponentRegistry.js
similarity index 94%
rename from node_modules/react-native-navigation/lib/dist/components/ComponentRegistry.js
rename to node_modules/react-native-navigation/lib/dist/src/components/ComponentRegistry.js
index 7cf4cba..ea508b0 100644
--- a/node_modules/react-native-navigation/lib/dist/components/ComponentRegistry.js
+++ b/node_modules/react-native-navigation/lib/dist/src/components/ComponentRegistry.js
@@ -2,6 +2,10 @@
 Object.defineProperty(exports, "__esModule", { value: true });
 exports.ComponentRegistry = void 0;
 class ComponentRegistry {
+    store;
+    componentEventsObserver;
+    componentWrapper;
+    appRegistryService;
     constructor(store, componentEventsObserver, componentWrapper, appRegistryService) {
         this.store = store;
         this.componentEventsObserver = componentEventsObserver;
diff --git a/node_modules/react-native-navigation/lib/dist/components/ComponentWrapper.d.ts b/node_modules/react-native-navigation/lib/dist/src/components/ComponentWrapper.d.ts
similarity index 100%
rename from node_modules/react-native-navigation/lib/dist/components/ComponentWrapper.d.ts
rename to node_modules/react-native-navigation/lib/dist/src/components/ComponentWrapper.d.ts
diff --git a/node_modules/react-native-navigation/lib/dist/components/ComponentWrapper.js b/node_modules/react-native-navigation/lib/dist/src/components/ComponentWrapper.js
similarity index 81%
rename from node_modules/react-native-navigation/lib/dist/components/ComponentWrapper.js
rename to node_modules/react-native-navigation/lib/dist/src/components/ComponentWrapper.js
index ba52f5f..0d8c93a 100644
--- a/node_modules/react-native-navigation/lib/dist/components/ComponentWrapper.js
+++ b/node_modules/react-native-navigation/lib/dist/src/components/ComponentWrapper.js
@@ -2,23 +2,13 @@
 Object.defineProperty(exports, "__esModule", { value: true });
 exports.ComponentWrapper = void 0;
 const tslib_1 = require("tslib");
-const React = tslib_1.__importStar(require("react"));
+const React = (0, tslib_1.__importStar)(require("react"));
 const react_lifecycles_compat_1 = require("react-lifecycles-compat");
-const hoist_non_react_statics_1 = tslib_1.__importDefault(require("hoist-non-react-statics"));
+const hoist_non_react_statics_1 = (0, tslib_1.__importDefault)(require("hoist-non-react-statics"));
 class ComponentWrapper {
     wrap(componentName, OriginalComponentGenerator, store, componentEventsObserver, concreteComponentProvider = OriginalComponentGenerator, ReduxProvider, reduxStore) {
         const GeneratedComponentClass = OriginalComponentGenerator();
         class WrappedComponent extends React.Component {
-            constructor(props) {
-                super(props);
-                this._isMounted = false;
-                this._assertComponentId();
-                this.state = {
-                    componentId: props.componentId,
-                    allProps: {},
-                };
-                store.setComponentInstance(props.componentId, this);
-            }
             static getDerivedStateFromProps(nextProps, prevState) {
                 return {
                     allProps: {
@@ -27,9 +17,19 @@ class ComponentWrapper {
                     },
                 };
             }
+            _isMounted = false;
             get isMounted() {
                 return this._isMounted;
             }
+            constructor(props) {
+                super(props);
+                this._assertComponentId();
+                this.state = {
+                    componentId: props.componentId,
+                    allProps: {},
+                };
+                store.setComponentInstance(props.componentId, this);
+            }
             setProps(newProps, callback) {
                 this.setState((prevState) => ({
                     allProps: {
@@ -46,7 +46,7 @@ class ComponentWrapper {
                 componentEventsObserver.unmounted(this.state.componentId);
             }
             render() {
-                return (React.createElement(GeneratedComponentClass, Object.assign({}, this.state.allProps, { componentId: this.state.componentId })));
+                return (React.createElement(GeneratedComponentClass, { ...this.state.allProps, componentId: this.state.componentId }));
             }
             _assertComponentId() {
                 if (!this.props.componentId) {
@@ -54,8 +54,8 @@ class ComponentWrapper {
                 }
             }
         }
-        react_lifecycles_compat_1.polyfill(WrappedComponent);
-        hoist_non_react_statics_1.default(WrappedComponent, concreteComponentProvider === OriginalComponentGenerator
+        (0, react_lifecycles_compat_1.polyfill)(WrappedComponent);
+        (0, hoist_non_react_statics_1.default)(WrappedComponent, concreteComponentProvider === OriginalComponentGenerator
             ? GeneratedComponentClass
             : concreteComponentProvider());
         return ReduxProvider
@@ -66,10 +66,10 @@ class ComponentWrapper {
         class ReduxWrapper extends React.Component {
             render() {
                 return (React.createElement(ReduxProvider, { store: reduxStore },
-                    React.createElement(WrappedComponent, Object.assign({}, this.props))));
+                    React.createElement(WrappedComponent, { ...this.props })));
             }
         }
-        hoist_non_react_statics_1.default(ReduxWrapper, WrappedComponent);
+        (0, hoist_non_react_statics_1.default)(ReduxWrapper, WrappedComponent);
         return ReduxWrapper;
     }
 }
diff --git a/node_modules/react-native-navigation/lib/dist/components/Modal.d.ts b/node_modules/react-native-navigation/lib/dist/src/components/Modal.d.ts
similarity index 100%
rename from node_modules/react-native-navigation/lib/dist/components/Modal.d.ts
rename to node_modules/react-native-navigation/lib/dist/src/components/Modal.d.ts
diff --git a/node_modules/react-native-navigation/lib/dist/components/Modal.js b/node_modules/react-native-navigation/lib/dist/src/components/Modal.js
similarity index 88%
rename from node_modules/react-native-navigation/lib/dist/components/Modal.js
rename to node_modules/react-native-navigation/lib/dist/src/components/Modal.js
index f031f81..7296bfd 100644
--- a/node_modules/react-native-navigation/lib/dist/components/Modal.js
+++ b/node_modules/react-native-navigation/lib/dist/src/components/Modal.js
@@ -2,17 +2,22 @@
 Object.defineProperty(exports, "__esModule", { value: true });
 exports.Modal = void 0;
 const tslib_1 = require("tslib");
-const react_1 = tslib_1.__importDefault(require("react"));
+const react_1 = (0, tslib_1.__importDefault)(require("react"));
 const react_native_1 = require("react-native");
-const RNNModalViewManager = react_native_1.requireNativeComponent('RNNModalViewManager');
+const RNNModalViewManager = (0, react_native_1.requireNativeComponent)('RNNModalViewManager');
 class Modal extends react_1.default.Component {
+    static defaultProps = {
+        transparent: false,
+        blurOnUnmount: false,
+        animationType: 'slide',
+    };
     constructor(props) {
         super(props);
     }
     render() {
         const processed = this.proccessProps();
         if (this.props.visible) {
-            return (react_1.default.createElement(RNNModalViewManager, Object.assign({}, processed),
+            return (react_1.default.createElement(RNNModalViewManager, { ...processed },
                 react_1.default.createElement(react_native_1.View, { style: styles.container, collapsable: false }, this.props.children)));
         }
         else {
@@ -42,11 +47,6 @@ class Modal extends react_1.default.Component {
     }
 }
 exports.Modal = Modal;
-Modal.defaultProps = {
-    transparent: false,
-    blurOnUnmount: false,
-    animationType: 'slide',
-};
 const height = Math.round(react_native_1.Dimensions.get('window').height);
 const SCREEN_ANIMATION_DURATION = 500;
 const showModalSlideEnterAnimations = {
diff --git a/node_modules/react-native-navigation/lib/dist/components/Store.d.ts b/node_modules/react-native-navigation/lib/dist/src/components/Store.d.ts
similarity index 93%
rename from node_modules/react-native-navigation/lib/dist/components/Store.d.ts
rename to node_modules/react-native-navigation/lib/dist/src/components/Store.d.ts
index 5f0864c..a3ea7ad 100644
--- a/node_modules/react-native-navigation/lib/dist/components/Store.d.ts
+++ b/node_modules/react-native-navigation/lib/dist/src/components/Store.d.ts
@@ -4,10 +4,12 @@ import { IWrappedComponent } from './ComponentWrapper';
 export declare class Store {
     private componentsByName;
     private propsById;
+    private pendingPropsById;
     private componentsInstancesById;
     private wrappedComponents;
     private lazyRegistratorFn;
     updateProps(componentId: string, props: any, callback?: () => void): void;
+    setPendingProps(componentId: string, newProps: any): void;
     getPropsForId(componentId: string): any;
     mergeNewPropsForId(componentId: string, newProps: any): void;
     clearComponent(componentId: string): void;
diff --git a/node_modules/react-native-navigation/lib/dist/components/Store.js b/node_modules/react-native-navigation/lib/dist/src/components/Store.js
similarity index 81%
rename from node_modules/react-native-navigation/lib/dist/components/Store.js
rename to node_modules/react-native-navigation/lib/dist/src/components/Store.js
index cdccac2..b161c43 100644
--- a/node_modules/react-native-navigation/lib/dist/components/Store.js
+++ b/node_modules/react-native-navigation/lib/dist/src/components/Store.js
@@ -2,12 +2,12 @@
 Object.defineProperty(exports, "__esModule", { value: true });
 exports.Store = void 0;
 class Store {
-    constructor() {
-        this.componentsByName = {};
-        this.propsById = {};
-        this.componentsInstancesById = {};
-        this.wrappedComponents = {};
-    }
+    componentsByName = {};
+    propsById = {};
+    pendingPropsById = {};
+    componentsInstancesById = {};
+    wrappedComponents = {};
+    lazyRegistratorFn;
     updateProps(componentId, props, callback) {
         this.mergeNewPropsForId(componentId, props);
         const component = this.componentsInstancesById[componentId];
@@ -15,7 +15,14 @@ class Store {
             component.setProps(props, callback);
         }
     }
+    setPendingProps(componentId, newProps) {
+        this.pendingPropsById[componentId] = newProps;
+    }
     getPropsForId(componentId) {
+        if (this.pendingPropsById[componentId]) {
+            this.propsById[componentId] = this.pendingPropsById[componentId];
+            delete this.pendingPropsById[componentId];
+        }
         return this.propsById[componentId] || {};
     }
     mergeNewPropsForId(componentId, newProps) {
diff --git a/node_modules/react-native-navigation/lib/dist/events/CommandsObserver.d.ts b/node_modules/react-native-navigation/lib/dist/src/events/CommandsObserver.d.ts
similarity index 100%
rename from node_modules/react-native-navigation/lib/dist/events/CommandsObserver.d.ts
rename to node_modules/react-native-navigation/lib/dist/src/events/CommandsObserver.d.ts
diff --git a/node_modules/react-native-navigation/lib/dist/events/CommandsObserver.js b/node_modules/react-native-navigation/lib/dist/src/events/CommandsObserver.js
similarity index 93%
rename from node_modules/react-native-navigation/lib/dist/events/CommandsObserver.js
rename to node_modules/react-native-navigation/lib/dist/src/events/CommandsObserver.js
index e9bc293..8e911b1 100644
--- a/node_modules/react-native-navigation/lib/dist/events/CommandsObserver.js
+++ b/node_modules/react-native-navigation/lib/dist/src/events/CommandsObserver.js
@@ -2,9 +2,10 @@
 Object.defineProperty(exports, "__esModule", { value: true });
 exports.CommandsObserver = void 0;
 class CommandsObserver {
+    uniqueIdProvider;
+    listeners = {};
     constructor(uniqueIdProvider) {
         this.uniqueIdProvider = uniqueIdProvider;
-        this.listeners = {};
     }
     register(listener) {
         const id = this.uniqueIdProvider.generate();
diff --git a/node_modules/react-native-navigation/lib/dist/events/ComponentEventsObserver.d.ts b/node_modules/react-native-navigation/lib/dist/src/events/ComponentEventsObserver.d.ts
similarity index 90%
rename from node_modules/react-native-navigation/lib/dist/events/ComponentEventsObserver.d.ts
rename to node_modules/react-native-navigation/lib/dist/src/events/ComponentEventsObserver.d.ts
index e38c112..56b25dc 100644
--- a/node_modules/react-native-navigation/lib/dist/events/ComponentEventsObserver.d.ts
+++ b/node_modules/react-native-navigation/lib/dist/src/events/ComponentEventsObserver.d.ts
@@ -1,4 +1,4 @@
-/// <reference types="react" />
+import type { Component } from 'react';
 import { EventSubscription } from '../interfaces/EventSubscription';
 import { NavigationComponentListener } from '../interfaces/NavigationComponentListener';
 import { ComponentWillAppearEvent, ComponentDidAppearEvent, ComponentDidDisappearEvent, NavigationButtonPressedEvent, SearchBarUpdatedEvent, SearchBarCancelPressedEvent, PreviewCompletedEvent, ScreenPoppedEvent } from '../interfaces/ComponentEvents';
@@ -11,7 +11,9 @@ export declare class ComponentEventsObserver {
     private alreadyRegistered;
     constructor(nativeEventsReceiver: NativeEventsReceiver, store: Store);
     registerOnceForAllComponentEvents(): void;
-    bindComponent(component: React.Component<any>, componentId?: string): EventSubscription;
+    bindComponent(component: Component<{
+        componentId?: string;
+    }>, componentId?: string): EventSubscription;
     registerComponentListener(listener: NavigationComponentListener, componentId: string): EventSubscription;
     unmounted(componentId: string): void;
     notifyComponentWillAppear(event: ComponentWillAppearEvent): void;
diff --git a/node_modules/react-native-navigation/lib/dist/events/ComponentEventsObserver.js b/node_modules/react-native-navigation/lib/dist/src/events/ComponentEventsObserver.js
similarity index 81%
rename from node_modules/react-native-navigation/lib/dist/events/ComponentEventsObserver.js
rename to node_modules/react-native-navigation/lib/dist/src/events/ComponentEventsObserver.js
index 59c3fd9..43a5ef3 100644
--- a/node_modules/react-native-navigation/lib/dist/events/ComponentEventsObserver.js
+++ b/node_modules/react-native-navigation/lib/dist/src/events/ComponentEventsObserver.js
@@ -2,17 +2,19 @@
 Object.defineProperty(exports, "__esModule", { value: true });
 exports.ComponentEventsObserver = void 0;
 const tslib_1 = require("tslib");
-const isString_1 = tslib_1.__importDefault(require("lodash/isString"));
-const isNil_1 = tslib_1.__importDefault(require("lodash/isNil"));
-const uniqueId_1 = tslib_1.__importDefault(require("lodash/uniqueId"));
-const unset_1 = tslib_1.__importDefault(require("lodash/unset"));
-const forEach_1 = tslib_1.__importDefault(require("lodash/forEach"));
+const isString_1 = (0, tslib_1.__importDefault)(require("lodash/isString"));
+const isNil_1 = (0, tslib_1.__importDefault)(require("lodash/isNil"));
+const uniqueId_1 = (0, tslib_1.__importDefault)(require("lodash/uniqueId"));
+const unset_1 = (0, tslib_1.__importDefault)(require("lodash/unset"));
+const forEach_1 = (0, tslib_1.__importDefault)(require("lodash/forEach"));
 class ComponentEventsObserver {
+    nativeEventsReceiver;
+    store;
+    listeners = {};
+    alreadyRegistered = false;
     constructor(nativeEventsReceiver, store) {
         this.nativeEventsReceiver = nativeEventsReceiver;
         this.store = store;
-        this.listeners = {};
-        this.alreadyRegistered = false;
         this.notifyComponentWillAppear = this.notifyComponentWillAppear.bind(this);
         this.notifyComponentDidAppear = this.notifyComponentDidAppear.bind(this);
         this.notifyComponentDidDisappear = this.notifyComponentDidDisappear.bind(this);
@@ -38,24 +40,24 @@ class ComponentEventsObserver {
     }
     bindComponent(component, componentId) {
         const computedComponentId = componentId || component.props.componentId;
-        if (!isString_1.default(computedComponentId)) {
+        if (!(0, isString_1.default)(computedComponentId)) {
             throw new Error(`bindComponent expects a component with a componentId in props or a componentId as the second argument`);
         }
         return this.registerComponentListener(component, computedComponentId);
     }
     registerComponentListener(listener, componentId) {
-        if (!isString_1.default(componentId)) {
+        if (!(0, isString_1.default)(componentId)) {
             throw new Error(`registerComponentListener expects a componentId as the second argument`);
         }
-        if (isNil_1.default(this.listeners[componentId])) {
+        if ((0, isNil_1.default)(this.listeners[componentId])) {
             this.listeners[componentId] = {};
         }
-        const key = uniqueId_1.default();
+        const key = (0, uniqueId_1.default)();
         this.listeners[componentId][key] = listener;
-        return { remove: () => unset_1.default(this.listeners[componentId], key) };
+        return { remove: () => (0, unset_1.default)(this.listeners[componentId], key) };
     }
     unmounted(componentId) {
-        unset_1.default(this.listeners, componentId);
+        (0, unset_1.default)(this.listeners, componentId);
     }
     notifyComponentWillAppear(event) {
         event.passProps = this.store.getPropsForId(event.componentId);
@@ -84,7 +86,7 @@ class ComponentEventsObserver {
         this.triggerOnAllListenersByComponentId(event, 'screenPopped');
     }
     triggerOnAllListenersByComponentId(event, method) {
-        forEach_1.default(this.listeners[event.componentId], (component) => {
+        (0, forEach_1.default)(this.listeners[event.componentId], (component) => {
             if (component && component[method]) {
                 component[method](event);
             }
diff --git a/node_modules/react-native-navigation/lib/dist/events/EventsRegistry.d.ts b/node_modules/react-native-navigation/lib/dist/src/events/EventsRegistry.d.ts
similarity index 95%
rename from node_modules/react-native-navigation/lib/dist/events/EventsRegistry.d.ts
rename to node_modules/react-native-navigation/lib/dist/src/events/EventsRegistry.d.ts
index 1248672..6ee718e 100644
--- a/node_modules/react-native-navigation/lib/dist/events/EventsRegistry.d.ts
+++ b/node_modules/react-native-navigation/lib/dist/src/events/EventsRegistry.d.ts
@@ -1,4 +1,4 @@
-/// <reference types="react" />
+import type { Component } from 'react';
 import { EmitterSubscription } from 'react-native';
 import { NativeEventsReceiver } from '../adapters/NativeEventsReceiver';
 import { CommandsObserver } from './CommandsObserver';
@@ -27,7 +27,7 @@ export declare class EventsRegistry {
     registerSearchBarCancelPressedListener(callback: (event: SearchBarCancelPressedEvent) => void): EmitterSubscription;
     registerPreviewCompletedListener(callback: (event: PreviewCompletedEvent) => void): EmitterSubscription;
     registerCommandListener(callback: (name: string, params: any) => void): EventSubscription;
-    bindComponent(component: React.Component<any>, componentId?: string): EventSubscription;
+    bindComponent(component: Component<any>, componentId?: string): EventSubscription;
     registerComponentListener(listener: NavigationComponentListener, componentId: string): EventSubscription;
     registerScreenPoppedListener(callback: (event: ScreenPoppedEvent) => void): EmitterSubscription;
 }
diff --git a/node_modules/react-native-navigation/lib/dist/events/EventsRegistry.js b/node_modules/react-native-navigation/lib/dist/src/events/EventsRegistry.js
similarity index 97%
rename from node_modules/react-native-navigation/lib/dist/events/EventsRegistry.js
rename to node_modules/react-native-navigation/lib/dist/src/events/EventsRegistry.js
index 232591c..1dd6735 100644
--- a/node_modules/react-native-navigation/lib/dist/events/EventsRegistry.js
+++ b/node_modules/react-native-navigation/lib/dist/src/events/EventsRegistry.js
@@ -2,6 +2,9 @@
 Object.defineProperty(exports, "__esModule", { value: true });
 exports.EventsRegistry = void 0;
 class EventsRegistry {
+    nativeEventsReceiver;
+    commandsObserver;
+    componentEventsObserver;
     constructor(nativeEventsReceiver, commandsObserver, componentEventsObserver) {
         this.nativeEventsReceiver = nativeEventsReceiver;
         this.commandsObserver = commandsObserver;
diff --git a/node_modules/react-native-navigation/lib/dist/index.d.ts b/node_modules/react-native-navigation/lib/dist/src/index.d.ts
similarity index 100%
rename from node_modules/react-native-navigation/lib/dist/index.d.ts
rename to node_modules/react-native-navigation/lib/dist/src/index.d.ts
diff --git a/node_modules/react-native-navigation/lib/dist/src/index.js b/node_modules/react-native-navigation/lib/dist/src/index.js
new file mode 100644
index 0000000..a8e6895
--- /dev/null
+++ b/node_modules/react-native-navigation/lib/dist/src/index.js
@@ -0,0 +1,22 @@
+"use strict";
+Object.defineProperty(exports, "__esModule", { value: true });
+exports.Navigation = void 0;
+const tslib_1 = require("tslib");
+const NavigationDelegate_1 = require("./NavigationDelegate");
+const navigationDelegate = new NavigationDelegate_1.NavigationDelegate();
+exports.Navigation = navigationDelegate;
+(0, tslib_1.__exportStar)(require("./components/Modal"), exports);
+(0, tslib_1.__exportStar)(require("./events/EventsRegistry"), exports);
+(0, tslib_1.__exportStar)(require("./adapters/Constants"), exports);
+(0, tslib_1.__exportStar)(require("./interfaces/ComponentEvents"), exports);
+(0, tslib_1.__exportStar)(require("./interfaces/Events"), exports);
+(0, tslib_1.__exportStar)(require("./interfaces/EventSubscription"), exports);
+(0, tslib_1.__exportStar)(require("./interfaces/Layout"), exports);
+(0, tslib_1.__exportStar)(require("./interfaces/Options"), exports);
+(0, tslib_1.__exportStar)(require("./interfaces/NavigationComponent"), exports);
+(0, tslib_1.__exportStar)(require("./interfaces/NavigationComponentProps"), exports);
+(0, tslib_1.__exportStar)(require("./interfaces/NavigationComponentListener"), exports);
+(0, tslib_1.__exportStar)(require("./interfaces/NavigationFunctionComponent"), exports);
+(0, tslib_1.__exportStar)(require("./interfaces/CommandName"), exports);
+(0, tslib_1.__exportStar)(require("./interfaces/Processors"), exports);
+(0, tslib_1.__exportStar)(require("./interfaces/ProcessorSubscription"), exports);
diff --git a/node_modules/react-native-navigation/lib/dist/interfaces/CommandName.d.ts b/node_modules/react-native-navigation/lib/dist/src/interfaces/CommandName.d.ts
similarity index 100%
rename from node_modules/react-native-navigation/lib/dist/interfaces/CommandName.d.ts
rename to node_modules/react-native-navigation/lib/dist/src/interfaces/CommandName.d.ts
diff --git a/node_modules/react-native-navigation/lib/dist/interfaces/CommandName.js b/node_modules/react-native-navigation/lib/dist/src/interfaces/CommandName.js
similarity index 100%
rename from node_modules/react-native-navigation/lib/dist/interfaces/CommandName.js
rename to node_modules/react-native-navigation/lib/dist/src/interfaces/CommandName.js
diff --git a/node_modules/react-native-navigation/lib/dist/interfaces/ComponentEvents.d.ts b/node_modules/react-native-navigation/lib/dist/src/interfaces/ComponentEvents.d.ts
similarity index 100%
rename from node_modules/react-native-navigation/lib/dist/interfaces/ComponentEvents.d.ts
rename to node_modules/react-native-navigation/lib/dist/src/interfaces/ComponentEvents.d.ts
diff --git a/node_modules/react-native-navigation/lib/dist/interfaces/ComponentEvents.js b/node_modules/react-native-navigation/lib/dist/src/interfaces/ComponentEvents.js
similarity index 100%
rename from node_modules/react-native-navigation/lib/dist/interfaces/ComponentEvents.js
rename to node_modules/react-native-navigation/lib/dist/src/interfaces/ComponentEvents.js
diff --git a/node_modules/react-native-navigation/lib/dist/interfaces/EventSubscription.d.ts b/node_modules/react-native-navigation/lib/dist/src/interfaces/EventSubscription.d.ts
similarity index 100%
rename from node_modules/react-native-navigation/lib/dist/interfaces/EventSubscription.d.ts
rename to node_modules/react-native-navigation/lib/dist/src/interfaces/EventSubscription.d.ts
diff --git a/node_modules/react-native-navigation/lib/dist/interfaces/EventSubscription.js b/node_modules/react-native-navigation/lib/dist/src/interfaces/EventSubscription.js
similarity index 100%
rename from node_modules/react-native-navigation/lib/dist/interfaces/EventSubscription.js
rename to node_modules/react-native-navigation/lib/dist/src/interfaces/EventSubscription.js
diff --git a/node_modules/react-native-navigation/lib/dist/interfaces/Events.d.ts b/node_modules/react-native-navigation/lib/dist/src/interfaces/Events.d.ts
similarity index 100%
rename from node_modules/react-native-navigation/lib/dist/interfaces/Events.d.ts
rename to node_modules/react-native-navigation/lib/dist/src/interfaces/Events.d.ts
diff --git a/node_modules/react-native-navigation/lib/dist/interfaces/Events.js b/node_modules/react-native-navigation/lib/dist/src/interfaces/Events.js
similarity index 100%
rename from node_modules/react-native-navigation/lib/dist/interfaces/Events.js
rename to node_modules/react-native-navigation/lib/dist/src/interfaces/Events.js
diff --git a/node_modules/react-native-navigation/lib/dist/interfaces/Layout.d.ts b/node_modules/react-native-navigation/lib/dist/src/interfaces/Layout.d.ts
similarity index 100%
rename from node_modules/react-native-navigation/lib/dist/interfaces/Layout.d.ts
rename to node_modules/react-native-navigation/lib/dist/src/interfaces/Layout.d.ts
diff --git a/node_modules/react-native-navigation/lib/dist/interfaces/Layout.js b/node_modules/react-native-navigation/lib/dist/src/interfaces/Layout.js
similarity index 100%
rename from node_modules/react-native-navigation/lib/dist/interfaces/Layout.js
rename to node_modules/react-native-navigation/lib/dist/src/interfaces/Layout.js
diff --git a/node_modules/react-native-navigation/lib/dist/interfaces/NavigationComponent.d.ts b/node_modules/react-native-navigation/lib/dist/src/interfaces/NavigationComponent.d.ts
similarity index 100%
rename from node_modules/react-native-navigation/lib/dist/interfaces/NavigationComponent.d.ts
rename to node_modules/react-native-navigation/lib/dist/src/interfaces/NavigationComponent.d.ts
diff --git a/node_modules/react-native-navigation/lib/dist/interfaces/NavigationComponent.js b/node_modules/react-native-navigation/lib/dist/src/interfaces/NavigationComponent.js
similarity index 61%
rename from node_modules/react-native-navigation/lib/dist/interfaces/NavigationComponent.js
rename to node_modules/react-native-navigation/lib/dist/src/interfaces/NavigationComponent.js
index eeb3895..58043f5 100644
--- a/node_modules/react-native-navigation/lib/dist/interfaces/NavigationComponent.js
+++ b/node_modules/react-native-navigation/lib/dist/src/interfaces/NavigationComponent.js
@@ -2,8 +2,15 @@
 Object.defineProperty(exports, "__esModule", { value: true });
 exports.NavigationComponent = void 0;
 const tslib_1 = require("tslib");
-const react_1 = tslib_1.__importDefault(require("react"));
+const react_1 = (0, tslib_1.__importDefault)(require("react"));
 class NavigationComponent extends react_1.default.Component {
+    /**
+     * Options used to apply a style configuration when the screen appears.
+     *
+     * This field can either contain the concrete options to be applied, or a generator function
+     * which accepts props and returns an Options object.
+     */
+    static options;
     componentWillAppear(_event) { }
     componentDidAppear(_event) { }
     componentDidDisappear(_event) { }
diff --git a/node_modules/react-native-navigation/lib/dist/interfaces/NavigationComponentListener.d.ts b/node_modules/react-native-navigation/lib/dist/src/interfaces/NavigationComponentListener.d.ts
similarity index 100%
rename from node_modules/react-native-navigation/lib/dist/interfaces/NavigationComponentListener.d.ts
rename to node_modules/react-native-navigation/lib/dist/src/interfaces/NavigationComponentListener.d.ts
diff --git a/node_modules/react-native-navigation/lib/dist/interfaces/NavigationComponentListener.js b/node_modules/react-native-navigation/lib/dist/src/interfaces/NavigationComponentListener.js
similarity index 100%
rename from node_modules/react-native-navigation/lib/dist/interfaces/NavigationComponentListener.js
rename to node_modules/react-native-navigation/lib/dist/src/interfaces/NavigationComponentListener.js
diff --git a/node_modules/react-native-navigation/lib/dist/interfaces/NavigationComponentProps.d.ts b/node_modules/react-native-navigation/lib/dist/src/interfaces/NavigationComponentProps.d.ts
similarity index 100%
rename from node_modules/react-native-navigation/lib/dist/interfaces/NavigationComponentProps.d.ts
rename to node_modules/react-native-navigation/lib/dist/src/interfaces/NavigationComponentProps.d.ts
diff --git a/node_modules/react-native-navigation/lib/dist/interfaces/NavigationComponentProps.js b/node_modules/react-native-navigation/lib/dist/src/interfaces/NavigationComponentProps.js
similarity index 100%
rename from node_modules/react-native-navigation/lib/dist/interfaces/NavigationComponentProps.js
rename to node_modules/react-native-navigation/lib/dist/src/interfaces/NavigationComponentProps.js
diff --git a/node_modules/react-native-navigation/lib/dist/interfaces/NavigationFunctionComponent.d.ts b/node_modules/react-native-navigation/lib/dist/src/interfaces/NavigationFunctionComponent.d.ts
similarity index 100%
rename from node_modules/react-native-navigation/lib/dist/interfaces/NavigationFunctionComponent.d.ts
rename to node_modules/react-native-navigation/lib/dist/src/interfaces/NavigationFunctionComponent.d.ts
diff --git a/node_modules/react-native-navigation/lib/dist/interfaces/NavigationFunctionComponent.js b/node_modules/react-native-navigation/lib/dist/src/interfaces/NavigationFunctionComponent.js
similarity index 100%
rename from node_modules/react-native-navigation/lib/dist/interfaces/NavigationFunctionComponent.js
rename to node_modules/react-native-navigation/lib/dist/src/interfaces/NavigationFunctionComponent.js
diff --git a/node_modules/react-native-navigation/lib/dist/interfaces/Options.d.ts b/node_modules/react-native-navigation/lib/dist/src/interfaces/Options.d.ts
similarity index 99%
rename from node_modules/react-native-navigation/lib/dist/interfaces/Options.d.ts
rename to node_modules/react-native-navigation/lib/dist/src/interfaces/Options.d.ts
index faf15c9..b3c7ca3 100644
--- a/node_modules/react-native-navigation/lib/dist/interfaces/Options.d.ts
+++ b/node_modules/react-native-navigation/lib/dist/src/interfaces/Options.d.ts
@@ -360,6 +360,10 @@ export interface HardwareBackButtonOptions {
      * @default true
      */
     popStackOnPress?: boolean;
+    /**
+     * Controls hardware back button bottom tab selection behaviour
+     */
+    bottomTabsOnPress?: 'exit' | 'first' | 'previous';
 }
 export interface OptionsTopBarScrollEdgeAppearanceBackground {
     /**
@@ -430,6 +434,11 @@ export interface OptionsTopBarButton {
      * Set the button icon
      */
     icon?: ImageResource;
+    /**
+     * Set the SF symbol as icon (will be used primarily)
+     * #### (iOS 13+ specific)
+     */
+    sfSymbol?: string;
     /**
      * Set the button icon insets
      */
diff --git a/node_modules/react-native-navigation/lib/dist/interfaces/Options.js b/node_modules/react-native-navigation/lib/dist/src/interfaces/Options.js
similarity index 100%
rename from node_modules/react-native-navigation/lib/dist/interfaces/Options.js
rename to node_modules/react-native-navigation/lib/dist/src/interfaces/Options.js
diff --git a/node_modules/react-native-navigation/lib/dist/interfaces/ProcessorSubscription.d.ts b/node_modules/react-native-navigation/lib/dist/src/interfaces/ProcessorSubscription.d.ts
similarity index 100%
rename from node_modules/react-native-navigation/lib/dist/interfaces/ProcessorSubscription.d.ts
rename to node_modules/react-native-navigation/lib/dist/src/interfaces/ProcessorSubscription.d.ts
diff --git a/node_modules/react-native-navigation/lib/dist/interfaces/ProcessorSubscription.js b/node_modules/react-native-navigation/lib/dist/src/interfaces/ProcessorSubscription.js
similarity index 100%
rename from node_modules/react-native-navigation/lib/dist/interfaces/ProcessorSubscription.js
rename to node_modules/react-native-navigation/lib/dist/src/interfaces/ProcessorSubscription.js
diff --git a/node_modules/react-native-navigation/lib/dist/interfaces/Processors.d.ts b/node_modules/react-native-navigation/lib/dist/src/interfaces/Processors.d.ts
similarity index 100%
rename from node_modules/react-native-navigation/lib/dist/interfaces/Processors.d.ts
rename to node_modules/react-native-navigation/lib/dist/src/interfaces/Processors.d.ts
diff --git a/node_modules/react-native-navigation/lib/dist/interfaces/Processors.js b/node_modules/react-native-navigation/lib/dist/src/interfaces/Processors.js
similarity index 100%
rename from node_modules/react-native-navigation/lib/dist/interfaces/Processors.js
rename to node_modules/react-native-navigation/lib/dist/src/interfaces/Processors.js
diff --git a/node_modules/react-native-navigation/lib/dist/processors/LayoutProcessor.d.ts b/node_modules/react-native-navigation/lib/dist/src/processors/LayoutProcessor.d.ts
similarity index 100%
rename from node_modules/react-native-navigation/lib/dist/processors/LayoutProcessor.d.ts
rename to node_modules/react-native-navigation/lib/dist/src/processors/LayoutProcessor.d.ts
diff --git a/node_modules/react-native-navigation/lib/dist/processors/LayoutProcessor.js b/node_modules/react-native-navigation/lib/dist/src/processors/LayoutProcessor.js
similarity index 95%
rename from node_modules/react-native-navigation/lib/dist/processors/LayoutProcessor.js
rename to node_modules/react-native-navigation/lib/dist/src/processors/LayoutProcessor.js
index a60efa2..919603b 100644
--- a/node_modules/react-native-navigation/lib/dist/processors/LayoutProcessor.js
+++ b/node_modules/react-native-navigation/lib/dist/src/processors/LayoutProcessor.js
@@ -2,6 +2,7 @@
 Object.defineProperty(exports, "__esModule", { value: true });
 exports.LayoutProcessor = void 0;
 class LayoutProcessor {
+    layoutProcessorsStore;
     constructor(layoutProcessorsStore) {
         this.layoutProcessorsStore = layoutProcessorsStore;
     }
diff --git a/node_modules/react-native-navigation/lib/dist/processors/LayoutProcessorsStore.d.ts b/node_modules/react-native-navigation/lib/dist/src/processors/LayoutProcessorsStore.d.ts
similarity index 100%
rename from node_modules/react-native-navigation/lib/dist/processors/LayoutProcessorsStore.d.ts
rename to node_modules/react-native-navigation/lib/dist/src/processors/LayoutProcessorsStore.d.ts
diff --git a/node_modules/react-native-navigation/lib/dist/processors/LayoutProcessorsStore.js b/node_modules/react-native-navigation/lib/dist/src/processors/LayoutProcessorsStore.js
similarity index 89%
rename from node_modules/react-native-navigation/lib/dist/processors/LayoutProcessorsStore.js
rename to node_modules/react-native-navigation/lib/dist/src/processors/LayoutProcessorsStore.js
index c2dd156..fe5da82 100644
--- a/node_modules/react-native-navigation/lib/dist/processors/LayoutProcessorsStore.js
+++ b/node_modules/react-native-navigation/lib/dist/src/processors/LayoutProcessorsStore.js
@@ -2,9 +2,7 @@
 Object.defineProperty(exports, "__esModule", { value: true });
 exports.LayoutProcessorsStore = void 0;
 class LayoutProcessorsStore {
-    constructor() {
-        this.layoutProcessors = [];
-    }
+    layoutProcessors = [];
     addProcessor(processor) {
         this.layoutProcessors.push(processor);
         return { remove: () => this.removeProcessor(processor) };
diff --git a/node_modules/react-native-navigation/lib/dist/processors/OptionProcessorsStore.d.ts b/node_modules/react-native-navigation/lib/dist/src/processors/OptionProcessorsStore.d.ts
similarity index 100%
rename from node_modules/react-native-navigation/lib/dist/processors/OptionProcessorsStore.d.ts
rename to node_modules/react-native-navigation/lib/dist/src/processors/OptionProcessorsStore.d.ts
diff --git a/node_modules/react-native-navigation/lib/dist/processors/OptionProcessorsStore.js b/node_modules/react-native-navigation/lib/dist/src/processors/OptionProcessorsStore.js
similarity index 91%
rename from node_modules/react-native-navigation/lib/dist/processors/OptionProcessorsStore.js
rename to node_modules/react-native-navigation/lib/dist/src/processors/OptionProcessorsStore.js
index 0486a9d..5467208 100644
--- a/node_modules/react-native-navigation/lib/dist/processors/OptionProcessorsStore.js
+++ b/node_modules/react-native-navigation/lib/dist/src/processors/OptionProcessorsStore.js
@@ -2,9 +2,7 @@
 Object.defineProperty(exports, "__esModule", { value: true });
 exports.OptionProcessorsStore = void 0;
 class OptionProcessorsStore {
-    constructor() {
-        this.optionsProcessorsByObjectPath = {};
-    }
+    optionsProcessorsByObjectPath = {};
     addProcessor(optionPath, processor) {
         if (!this.optionsProcessorsByObjectPath[optionPath])
             this.optionsProcessorsByObjectPath[optionPath] = [];
diff --git a/node_modules/react-native-navigation/lib/dist/types.d.ts b/node_modules/react-native-navigation/lib/dist/src/types.d.ts
similarity index 100%
rename from node_modules/react-native-navigation/lib/dist/types.d.ts
rename to node_modules/react-native-navigation/lib/dist/src/types.d.ts
diff --git a/node_modules/react-native-navigation/lib/dist/types.js b/node_modules/react-native-navigation/lib/dist/src/types.js
similarity index 100%
rename from node_modules/react-native-navigation/lib/dist/types.js
rename to node_modules/react-native-navigation/lib/dist/src/types.js
diff --git a/node_modules/react-native-navigation/lib/ios/AnimationObserver.h b/node_modules/react-native-navigation/lib/ios/AnimationObserver.h
new file mode 100644
index 0000000..f7f9c69
--- /dev/null
+++ b/node_modules/react-native-navigation/lib/ios/AnimationObserver.h
@@ -0,0 +1,17 @@
+#import <Foundation/Foundation.h>
+
+typedef void (^RNNAnimationEndedBlock)(void);
+
+@interface AnimationObserver : NSObject
+
++ (AnimationObserver *)sharedObserver;
+
+@property(nonatomic) BOOL isAnimating;
+
+- (void)registerAnimationEndedBlock:(RNNAnimationEndedBlock)block;
+
+- (void)beginAnimation;
+
+- (void)endAnimation;
+
+@end
diff --git a/node_modules/react-native-navigation/lib/ios/AnimationObserver.m b/node_modules/react-native-navigation/lib/ios/AnimationObserver.m
new file mode 100644
index 0000000..65ad585
--- /dev/null
+++ b/node_modules/react-native-navigation/lib/ios/AnimationObserver.m
@@ -0,0 +1,41 @@
+#import "AnimationObserver.h"
+
+@implementation AnimationObserver {
+    NSMutableArray<RNNAnimationEndedBlock> *_animationEndedBlocks;
+}
+
+- (instancetype)init {
+    self = [super init];
+    _animationEndedBlocks = [NSMutableArray array];
+    return self;
+}
+
++ (AnimationObserver *)sharedObserver {
+    static AnimationObserver *_sharedObserver = nil;
+    static dispatch_once_t onceToken;
+    dispatch_once(&onceToken, ^{
+      _sharedObserver = [[AnimationObserver alloc] init];
+    });
+
+    return _sharedObserver;
+}
+
+- (void)registerAnimationEndedBlock:(RNNAnimationEndedBlock)block {
+    [_animationEndedBlocks addObject:block];
+}
+
+- (void)beginAnimation {
+    _isAnimating = YES;
+}
+
+- (void)endAnimation {
+    _isAnimating = NO;
+
+    for (RNNAnimationEndedBlock block in _animationEndedBlocks) {
+        block();
+    }
+
+    [_animationEndedBlocks removeAllObjects];
+}
+
+@end
diff --git a/node_modules/react-native-navigation/lib/ios/BottomTabPresenter.h b/node_modules/react-native-navigation/lib/ios/BottomTabPresenter.h
index 6750519..ef7ba67 100644
--- a/node_modules/react-native-navigation/lib/ios/BottomTabPresenter.h
+++ b/node_modules/react-native-navigation/lib/ios/BottomTabPresenter.h
@@ -7,9 +7,6 @@
 
 - (void)applyOptions:(RNNNavigationOptions *)options child:(UIViewController *)child;
 
-- (void)applyOptionsOnWillMoveToParentViewController:(RNNNavigationOptions *)options
-                                               child:(UIViewController *)child;
-
 - (void)createTabBarItem:(UIViewController *)child
         bottomTabOptions:(RNNBottomTabOptions *)bottomTabOptions;
 
diff --git a/node_modules/react-native-navigation/lib/ios/BottomTabPresenter.m b/node_modules/react-native-navigation/lib/ios/BottomTabPresenter.m
index d2b59c2..367a6df 100644
--- a/node_modules/react-native-navigation/lib/ios/BottomTabPresenter.m
+++ b/node_modules/react-native-navigation/lib/ios/BottomTabPresenter.m
@@ -17,14 +17,6 @@
 - (void)applyOptions:(RNNNavigationOptions *)options child:(UIViewController *)child {
     RNNNavigationOptions *withDefault = [options withDefault:self.defaultOptions];
 
-    [child setTabBarItemBadge:[withDefault.bottomTab.badge withDefault:[NSNull null]]];
-    [child setTabBarItemBadgeColor:[withDefault.bottomTab.badgeColor withDefault:nil]];
-}
-
-- (void)applyOptionsOnWillMoveToParentViewController:(RNNNavigationOptions *)options
-                                               child:(UIViewController *)child {
-    RNNNavigationOptions *withDefault = [options withDefault:self.defaultOptions];
-
     [self createTabBarItem:child bottomTabOptions:withDefault.bottomTab];
     [child setTabBarItemBadge:[withDefault.bottomTab.badge withDefault:[NSNull null]]];
     [child setTabBarItemBadgeColor:[withDefault.bottomTab.badgeColor withDefault:nil]];
diff --git a/node_modules/react-native-navigation/lib/ios/RNNAssert.h b/node_modules/react-native-navigation/lib/ios/RNNAssert.h
index 1cc79aa..9d4db01 100644
--- a/node_modules/react-native-navigation/lib/ios/RNNAssert.h
+++ b/node_modules/react-native-navigation/lib/ios/RNNAssert.h
@@ -12,8 +12,8 @@ extern BOOL RNNIsMainQueue(void);
         if ((condition) == 0) {                                                                    \
             if (RNN_NSASSERT) {                                                                    \
                 [[NSAssertionHandler currentHandler]                                               \
-                    handleFailureInFunction:(NSString * _Nonnull) @(__func__)                      \
-                                       file:(NSString * _Nonnull) @(__FILE__)                      \
+                    handleFailureInFunction:(NSString *_Nonnull)@(__func__)                        \
+                                       file:(NSString *_Nonnull)@(__FILE__)                        \
                                  lineNumber:__LINE__                                               \
                                 description:__VA_ARGS__];                                          \
             }                                                                                      \
diff --git a/node_modules/react-native-navigation/lib/ios/RNNBasePresenter.h b/node_modules/react-native-navigation/lib/ios/RNNBasePresenter.h
index 400a55e..1d6a755 100644
--- a/node_modules/react-native-navigation/lib/ios/RNNBasePresenter.h
+++ b/node_modules/react-native-navigation/lib/ios/RNNBasePresenter.h
@@ -24,8 +24,6 @@ typedef void (^RNNReactViewReadyCompletionBlock)(void);
 
 - (void)applyOptions:(RNNNavigationOptions *)options;
 
-- (void)applyOptionsOnWillMoveToParentViewController:(RNNNavigationOptions *)options;
-
 - (void)mergeOptions:(RNNNavigationOptions *)options
      resolvedOptions:(RNNNavigationOptions *)resolvedOptions;
 
@@ -42,8 +40,6 @@ typedef void (^RNNReactViewReadyCompletionBlock)(void);
 
 - (UINavigationItem *)currentNavigationItem;
 
-- (void)willMoveToParentViewController:(UIViewController *)parent;
-
 - (UIStatusBarStyle)getStatusBarStyle;
 
 - (UIInterfaceOrientationMask)getOrientation;
diff --git a/node_modules/react-native-navigation/lib/ios/RNNBasePresenter.m b/node_modules/react-native-navigation/lib/ios/RNNBasePresenter.m
index 54ccea8..12c7c2e 100644
--- a/node_modules/react-native-navigation/lib/ios/RNNBasePresenter.m
+++ b/node_modules/react-native-navigation/lib/ios/RNNBasePresenter.m
@@ -40,15 +40,6 @@
 - (void)componentDidDisappear {
 }
 
-- (void)willMoveToParentViewController:(UIViewController *)parent {
-    if (parent) {
-        RNNNavigationOptions *resolvedOptions = [self.boundViewController resolveOptions];
-        [self applyOptionsOnWillMoveToParentViewController:resolvedOptions];
-        [self.boundViewController onChildAddToParent:self.boundViewController
-                                             options:resolvedOptions];
-    }
-}
-
 - (void)applyOptionsOnInit:(RNNNavigationOptions *)initialOptions {
     UIViewController *viewController = self.boundViewController;
     RNNNavigationOptions *withDefault = [initialOptions withDefault:[self defaultOptions]];
@@ -66,9 +57,6 @@
 - (void)applyOptionsOnViewDidLayoutSubviews:(RNNNavigationOptions *)options {
 }
 
-- (void)applyOptionsOnWillMoveToParentViewController:(RNNNavigationOptions *)options {
-}
-
 - (void)applyOptions:(RNNNavigationOptions *)options {
 }
 
diff --git a/node_modules/react-native-navigation/lib/ios/RNNBottomTabOptions.m b/node_modules/react-native-navigation/lib/ios/RNNBottomTabOptions.m
index 0f24da1..a164e64 100644
--- a/node_modules/react-native-navigation/lib/ios/RNNBottomTabOptions.m
+++ b/node_modules/react-native-navigation/lib/ios/RNNBottomTabOptions.m
@@ -84,7 +84,8 @@
            self.testID.hasValue || self.icon.hasValue || self.selectedIcon.hasValue ||
            self.iconColor.hasValue || self.selectedIconColor.hasValue ||
            self.selectedTextColor.hasValue || self.iconInsets.hasValue || self.textColor.hasValue ||
-           self.visible.hasValue || self.selectTabOnPress.hasValue || self.sfSymbol.hasValue || self.sfSelectedSymbol.hasValue;
+           self.visible.hasValue || self.selectTabOnPress.hasValue || self.sfSymbol.hasValue ||
+           self.sfSelectedSymbol.hasValue;
 }
 
 @end
diff --git a/node_modules/react-native-navigation/lib/ios/RNNBottomTabsController.m b/node_modules/react-native-navigation/lib/ios/RNNBottomTabsController.m
index adf23aa..5525008 100644
--- a/node_modules/react-native-navigation/lib/ios/RNNBottomTabsController.m
+++ b/node_modules/react-native-navigation/lib/ios/RNNBottomTabsController.m
@@ -46,6 +46,8 @@
     }
 #endif
 
+    [self createTabBarItems:childViewControllers];
+
     self.longPressRecognizer =
         [[UILongPressGestureRecognizer alloc] initWithTarget:self
                                                       action:@selector(handleLongPressGesture:)];
@@ -54,16 +56,18 @@
     return self;
 }
 
+- (void)createTabBarItems:(NSArray<UIViewController *> *)childViewControllers {
+    for (UIViewController *child in childViewControllers) {
+        [_bottomTabPresenter applyOptions:child.resolveOptions child:child];
+    }
+}
+
 - (void)viewWillAppear:(BOOL)animated {
     [super viewWillAppear:animated];
     _viewWillAppearOnce = YES;
     [self loadChildren:self.pendingChildViewControllers];
 }
 
-- (void)onChildAddToParent:(UIViewController *)child options:(RNNNavigationOptions *)options {
-    [_bottomTabPresenter applyOptionsOnWillMoveToParentViewController:options child:child];
-}
-
 - (void)mergeChildOptions:(RNNNavigationOptions *)options child:(UIViewController *)child {
     [super mergeChildOptions:options child:child];
     UIViewController *childViewController = [self findViewController:child];
@@ -189,10 +193,6 @@
 
 #pragma mark - UIViewController overrides
 
-- (void)willMoveToParentViewController:(UIViewController *)parent {
-    [self.presenter willMoveToParentViewController:parent];
-}
-
 - (UIStatusBarStyle)preferredStatusBarStyle {
     return [self.presenter getStatusBarStyle];
 }
diff --git a/node_modules/react-native-navigation/lib/ios/RNNBridgeManager.mm b/node_modules/react-native-navigation/lib/ios/RNNBridgeManager.mm
index 5188fe6..857897c 100644
--- a/node_modules/react-native-navigation/lib/ios/RNNBridgeManager.mm
+++ b/node_modules/react-native-navigation/lib/ios/RNNBridgeManager.mm
@@ -113,7 +113,6 @@
 - (void)onBridgeWillReload {
     dispatch_async(dispatch_get_main_queue(), ^{
       [self->_overlayManager dismissAllOverlays];
-      [self->_modalManager dismissAllModalsSynchronosly];
       [self->_componentRegistry clear];
       UIApplication.sharedApplication.delegate.window.rootViewController = nil;
     });
diff --git a/node_modules/react-native-navigation/lib/ios/RNNButtonBuilder.m b/node_modules/react-native-navigation/lib/ios/RNNButtonBuilder.m
index 2704b21..24e3cb3 100644
--- a/node_modules/react-native-navigation/lib/ios/RNNButtonBuilder.m
+++ b/node_modules/react-native-navigation/lib/ios/RNNButtonBuilder.m
@@ -31,6 +31,8 @@
         return [[RNNUIBarButtonItem alloc] initCustomIcon:button
                                               iconCreator:_iconCreator
                                                   onPress:onPress];
+    } else if (button.sfSymbol.hasValue) {
+        return [[RNNUIBarButtonItem alloc] initWithSFSymbol:button onPress:onPress];
     } else if (button.icon.hasValue) {
         return [[RNNUIBarButtonItem alloc] initWithIcon:button onPress:onPress];
     } else if (button.text.hasValue) {
diff --git a/node_modules/react-native-navigation/lib/ios/RNNButtonOptions.h b/node_modules/react-native-navigation/lib/ios/RNNButtonOptions.h
index 9aaa99c..ba76119 100644
--- a/node_modules/react-native-navigation/lib/ios/RNNButtonOptions.h
+++ b/node_modules/react-native-navigation/lib/ios/RNNButtonOptions.h
@@ -16,6 +16,7 @@
 @property(nonatomic, strong) Color *color;
 @property(nonatomic, strong) Color *disabledColor;
 @property(nonatomic, strong) Image *icon;
+@property(nonatomic, strong) Text *sfSymbol;
 @property(nonatomic, strong) Bool *enabled;
 @property(nonatomic, strong) RNNInsetsOptions *iconInsets;
 @property(nonatomic, strong) Bool *selectTabOnPress;
diff --git a/node_modules/react-native-navigation/lib/ios/RNNButtonOptions.m b/node_modules/react-native-navigation/lib/ios/RNNButtonOptions.m
index 26ec9bf..a311913 100644
--- a/node_modules/react-native-navigation/lib/ios/RNNButtonOptions.m
+++ b/node_modules/react-native-navigation/lib/ios/RNNButtonOptions.m
@@ -11,6 +11,7 @@
     self.fontWeight = [TextParser parse:dict key:@"fontWeight"];
     self.fontSize = [NumberParser parse:dict key:@"fontSize"];
     self.text = [TextParser parse:dict key:@"text"];
+    self.sfSymbol = [TextParser parse:dict key:@"sfSymbol"];
     self.testID = [TextParser parse:dict key:@"testID"];
     self.accessibilityLabel = [TextParser parse:dict key:@"accessibilityLabel"];
     self.color = [ColorParser parse:dict key:@"color"];
@@ -39,6 +40,7 @@
     newOptions.color = self.color.copy;
     newOptions.disabledColor = self.disabledColor.copy;
     newOptions.icon = self.icon.copy;
+    newOptions.sfSymbol = self.sfSymbol.copy;
     newOptions.iconInsets = self.iconInsets.copy;
     newOptions.enabled = self.enabled.copy;
     newOptions.selectTabOnPress = self.selectTabOnPress.copy;
@@ -71,6 +73,8 @@
         self.disabledColor = options.disabledColor;
     if (options.icon.hasValue)
         self.icon = options.icon;
+    if (options.sfSymbol.hasValue)
+        self.sfSymbol = options.sfSymbol;
     if (options.enabled.hasValue) {
         self.enabled = options.enabled;
         [self.iconBackground setEnabled:self.enabled];
diff --git a/node_modules/react-native-navigation/lib/ios/RNNCommandsHandler.m b/node_modules/react-native-navigation/lib/ios/RNNCommandsHandler.m
index 5eb5078..61b135f 100644
--- a/node_modules/react-native-navigation/lib/ios/RNNCommandsHandler.m
+++ b/node_modules/react-native-navigation/lib/ios/RNNCommandsHandler.m
@@ -1,4 +1,5 @@
 #import "RNNCommandsHandler.h"
+#import "AnimationObserver.h"
 #import "RNNAssert.h"
 #import "RNNComponentViewController.h"
 #import "RNNConvert.h"
@@ -82,10 +83,7 @@ static NSString *const setDefaultOptions = @"setDefaultOptions";
         }
     }
 
-    [_modalManager dismissAllModalsAnimated:NO
-                                 completion:^{
-
-                                 }];
+    [_modalManager reset];
 
     UIViewController *vc = [_controllerFactory createLayout:layout[@"root"]];
     [_layoutManager addPendingViewController:vc];
@@ -203,12 +201,16 @@ static NSString *const setDefaultOptions = @"setDefaultOptions";
             });
         }
     } else {
-        newVc.waitForRender = optionsWithDefault.animations.push.shouldWaitForRender;
+        BOOL animated = [optionsWithDefault.animations.push.enable withDefault:YES];
+        BOOL waitForRender = optionsWithDefault.animations.push.shouldWaitForRender;
+        newVc.waitForRender = waitForRender;
         __weak UIViewController *weakNewVC = newVc;
         [newVc setReactViewReadyCallback:^{
+          if (animated && !waitForRender)
+              [[AnimationObserver sharedObserver] beginAnimation];
           [fromVC.stack push:weakNewVC
                        onTop:fromVC
-                    animated:[optionsWithDefault.animations.push.enable withDefault:YES]
+                    animated:animated
                   completion:^{
                     [self->_layoutManager removePendingViewController:weakNewVC];
                     [self->_eventEmitter sendOnNavigationCommandCompletion:push
@@ -369,14 +371,19 @@ static NSString *const setDefaultOptions = @"setDefaultOptions";
     [_layoutManager addPendingViewController:newVc];
 
     __weak UIViewController *weakNewVC = newVc;
-    newVc.waitForRender = [withDefault.animations.showModal.enter shouldWaitForRender];
+    BOOL animated = [withDefault.animations.showModal.enter.enable withDefault:YES];
+    BOOL waitForRender = [withDefault.animations.showModal.enter shouldWaitForRender];
+    newVc.waitForRender = waitForRender;
     newVc.modalPresentationStyle = [RNNConvert
         UIModalPresentationStyle:[withDefault.modalPresentationStyle withDefault:@"default"]];
     newVc.modalTransitionStyle = [RNNConvert
         UIModalTransitionStyle:[withDefault.modalTransitionStyle withDefault:@"coverVertical"]];
+
+    if (animated && !waitForRender)
+        [[AnimationObserver sharedObserver] beginAnimation];
     [newVc setReactViewReadyCallback:^{
       [self->_modalManager showModal:weakNewVC
-                            animated:[withDefault.animations.showModal.enter.enable withDefault:YES]
+                            animated:animated
                           completion:^(NSString *componentId) {
                             [self->_layoutManager removePendingViewController:weakNewVC];
                             [self->_eventEmitter sendOnNavigationCommandCompletion:showModal
diff --git a/node_modules/react-native-navigation/lib/ios/RNNComponentPresenter.m b/node_modules/react-native-navigation/lib/ios/RNNComponentPresenter.m
index fc5c18f..c41bfc8 100644
--- a/node_modules/react-native-navigation/lib/ios/RNNComponentPresenter.m
+++ b/node_modules/react-native-navigation/lib/ios/RNNComponentPresenter.m
@@ -41,10 +41,6 @@
     [_buttonsPresenter componentDidDisappear];
 }
 
-- (void)applyOptionsOnWillMoveToParentViewController:(RNNNavigationOptions *)options {
-    [super applyOptionsOnWillMoveToParentViewController:options];
-}
-
 - (void)applyOptions:(RNNNavigationOptions *)options {
     [super applyOptions:options];
 
diff --git a/node_modules/react-native-navigation/lib/ios/RNNComponentViewController.m b/node_modules/react-native-navigation/lib/ios/RNNComponentViewController.m
index ea592a9..e45a43a 100644
--- a/node_modules/react-native-navigation/lib/ios/RNNComponentViewController.m
+++ b/node_modules/react-native-navigation/lib/ios/RNNComponentViewController.m
@@ -1,4 +1,5 @@
 #import "RNNComponentViewController.h"
+#import "AnimationObserver.h"
 
 @implementation RNNComponentViewController {
     NSArray *_reactViewConstraints;
@@ -36,6 +37,7 @@
 
 - (void)viewDidAppear:(BOOL)animated {
     [super viewDidAppear:animated];
+    [[AnimationObserver sharedObserver] endAnimation];
     [self.reactView componentDidAppear];
     [self componentDidAppear];
 }
@@ -224,10 +226,6 @@
 
 #pragma mark - UIViewController overrides
 
-- (void)willMoveToParentViewController:(UIViewController *)parent {
-    [self.presenter willMoveToParentViewController:parent];
-}
-
 - (UIStatusBarStyle)preferredStatusBarStyle {
     return [self.presenter getStatusBarStyle];
 }
diff --git a/node_modules/react-native-navigation/lib/ios/RNNDotIndicatorPresenter.m b/node_modules/react-native-navigation/lib/ios/RNNDotIndicatorPresenter.m
index 6869d07..635c115 100644
--- a/node_modules/react-native-navigation/lib/ios/RNNDotIndicatorPresenter.m
+++ b/node_modules/react-native-navigation/lib/ios/RNNDotIndicatorPresenter.m
@@ -92,7 +92,8 @@
         return NO;
     UIView *currentIndicator = [self getCurrentIndicator:child];
 
-    return [[currentIndicator backgroundColor] isEqual:[options.color withDefault:[UIColor redColor]]];
+    return
+        [[currentIndicator backgroundColor] isEqual:[options.color withDefault:[UIColor redColor]]];
 }
 
 - (UIView *)getCurrentIndicator:(UIViewController *)child {
diff --git a/node_modules/react-native-navigation/lib/ios/RNNExternalViewController.m b/node_modules/react-native-navigation/lib/ios/RNNExternalViewController.m
index a338cc5..9413a54 100644
--- a/node_modules/react-native-navigation/lib/ios/RNNExternalViewController.m
+++ b/node_modules/react-native-navigation/lib/ios/RNNExternalViewController.m
@@ -1,4 +1,5 @@
 #import "RNNExternalViewController.h"
+#import "AnimationObserver.h"
 
 @implementation RNNExternalViewController {
     UIViewController *_boundViewController;
@@ -49,6 +50,7 @@
 
 - (void)viewDidAppear:(BOOL)animated {
     [super viewDidAppear:animated];
+    [[AnimationObserver sharedObserver] endAnimation];
     [self.eventEmitter sendComponentDidAppear:self.layoutInfo.componentId
                                 componentName:self.layoutInfo.name
                                 componentType:ComponentTypeScreen];
@@ -63,10 +65,6 @@
 
 #pragma mark - UIViewController overrides
 
-- (void)willMoveToParentViewController:(UIViewController *)parent {
-    [self.presenter willMoveToParentViewController:parent];
-}
-
 - (UIStatusBarStyle)preferredStatusBarStyle {
     return [self.presenter getStatusBarStyle];
 }
diff --git a/node_modules/react-native-navigation/lib/ios/RNNModalManager.h b/node_modules/react-native-navigation/lib/ios/RNNModalManager.h
index 609e6bb..bd39c7a 100644
--- a/node_modules/react-native-navigation/lib/ios/RNNModalManager.h
+++ b/node_modules/react-native-navigation/lib/ios/RNNModalManager.h
@@ -22,6 +22,7 @@ typedef void (^RNNTransitionRejectionBlock)(NSString *_Nonnull code, NSString *_
             animated:(BOOL)animated
           completion:(RNNTransitionCompletionBlock _Nullable)completion;
 - (void)dismissAllModalsAnimated:(BOOL)animated completion:(void (^__nullable)(void))completion;
-- (void)dismissAllModalsSynchronosly;
+
+- (void)reset;
 
 @end
diff --git a/node_modules/react-native-navigation/lib/ios/RNNModalManager.m b/node_modules/react-native-navigation/lib/ios/RNNModalManager.m
index c50ef61..074afa5 100644
--- a/node_modules/react-native-navigation/lib/ios/RNNModalManager.m
+++ b/node_modules/react-native-navigation/lib/ios/RNNModalManager.m
@@ -36,12 +36,14 @@
     modalHostViewManager.presentationBlock =
         ^(UIViewController *reactViewController, UIViewController *viewController, BOOL animated,
           dispatch_block_t completionBlock) {
-          [self showModal:viewController
-                 animated:animated
-               completion:^(NSString *_Nonnull componentId) {
-                 if (completionBlock)
-                     completionBlock();
-               }];
+          if (reactViewController.presentedViewController != viewController) {
+              [self showModal:viewController
+                     animated:animated
+                   completion:^(NSString *_Nonnull componentId) {
+                     if (completionBlock)
+                         completionBlock();
+                   }];
+          }
         };
 
     modalHostViewManager.dismissalBlock =
@@ -128,19 +130,9 @@
         completion();
 }
 
-- (void)dismissAllModalsSynchronosly {
-    if (_presentedModals.count) {
-        dispatch_semaphore_t sem = dispatch_semaphore_create(0);
-        [self dismissAllModalsAnimated:NO
-                            completion:^{
-                              dispatch_semaphore_signal(sem);
-                            }];
-
-        while (dispatch_semaphore_wait(sem, DISPATCH_TIME_NOW)) {
-            [[NSRunLoop currentRunLoop] runMode:NSDefaultRunLoopMode
-                                     beforeDate:[NSDate dateWithTimeIntervalSinceNow:0]];
-        }
-    }
+- (void)reset {
+    [_presentedModals removeAllObjects];
+    [_pendingModalIdsToDismiss removeAllObjects];
 }
 
 #pragma mark - private
@@ -170,8 +162,7 @@
             _dismissModalTransitionDelegate;
     }
 
-    if ((modalToDismiss == topPresentedVC ||
-         [[topPresentedVC childViewControllers] containsObject:modalToDismiss])) {
+    if ((modalToDismiss == topPresentedVC || [topPresentedVC findViewController:modalToDismiss])) {
         [self dismissSearchController:modalToDismiss];
         [modalToDismiss
             dismissViewControllerAnimated:animated
diff --git a/node_modules/react-native-navigation/lib/ios/RNNSegmentedControl.h b/node_modules/react-native-navigation/lib/ios/RNNSegmentedControl.h
index 4177161..64ddd8d 100644
--- a/node_modules/react-native-navigation/lib/ios/RNNSegmentedControl.h
+++ b/node_modules/react-native-navigation/lib/ios/RNNSegmentedControl.h
@@ -1,5 +1,5 @@
-#import <HMSegmentedControl/HMSegmentedControl.h>
 #import <Foundation/Foundation.h>
+#import <HMSegmentedControl/HMSegmentedControl.h>
 
 @interface RNNSegmentedControl : HMSegmentedControl
 
diff --git a/node_modules/react-native-navigation/lib/ios/RNNSideMenuChildVC.m b/node_modules/react-native-navigation/lib/ios/RNNSideMenuChildVC.m
index a276fbd..a0d940f 100644
--- a/node_modules/react-native-navigation/lib/ios/RNNSideMenuChildVC.m
+++ b/node_modules/react-native-navigation/lib/ios/RNNSideMenuChildVC.m
@@ -64,10 +64,6 @@
 
 #pragma mark - UIViewController overrides
 
-- (void)willMoveToParentViewController:(UIViewController *)parent {
-    [self.presenter willMoveToParentViewController:parent];
-}
-
 - (UIStatusBarStyle)preferredStatusBarStyle {
     return [self.presenter getStatusBarStyle];
 }
diff --git a/node_modules/react-native-navigation/lib/ios/RNNSideMenuController.m b/node_modules/react-native-navigation/lib/ios/RNNSideMenuController.m
index 8df96b2..813b181 100644
--- a/node_modules/react-native-navigation/lib/ios/RNNSideMenuController.m
+++ b/node_modules/react-native-navigation/lib/ios/RNNSideMenuController.m
@@ -170,10 +170,6 @@
 
 #pragma mark - UIViewController overrides
 
-- (void)willMoveToParentViewController:(UIViewController *)parent {
-    [self.presenter willMoveToParentViewController:parent];
-}
-
 - (UIStatusBarStyle)preferredStatusBarStyle {
     return [self.presenter getStatusBarStyle];
 }
diff --git a/node_modules/react-native-navigation/lib/ios/RNNSplitViewController.m b/node_modules/react-native-navigation/lib/ios/RNNSplitViewController.m
index d0dca93..a96f09b 100644
--- a/node_modules/react-native-navigation/lib/ios/RNNSplitViewController.m
+++ b/node_modules/react-native-navigation/lib/ios/RNNSplitViewController.m
@@ -15,10 +15,6 @@
 
 #pragma mark - UIViewController overrides
 
-- (void)willMoveToParentViewController:(UIViewController *)parent {
-    [self.presenter willMoveToParentViewController:parent];
-}
-
 - (UIStatusBarStyle)preferredStatusBarStyle {
     return [self.presenter getStatusBarStyle];
 }
diff --git a/node_modules/react-native-navigation/lib/ios/RNNStackController.m b/node_modules/react-native-navigation/lib/ios/RNNStackController.m
index 28f2cc4..5037226 100644
--- a/node_modules/react-native-navigation/lib/ios/RNNStackController.m
+++ b/node_modules/react-native-navigation/lib/ios/RNNStackController.m
@@ -73,10 +73,6 @@
 
 #pragma mark - UIViewController overrides
 
-- (void)willMoveToParentViewController:(UIViewController *)parent {
-    [self.presenter willMoveToParentViewController:parent];
-}
-
 - (UIStatusBarStyle)preferredStatusBarStyle {
     return [self.presenter getStatusBarStyle];
 }
diff --git a/node_modules/react-native-navigation/lib/ios/RNNStackPresenter.m b/node_modules/react-native-navigation/lib/ios/RNNStackPresenter.m
index 8cc0ddf..9de5510 100644
--- a/node_modules/react-native-navigation/lib/ios/RNNStackPresenter.m
+++ b/node_modules/react-native-navigation/lib/ios/RNNStackPresenter.m
@@ -82,6 +82,9 @@
         setNavigationBarClipsToBounds:[withDefault.topBar.background.clipToBounds withDefault:NO]];
 
     [stack.view setBackgroundColor:[withDefault.layout.backgroundColor withDefault:nil]];
+    if (options.topBar.background.component.name.hasValue) {
+        [self setCustomNavigationComponentBackground:options perform:nil];
+    }
 }
 
 - (void)applyOptionsOnViewDidLayoutSubviews:(RNNNavigationOptions *)options {
diff --git a/node_modules/react-native-navigation/lib/ios/RNNSwizzles.m b/node_modules/react-native-navigation/lib/ios/RNNSwizzles.m
index d8ccf1a..22c7cce 100644
--- a/node_modules/react-native-navigation/lib/ios/RNNSwizzles.m
+++ b/node_modules/react-native-navigation/lib/ios/RNNSwizzles.m
@@ -7,11 +7,13 @@
 //
 
 #import "RNNSwizzles.h"
+#import "AnimationObserver.h"
 @import ObjectiveC;
 @import UIKit;
 
 static id (*__SWZ_initWithEventDispatcher_orig)(id self, SEL _cmd, id eventDispatcher);
 static void (*__SWZ_setFrame_orig)(id self, SEL _cmd, CGRect frame);
+static void (*__SWZ_didMoveToWindow_orig)(id self, SEL _cmd);
 
 static void __RNN_setFrame_orig(UIScrollView *self, SEL _cmd, CGRect frame) {
     CGPoint originalOffset = self.contentOffset;
@@ -37,6 +39,16 @@ static void __RNN_setFrame_orig(UIScrollView *self, SEL _cmd, CGRect frame) {
     }
 }
 
+static void __RNN_didMoveToWindow(UIView *self, SEL _cmd) {
+    if (![[AnimationObserver sharedObserver] isAnimating] || !self.window) {
+        __SWZ_didMoveToWindow_orig(self, _cmd);
+    } else {
+        [[AnimationObserver sharedObserver] registerAnimationEndedBlock:^{
+          __SWZ_didMoveToWindow_orig(self, _cmd);
+        }];
+    }
+}
+
 @implementation RNNSwizzles
 
 - (id)__swz_initWithEventDispatcher:(id)eventDispatcher {
@@ -72,6 +84,14 @@ static void __RNN_setFrame_orig(UIScrollView *self, SEL _cmd, CGRect frame) {
     m1 = class_getInstanceMethod(cls, @selector(setFrame:));
     __SWZ_setFrame_orig = (void *)method_getImplementation(m1);
     method_setImplementation(m1, (IMP)__RNN_setFrame_orig);
+
+    cls = NSClassFromString(@"RCTBaseTextInputView");
+    if (cls == NULL) {
+        return;
+    }
+    Method m4 = class_getInstanceMethod(cls, NSSelectorFromString(@"didMoveToWindow"));
+    __SWZ_didMoveToWindow_orig = (void *)method_getImplementation(m4);
+    method_setImplementation(m4, (IMP)__RNN_didMoveToWindow);
 }
 
 @end
diff --git a/node_modules/react-native-navigation/lib/ios/RNNTabBarItemCreator.m b/node_modules/react-native-navigation/lib/ios/RNNTabBarItemCreator.m
index b795501..140c7be 100644
--- a/node_modules/react-native-navigation/lib/ios/RNNTabBarItemCreator.m
+++ b/node_modules/react-native-navigation/lib/ios/RNNTabBarItemCreator.m
@@ -18,11 +18,12 @@
 
     if (@available(iOS 13.0, *)) {
         if (bottomTabOptions.sfSymbol.hasValue) {
-            icon = [UIImage systemImageNamed: [bottomTabOptions.sfSymbol withDefault:nil]];
+            icon = [UIImage systemImageNamed:[bottomTabOptions.sfSymbol withDefault:nil]];
         }
 
         if (bottomTabOptions.sfSelectedSymbol.hasValue) {
-            selectedIcon = [UIImage systemImageNamed: [bottomTabOptions.sfSelectedSymbol withDefault:nil]];
+            selectedIcon =
+                [UIImage systemImageNamed:[bottomTabOptions.sfSelectedSymbol withDefault:nil]];
         }
     }
 
diff --git a/node_modules/react-native-navigation/lib/ios/RNNUIBarButtonItem.h b/node_modules/react-native-navigation/lib/ios/RNNUIBarButtonItem.h
index 24e9b8b..47ffde6 100644
--- a/node_modules/react-native-navigation/lib/ios/RNNUIBarButtonItem.h
+++ b/node_modules/react-native-navigation/lib/ios/RNNUIBarButtonItem.h
@@ -14,6 +14,8 @@ typedef void (^RNNButtonPressCallback)(NSString *buttonId);
 - (instancetype)initCustomIcon:(RNNButtonOptions *)buttonOptions
                    iconCreator:(RNNIconCreator *)iconCreator
                        onPress:(RNNButtonPressCallback)onPress;
+- (instancetype)initWithSFSymbol:(RNNButtonOptions *)buttonOptions
+                         onPress:(RNNButtonPressCallback)onPress;
 - (instancetype)initWithIcon:(RNNButtonOptions *)buttonOptions
                      onPress:(RNNButtonPressCallback)onPress;
 - (instancetype)initWithTitle:(RNNButtonOptions *)buttonOptions
diff --git a/node_modules/react-native-navigation/lib/ios/RNNUIBarButtonItem.m b/node_modules/react-native-navigation/lib/ios/RNNUIBarButtonItem.m
index da42fdf..c49cb2f 100644
--- a/node_modules/react-native-navigation/lib/ios/RNNUIBarButtonItem.m
+++ b/node_modules/react-native-navigation/lib/ios/RNNUIBarButtonItem.m
@@ -20,6 +20,23 @@
     return self;
 }
 
+- (instancetype)initWithSFSymbol:(RNNButtonOptions *)buttonOptions
+                         onPress:(RNNButtonPressCallback)onPress {
+    UIImage *iconImage = [UIImage alloc];
+
+    if (@available(iOS 13.0, *)) {
+        iconImage = [UIImage systemImageNamed:[buttonOptions.sfSymbol withDefault:nil]];
+    }
+
+    self = [super initWithImage:iconImage
+                          style:UIBarButtonItemStylePlain
+                         target:self
+                         action:@selector(onButtonPressed:)];
+    [self applyOptions:buttonOptions];
+    self.onPress = onPress;
+    return self;
+}
+
 - (instancetype)initWithIcon:(RNNButtonOptions *)buttonOptions
                      onPress:(RNNButtonPressCallback)onPress {
     UIImage *iconImage = buttonOptions.icon.get;
diff --git a/node_modules/react-native-navigation/lib/ios/ReactNativeNavigation.xcodeproj/project.pbxproj b/node_modules/react-native-navigation/lib/ios/ReactNativeNavigation.xcodeproj/project.pbxproj
index 963f07d..23ab61f 100644
--- a/node_modules/react-native-navigation/lib/ios/ReactNativeNavigation.xcodeproj/project.pbxproj
+++ b/node_modules/react-native-navigation/lib/ios/ReactNativeNavigation.xcodeproj/project.pbxproj
@@ -355,6 +355,8 @@
 		50D3A37723BB5CD900717F95 /* OptionsArrayParser.m in Sources */ = {isa = PBXBuildFile; fileRef = 50D3A37523BB5CD900717F95 /* OptionsArrayParser.m */; };
 		50D4656D23CE2553005A84B2 /* Transition.h in Headers */ = {isa = PBXBuildFile; fileRef = 50D4656B23CE2553005A84B2 /* Transition.h */; };
 		50D4656E23CE2553005A84B2 /* Transition.m in Sources */ = {isa = PBXBuildFile; fileRef = 50D4656C23CE2553005A84B2 /* Transition.m */; };
+		50DD9154274FC6E200B4C917 /* AnimationObserver.h in Headers */ = {isa = PBXBuildFile; fileRef = 50DD9152274FC6E200B4C917 /* AnimationObserver.h */; };
+		50DD9155274FC6E200B4C917 /* AnimationObserver.m in Sources */ = {isa = PBXBuildFile; fileRef = 50DD9153274FC6E200B4C917 /* AnimationObserver.m */; };
 		50DE2E45238EA14E005CD5F4 /* NSArray+utils.h in Headers */ = {isa = PBXBuildFile; fileRef = 50DE2E43238EA14E005CD5F4 /* NSArray+utils.h */; };
 		50DE2E46238EA14E005CD5F4 /* NSArray+utils.m in Sources */ = {isa = PBXBuildFile; fileRef = 50DE2E44238EA14E005CD5F4 /* NSArray+utils.m */; };
 		50E02BD821A6EE0F00A43942 /* SideMenuOpenMode.h in Headers */ = {isa = PBXBuildFile; fileRef = 50E02BD621A6EE0F00A43942 /* SideMenuOpenMode.h */; };
@@ -885,6 +887,8 @@
 		50D4656B23CE2553005A84B2 /* Transition.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = Transition.h; sourceTree = "<group>"; };
 		50D4656C23CE2553005A84B2 /* Transition.m */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.objc; path = Transition.m; sourceTree = "<group>"; };
 		50DA74CF232F80FE004A00C1 /* RCTConvert+UIFontWeight.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "RCTConvert+UIFontWeight.h"; sourceTree = "<group>"; };
+		50DD9152274FC6E200B4C917 /* AnimationObserver.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = AnimationObserver.h; sourceTree = "<group>"; };
+		50DD9153274FC6E200B4C917 /* AnimationObserver.m */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.objc; path = AnimationObserver.m; sourceTree = "<group>"; };
 		50DE2E43238EA14E005CD5F4 /* NSArray+utils.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "NSArray+utils.h"; sourceTree = "<group>"; };
 		50DE2E44238EA14E005CD5F4 /* NSArray+utils.m */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.objc; path = "NSArray+utils.m"; sourceTree = "<group>"; };
 		50E02BD521A6E54B00A43942 /* RCTConvert+SideMenuOpenGestureMode.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "RCTConvert+SideMenuOpenGestureMode.h"; sourceTree = "<group>"; };
@@ -1120,6 +1124,8 @@
 				5053CE7E2175FB1900D0386B /* RNNDefaultOptionsHelper.m */,
 				C2A57A1A21E815F80066711C /* InteractivePopGestureDelegate.h */,
 				C2A57A1B21E815F80066711C /* InteractivePopGestureDelegate.m */,
+				50DD9152274FC6E200B4C917 /* AnimationObserver.h */,
+				50DD9153274FC6E200B4C917 /* AnimationObserver.m */,
 			);
 			name = Helpers;
 			sourceTree = "<group>";
@@ -1931,6 +1937,7 @@
 				50CED44D239EA78700C42EE2 /* TopBarAppearancePresenter.h in Headers */,
 				50D3A37223B8D77C00717F95 /* SharedElementTransitionOptions.h in Headers */,
 				50C085F325939F6200B0502C /* RNNButtonBuilder.h in Headers */,
+				50DD9154274FC6E200B4C917 /* AnimationObserver.h in Headers */,
 				50887C1520ECC5C200D06111 /* RNNButtonOptions.h in Headers */,
 				5049593E216F5D73006D2B81 /* BoolParser.h in Headers */,
 				E5F6C3A522DB4D0F0093C2CE /* UIViewController+Utils.h in Headers */,
@@ -2219,6 +2226,7 @@
 				509416AC23A11CB20036092C /* NullEnum.m in Sources */,
 				503A8A1A23BCB2ED0094D1C4 /* RNNReactButtonView.m in Sources */,
 				50570BEB2063E09B006A1B5C /* RNNTitleViewHelper.m in Sources */,
+				50DD9155274FC6E200B4C917 /* AnimationObserver.m in Sources */,
 				263905E71E4CAC950023D7D3 /* RNNSideMenuChildVC.m in Sources */,
 				5082CC3423CDC3B800FD2B6A /* HorizontalTranslationTransition.m in Sources */,
 				50495957216F6B3D006D2B81 /* DictionaryParser.m in Sources */,
diff --git a/node_modules/react-native-navigation/lib/ios/TopBarPresenter.m b/node_modules/react-native-navigation/lib/ios/TopBarPresenter.m
index a5b5ca1..d906388 100644
--- a/node_modules/react-native-navigation/lib/ios/TopBarPresenter.m
+++ b/node_modules/react-native-navigation/lib/ios/TopBarPresenter.m
@@ -89,7 +89,6 @@
         self.navigationController.navigationBar.translucent = YES;
     } else {
         self.navigationController.navigationBar.translucent = NO;
-        self.navigationController.navigationBar.barTintColor = nil;
     }
 }
 
@@ -160,17 +159,21 @@
     UIBarButtonItem *backItem = [[RNNUIBarBackButtonItem alloc] initWithOptions:backButtonOptions];
     UINavigationItem *previousNavigationItem = previousViewControllerInStack.navigationItem;
 
-
     if (@available(iOS 13.0, *)) {
         UIImage *sfSymbol = [UIImage systemImageNamed:[backButtonOptions.sfSymbol withDefault:nil]];
         if (backButtonOptions.sfSymbol.hasValue) {
-            icon = color ? [sfSymbol imageWithTintColor:color renderingMode:UIImageRenderingModeAlwaysOriginal]
+            icon = color ? [sfSymbol imageWithTintColor:color
+                                          renderingMode:UIImageRenderingModeAlwaysOriginal]
                          : [sfSymbol imageWithRenderingMode:UIImageRenderingModeAlwaysOriginal];
         } else {
-            icon = color ? [[icon withTintColor:color] imageWithRenderingMode:UIImageRenderingModeAlwaysOriginal] : icon;
+            icon = color ? [[icon withTintColor:color]
+                               imageWithRenderingMode:UIImageRenderingModeAlwaysOriginal]
+                         : icon;
         }
     } else {
-        icon = color ? [[icon withTintColor:color] imageWithRenderingMode:UIImageRenderingModeAlwaysOriginal] : icon;
+        icon = color ? [[icon withTintColor:color]
+                           imageWithRenderingMode:UIImageRenderingModeAlwaysOriginal]
+                     : icon;
     }
 
     [self setBackIndicatorImage:icon withColor:color];
diff --git a/node_modules/react-native-navigation/lib/ios/UIViewController+RNNOptions.m b/node_modules/react-native-navigation/lib/ios/UIViewController+RNNOptions.m
index d19b969..157d814 100644
--- a/node_modules/react-native-navigation/lib/ios/UIViewController+RNNOptions.m
+++ b/node_modules/react-native-navigation/lib/ios/UIViewController+RNNOptions.m
@@ -134,7 +134,7 @@ const NSInteger BLUR_STATUS_TAG = 78264801;
     if (blur) {
         if (!curBlurView) {
             UIVisualEffectView *blur = [[UIVisualEffectView alloc]
-                initWithEffect:[UIBlurEffect effectWithStyle:UIBlurEffectStyleLight]];
+                initWithEffect:[UIBlurEffect effectWithStyle:UIBlurEffectStyleRegular]];
             blur.frame = [[UIApplication sharedApplication] statusBarFrame];
             blur.tag = BLUR_STATUS_TAG;
             [self.view addSubview:blur];
diff --git a/node_modules/react-native-navigation/lib/src/commands/Commands.ts b/node_modules/react-native-navigation/lib/src/commands/Commands.ts
index 3defb11..cca3e2b 100644
--- a/node_modules/react-native-navigation/lib/src/commands/Commands.ts
+++ b/node_modules/react-native-navigation/lib/src/commands/Commands.ts
@@ -73,7 +73,7 @@ export class Commands {
 
   public mergeOptions(componentId: string, options: Options) {
     const input = cloneDeep(options);
-    this.optionsProcessor.processOptions(input, CommandName.MergeOptions);
+    this.optionsProcessor.processOptions(CommandName.MergeOptions, input);
 
     const component = this.store.getComponentInstance(componentId);
     if (component && !component.isMounted)
@@ -106,6 +106,7 @@ export class Commands {
 
   public dismissModal(componentId: string, mergeOptions?: Options) {
     const commandId = this.uniqueIdProvider.generate(CommandName.DismissModal);
+    this.optionsProcessor.processOptions(CommandName.DismissModal, mergeOptions);
     const result = this.nativeCommandsSender.dismissModal(commandId, componentId, mergeOptions);
     this.commandsObserver.notify(CommandName.DismissModal, {
       commandId,
@@ -117,6 +118,7 @@ export class Commands {
 
   public dismissAllModals(mergeOptions?: Options) {
     const commandId = this.uniqueIdProvider.generate(CommandName.DismissAllModals);
+    this.optionsProcessor.processOptions(CommandName.DismissAllModals, mergeOptions);
     const result = this.nativeCommandsSender.dismissAllModals(commandId, mergeOptions);
     this.commandsObserver.notify(CommandName.DismissAllModals, { commandId, mergeOptions });
     return result;
@@ -138,6 +140,7 @@ export class Commands {
 
   public pop(componentId: string, mergeOptions?: Options) {
     const commandId = this.uniqueIdProvider.generate(CommandName.Pop);
+    this.optionsProcessor.processOptions(CommandName.Pop, mergeOptions);
     const result = this.nativeCommandsSender.pop(commandId, componentId, mergeOptions);
     this.commandsObserver.notify(CommandName.Pop, { commandId, componentId, mergeOptions });
     return result;
@@ -145,6 +148,7 @@ export class Commands {
 
   public popTo(componentId: string, mergeOptions?: Options) {
     const commandId = this.uniqueIdProvider.generate(CommandName.PopTo);
+    this.optionsProcessor.processOptions(CommandName.PopTo, mergeOptions);
     const result = this.nativeCommandsSender.popTo(commandId, componentId, mergeOptions);
     this.commandsObserver.notify(CommandName.PopTo, { commandId, componentId, mergeOptions });
     return result;
@@ -152,6 +156,7 @@ export class Commands {
 
   public popToRoot(componentId: string, mergeOptions?: Options) {
     const commandId = this.uniqueIdProvider.generate(CommandName.PopToRoot);
+    this.optionsProcessor.processOptions(CommandName.PopToRoot, mergeOptions);
     const result = this.nativeCommandsSender.popToRoot(commandId, componentId, mergeOptions);
     this.commandsObserver.notify(CommandName.PopToRoot, { commandId, componentId, mergeOptions });
     return result;
diff --git a/node_modules/react-native-navigation/lib/src/commands/LayoutTreeCrawler.ts b/node_modules/react-native-navigation/lib/src/commands/LayoutTreeCrawler.ts
index 907eb51..d2fbf11 100644
--- a/node_modules/react-native-navigation/lib/src/commands/LayoutTreeCrawler.ts
+++ b/node_modules/react-native-navigation/lib/src/commands/LayoutTreeCrawler.ts
@@ -24,7 +24,7 @@ export class LayoutTreeCrawler {
     if (node.type === LayoutType.Component) {
       this.handleComponent(node);
     }
-    this.optionsProcessor.processOptions(node.data.options, commandName);
+    this.optionsProcessor.processOptions(commandName, node.data.options);
     node.children.forEach((value: LayoutNode) => this.crawl(value, commandName));
   }
 
@@ -35,7 +35,7 @@ export class LayoutTreeCrawler {
   }
 
   private savePropsToStore(node: LayoutNode) {
-    this.store.updateProps(node.id, node.data.passProps);
+    this.store.setPendingProps(node.id, node.data.passProps);
   }
 
   private assertComponentDataName(component: LayoutNode) {
diff --git a/node_modules/react-native-navigation/lib/src/commands/OptionsCrawler.ts b/node_modules/react-native-navigation/lib/src/commands/OptionsCrawler.ts
index 0188f64..d73f3c4 100644
--- a/node_modules/react-native-navigation/lib/src/commands/OptionsCrawler.ts
+++ b/node_modules/react-native-navigation/lib/src/commands/OptionsCrawler.ts
@@ -1,3 +1,4 @@
+import type { ComponentType } from 'react';
 import merge from 'lodash/merge';
 import isFunction from 'lodash/isFunction';
 import { Store } from '../components/Store';
@@ -14,7 +15,7 @@ import {
 import { UniqueIdProvider } from 'react-native-navigation/adapters/UniqueIdProvider';
 import { LayoutType } from './LayoutType';
 
-type ComponentWithOptions = React.ComponentType<any> & { options(passProps: any): Options };
+type ComponentWithOptions = ComponentType<any> & { options(passProps: any): Options };
 
 export class OptionsCrawler {
   constructor(public readonly store: Store, public readonly uniqueIdProvider: UniqueIdProvider) {
diff --git a/node_modules/react-native-navigation/lib/src/commands/OptionsProcessor.ts b/node_modules/react-native-navigation/lib/src/commands/OptionsProcessor.ts
index 0985b92..4dca5df 100644
--- a/node_modules/react-native-navigation/lib/src/commands/OptionsProcessor.ts
+++ b/node_modules/react-native-navigation/lib/src/commands/OptionsProcessor.ts
@@ -37,17 +37,19 @@ export class OptionsProcessor {
     private deprecations: Deprecations
   ) {}
 
-  public processOptions(options: Options, commandName: CommandName, props?: any) {
-    this.processObject(
-      options,
-      clone(options),
-      (key, parentOptions) => {
-        this.deprecations.onProcessOptions(key, parentOptions, commandName);
-        this.deprecations.checkForDeprecatedOptions(parentOptions);
-      },
-      commandName,
-      props
-    );
+  public processOptions(commandName: CommandName, options?: Options, props?: any) {
+    if (options) {
+      this.processObject(
+        options,
+        clone(options),
+        (key, parentOptions) => {
+          this.deprecations.onProcessOptions(key, parentOptions, commandName);
+          this.deprecations.checkForDeprecatedOptions(parentOptions);
+        },
+        commandName,
+        props
+      );
+    }
   }
 
   public processDefaultOptions(options: Options, commandName: CommandName) {
@@ -200,7 +202,7 @@ export class OptionsProcessor {
     if (endsWith(key, 'Buttons')) {
       forEach(value, (button) => {
         if (button.passProps && button.id) {
-          this.store.updateProps(button.id, button.passProps);
+          this.store.setPendingProps(button.id, button.passProps);
           button.passProps = undefined;
         }
       });
@@ -212,7 +214,7 @@ export class OptionsProcessor {
       value.componentId = value.id ? value.id : this.uniqueIdProvider.generate('CustomComponent');
       this.store.ensureClassForName(value.name);
       if (value.passProps) {
-        this.store.updateProps(value.componentId, value.passProps);
+        this.store.setPendingProps(value.componentId, value.passProps);
       }
       options[key].passProps = undefined;
     }
diff --git a/node_modules/react-native-navigation/lib/src/components/Store.ts b/node_modules/react-native-navigation/lib/src/components/Store.ts
index 416f6de..08cfc07 100644
--- a/node_modules/react-native-navigation/lib/src/components/Store.ts
+++ b/node_modules/react-native-navigation/lib/src/components/Store.ts
@@ -5,6 +5,7 @@ import { IWrappedComponent } from './ComponentWrapper';
 export class Store {
   private componentsByName: Record<string, ComponentProvider> = {};
   private propsById: Record<string, any> = {};
+  private pendingPropsById: Record<string, any> = {};
   private componentsInstancesById: Record<string, IWrappedComponent> = {};
   private wrappedComponents: Record<string, React.ComponentClass<any>> = {};
   private lazyRegistratorFn: ((lazyComponentRequest: string | number) => void) | undefined;
@@ -18,7 +19,15 @@ export class Store {
     }
   }
 
+  setPendingProps(componentId: string, newProps: any) {
+    this.pendingPropsById[componentId] = newProps;
+  }
+
   getPropsForId(componentId: string) {
+    if (this.pendingPropsById[componentId]) {
+      this.propsById[componentId] = this.pendingPropsById[componentId];
+      delete this.pendingPropsById[componentId];
+    }
     return this.propsById[componentId] || {};
   }
 
diff --git a/node_modules/react-native-navigation/lib/src/events/ComponentEventsObserver.ts b/node_modules/react-native-navigation/lib/src/events/ComponentEventsObserver.ts
index a36a9e9..0b503a3 100644
--- a/node_modules/react-native-navigation/lib/src/events/ComponentEventsObserver.ts
+++ b/node_modules/react-native-navigation/lib/src/events/ComponentEventsObserver.ts
@@ -1,3 +1,4 @@
+import type { Component } from 'react';
 import isString from 'lodash/isString';
 import isNil from 'lodash/isNil';
 import uniqueId from 'lodash/uniqueId';
@@ -60,7 +61,10 @@ export class ComponentEventsObserver {
     this.nativeEventsReceiver.registerScreenPoppedListener(this.notifyPreviewCompleted);
   }
 
-  public bindComponent(component: React.Component<any>, componentId?: string): EventSubscription {
+  public bindComponent(
+    component: Component<{ componentId?: string }>,
+    componentId?: string
+  ): EventSubscription {
     const computedComponentId = componentId || component.props.componentId;
 
     if (!isString(computedComponentId)) {
diff --git a/node_modules/react-native-navigation/lib/src/events/EventsRegistry.ts b/node_modules/react-native-navigation/lib/src/events/EventsRegistry.ts
index c859e52..6dfa863 100644
--- a/node_modules/react-native-navigation/lib/src/events/EventsRegistry.ts
+++ b/node_modules/react-native-navigation/lib/src/events/EventsRegistry.ts
@@ -1,3 +1,4 @@
+import type { Component } from 'react';
 import { EmitterSubscription } from 'react-native';
 
 import { NativeEventsReceiver } from '../adapters/NativeEventsReceiver';
@@ -117,7 +118,7 @@ export class EventsRegistry {
     return this.commandsObserver.register(callback);
   }
 
-  public bindComponent(component: React.Component<any>, componentId?: string): EventSubscription {
+  public bindComponent(component: Component<any>, componentId?: string): EventSubscription {
     return this.componentEventsObserver.bindComponent(component, componentId);
   }
 
diff --git a/node_modules/react-native-navigation/lib/src/interfaces/Options.ts b/node_modules/react-native-navigation/lib/src/interfaces/Options.ts
index 7448948..d98a0c4 100644
--- a/node_modules/react-native-navigation/lib/src/interfaces/Options.ts
+++ b/node_modules/react-native-navigation/lib/src/interfaces/Options.ts
@@ -414,6 +414,11 @@ export interface HardwareBackButtonOptions {
    * @default true
    */
   popStackOnPress?: boolean;
+
+  /**
+   * Controls hardware back button bottom tab selection behaviour
+   */
+  bottomTabsOnPress?: 'exit' | 'first' | 'previous';
 }
 
 export interface OptionsTopBarScrollEdgeAppearanceBackground {
@@ -488,6 +493,11 @@ export interface OptionsTopBarButton {
    * Set the button icon
    */
   icon?: ImageResource;
+  /**
+   * Set the SF symbol as icon (will be used primarily)
+   * #### (iOS 13+ specific)
+   */
+  sfSymbol?: string;
   /**
    * Set the button icon insets
    */
diff --git a/node_modules/react-native-navigation/tsconfig.mocks.json b/node_modules/react-native-navigation/tsconfig.mocks.json
new file mode 100644
index 0000000..bde9c18
--- /dev/null
+++ b/node_modules/react-native-navigation/tsconfig.mocks.json
@@ -0,0 +1,7 @@
+{
+  "extends": "./tsconfig.build.json",
+  "compilerOptions": {
+    "outDir": "./"
+  },
+  "include": ["Mock.ts"]
+}
